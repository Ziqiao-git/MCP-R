{
  "qualifiedName": "@skr-cloudify/clickup-mcp-cloudify",
  "displayName": "ClickUp Workspace",
  "description": "Manage your ClickUp workspace with powerful task, list, and folder operations, including bulk updates and cross-list searches. Create, update, move, duplicate, or delete tasks; add comments, tags, attachments, and assignees; and track time with timers or manual entries. Work with documents and pages, explore your hierarchy, and pull member info to streamline collaboration.",
  "iconUrl": "https://icons.duckduckgo.com/ip3/github.com.ico",
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@skr-cloudify/clickup-mcp-cloudify",
  "security": null,
  "tools": [
    {
      "name": "get_workspace_hierarchy",
      "description": "Gets complete workspace hierarchy (spaces, folders, lists). No parameters needed. Returns tree structure with names and IDs for navigation.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "create_task",
      "description": "Creates a single task in a ClickUp list. Use listId (preferred) or listName. Required: name + list info. For multiple tasks use create_bulk_tasks. Can create subtasks via parent param. Supports custom fields as array of {id, value}. Supports assignees as array of user IDs, emails, or usernames.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "REQUIRED: Name of the task. Put a relevant emoji followed by a blank space before the name."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of tag names to assign to the task. The tags must already exist in the space."
          },
          "listId": {
            "type": "string",
            "description": "REQUIRED (unless listName provided): ID of the list to create the task in. If you have this ID from a previous response, use it directly rather than looking up by name."
          },
          "parent": {
            "type": "string",
            "description": "Optional ID of the parent task. When specified, this task will be created as a subtask of the specified parent task."
          },
          "status": {
            "type": "string",
            "description": "Optional: Override the default ClickUp status. In most cases, you should omit this to use ClickUp defaults"
          },
          "dueDate": {
            "type": "string",
            "description": "Optional due date. Supports Unix timestamps (ms) or natural language like '1 hour from now', 'tomorrow', 'next week', etc."
          },
          "listName": {
            "type": "string",
            "description": "REQUIRED (unless listId provided): Name of the list to create the task in - will automatically find the list by name."
          },
          "priority": {
            "type": "number",
            "description": "Optional priority of the task (1-4), where 1 is urgent/highest priority and 4 is lowest priority. Only set this when explicitly requested."
          },
          "assignees": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "Optional array of assignee user IDs (numbers), emails, or usernames to assign to the task."
          },
          "startDate": {
            "type": "string",
            "description": "Optional start date. Supports Unix timestamps (ms) or natural language like 'now', 'start of today', etc."
          },
          "description": {
            "type": "string",
            "description": "Optional plain text description for the task"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of the custom field"
                },
                "value": {
                  "description": "Value for the custom field. Type depends on the field type."
                }
              }
            },
            "description": "Optional array of custom field values to set on the task. Each object must have an 'id' and 'value' property."
          },
          "markdown_description": {
            "type": "string",
            "description": "Optional markdown formatted description for the task. If provided, this takes precedence over description"
          },
          "check_required_custom_fields": {
            "type": "boolean",
            "description": "Optional flag to check if all required custom fields are set before saving the task."
          }
        }
      }
    },
    {
      "name": "get_task",
      "description": "Gets task details by taskId (automatically handles both regular and custom IDs) or taskName. For taskName search, provide listName for faster lookup. Set subtasks=true to include all subtask details.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of task to retrieve (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456'). Simply provide any task ID format here."
          },
          "listName": {
            "type": "string",
            "description": "Name of list containing the task. Optional but recommended when using taskName."
          },
          "subtasks": {
            "type": "boolean",
            "description": "Whether to include subtasks in the response. Set to true to retrieve full details of all subtasks."
          },
          "taskName": {
            "type": "string",
            "description": "Name of task to retrieve. Can be used alone for a global search, or with listName for faster lookup."
          },
          "customTaskId": {
            "type": "string",
            "description": "Custom task ID (e.g., 'DEV-1234'). This parameter is now optional since taskId automatically handles custom IDs. Use only for explicit custom ID lookup or backward compatibility."
          }
        }
      }
    },
    {
      "name": "update_task",
      "description": "Updates task properties. Use taskId (preferred) or taskName + optional listName. At least one update field required. Custom fields supported as array of {id, value}. Supports assignees as array of user IDs, emails, or usernames. WARNING: Using taskName without listName may match multiple tasks.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the task. Include emoji prefix if appropriate."
          },
          "status": {
            "type": "string",
            "description": "New status. Must be valid for the task's current list."
          },
          "taskId": {
            "type": "string",
            "description": "ID of task to update (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
          },
          "dueDate": {
            "type": "string",
            "description": "New due date. Supports both Unix timestamps (in milliseconds) and natural language expressions like '1 hour from now', 'tomorrow', 'next week', or '3 days from now'."
          },
          "listName": {
            "type": "string",
            "description": "Optional: Name of list containing the task. Providing this narrows the search to a specific list, improving performance and reducing ambiguity."
          },
          "priority": {
            "enum": [
              "1",
              "2",
              "3",
              "4",
              null
            ],
            "type": "string",
            "nullable": true,
            "description": "New priority: 1 (urgent) to 4 (low). Set null to clear priority."
          },
          "taskName": {
            "type": "string",
            "description": "Name of task to update. The tool will search for tasks with this name across all lists unless listName is specified."
          },
          "assignees": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "description": "Optional array of assignee user IDs (numbers), emails, or usernames to assign to the task."
          },
          "startDate": {
            "type": "string",
            "description": "New start date. Supports both Unix timestamps (in milliseconds) and natural language expressions."
          },
          "description": {
            "type": "string",
            "description": "New plain text description. Will be ignored if markdown_description is provided."
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "value"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of the custom field"
                },
                "value": {
                  "description": "Value for the custom field. Type depends on the field type."
                }
              }
            },
            "description": "Optional array of custom field values to set on the task. Each object must have an 'id' and 'value' property."
          },
          "time_estimate": {
            "type": "string",
            "description": "Time estimate for the task. For best compatibility with the ClickUp API, use a numeric value in minutes (e.g., '150' for 2h 30m)"
          },
          "markdown_description": {
            "type": "string",
            "description": "New markdown description. Takes precedence over plain text description."
          }
        }
      }
    },
    {
      "name": "move_task",
      "description": "Moves task to different list. Use taskId + (listId/listName) preferred, or taskName + sourceListName + (listId/listName). WARNING: Task statuses may reset if destination list has different status options.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "listId": {
            "type": "string",
            "description": "ID of destination list (preferred). Use this instead of listName if you have it."
          },
          "taskId": {
            "type": "string",
            "description": "ID of the task to move (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
          },
          "listName": {
            "type": "string",
            "description": "Name of destination list. Only use if you don't have listId."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to move. When using this, you MUST also provide sourceListName."
          },
          "sourceListName": {
            "type": "string",
            "description": "REQUIRED with taskName: Current list containing the task."
          }
        }
      }
    },
    {
      "name": "duplicate_task",
      "description": "Creates copy of task in same/different list. Use taskId + optional (listId/listName), or taskName + sourceListName + optional (listId/listName). Preserves original properties. Default: same list as original.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "listId": {
            "type": "string",
            "description": "ID of list for the duplicate (optional). Defaults to same list as original."
          },
          "taskId": {
            "type": "string",
            "description": "ID of task to duplicate (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
          },
          "listName": {
            "type": "string",
            "description": "Name of list for the duplicate. Only use if you don't have listId."
          },
          "taskName": {
            "type": "string",
            "description": "Name of task to duplicate. When using this, you MUST provide sourceListName."
          },
          "sourceListName": {
            "type": "string",
            "description": "REQUIRED with taskName: List containing the original task."
          }
        }
      }
    },
    {
      "name": "delete_task",
      "description": "PERMANENTLY deletes task. Use taskId (preferred/safest) or taskName + optional listName. WARNING: Cannot be undone. Using taskName without listName may match multiple tasks.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of task to delete (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
          },
          "listName": {
            "type": "string",
            "description": "Optional: Name of list containing the task. Providing this narrows the search to a specific list, improving performance and reducing ambiguity."
          },
          "taskName": {
            "type": "string",
            "description": "Name of task to delete. The tool will search for tasks with this name across all lists unless listName is specified."
          }
        }
      }
    },
    {
      "name": "get_task_comments",
      "description": "Gets task comments. Use taskId (preferred) or taskName + optional listName. Use start/startId params for pagination. Task names may not be unique across lists.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "start": {
            "type": "number",
            "description": "Timestamp (in milliseconds) to start retrieving comments from. Used for pagination."
          },
          "taskId": {
            "type": "string",
            "description": "ID of task to retrieve comments for (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
          },
          "startId": {
            "type": "string",
            "description": "Comment ID to start from. Used together with start for pagination."
          },
          "listName": {
            "type": "string",
            "description": "Name of list containing the task. Helps find the right task when using taskName."
          },
          "taskName": {
            "type": "string",
            "description": "Name of task to retrieve comments for. Warning: Task names may not be unique."
          }
        }
      }
    },
    {
      "name": "create_task_comment",
      "description": "Creates task comment. Use taskId (preferred) or taskName + listName. Required: commentText. Optional: notifyAll to notify assignees, assignee to assign comment.",
      "inputSchema": {
        "type": "object",
        "required": [
          "commentText"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of task to comment on (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
          },
          "assignee": {
            "type": "number",
            "description": "Optional user ID to assign the comment to."
          },
          "listName": {
            "type": "string",
            "description": "Name of list containing the task. REQUIRED when using taskName."
          },
          "taskName": {
            "type": "string",
            "description": "Name of task to comment on. When using this parameter, you MUST also provide listName."
          },
          "notifyAll": {
            "type": "boolean",
            "description": "Whether to notify all assignees. Default is false."
          },
          "commentText": {
            "type": "string",
            "description": "REQUIRED: Text content of the comment to create."
          }
        }
      }
    },
    {
      "name": "attach_task_file",
      "description": "Attaches file to task. Use taskId (preferred) or taskName + optional listName. File sources: 1) base64 + filename (≤10MB), 2) URL (http/https), 3) local path (absolute), 4) chunked for large files. WARNING: taskName without listName may match multiple tasks.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of the task to attach the file to. Works with both regular task IDs (9 characters) and custom IDs with uppercase prefixes (like 'DEV-1234')."
          },
          "file_url": {
            "type": "string",
            "description": "DUAL PURPOSE PARAMETER: Either (1) a web URL starting with http/https to download a file from, OR (2) an absolute local file path starting with / or drive letter. DO NOT use relative paths."
          },
          "listName": {
            "type": "string",
            "description": "Optional: Name of list containing the task. Providing this narrows the search to a specific list, improving performance and reducing ambiguity."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to attach the file to. The tool will search for tasks with this name across all lists unless listName is specified."
          },
          "file_data": {
            "type": "string",
            "description": "Base64-encoded content of the file (without the data URL prefix)."
          },
          "file_name": {
            "type": "string",
            "description": "Name of the file to be attached (include the extension). Required when using file_data."
          },
          "auth_header": {
            "type": "string",
            "description": "Optional authorization header to use when downloading from a web URL (ignored for local files)."
          },
          "chunk_index": {
            "type": "number",
            "description": "Optional: For advanced usage with large file chunking. The 0-based index of this chunk."
          },
          "chunk_total": {
            "type": "number",
            "description": "Optional: For advanced usage with large file chunking. Total number of chunks expected."
          },
          "chunk_is_last": {
            "type": "boolean",
            "description": "Optional: For advanced usage with large file chunking. Whether this is the final chunk."
          },
          "chunk_session": {
            "type": "string",
            "description": "Optional: For advanced usage with large file chunking. Session identifier from a previous chunk upload."
          }
        }
      }
    },
    {
      "name": "create_bulk_tasks",
      "description": "Creates multiple tasks in one list. Use listId (preferred) or listName + array of tasks (each needs name). Configure batch size/concurrency via options. Tasks can have custom fields as {id, value} array and assignees as array of user IDs, emails, or usernames.",
      "inputSchema": {
        "type": "object",
        "required": [
          "tasks"
        ],
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Task name with emoji prefix"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Optional array of tag names to assign to the task. The tags must already exist in the space."
                },
                "status": {
                  "type": "string",
                  "description": "Task status (uses list default if omitted)"
                },
                "dueDate": {
                  "type": "string",
                  "description": "Due date. Supports Unix timestamps (in milliseconds) and natural language expressions like '1 hour from now', 'tomorrow', 'next week', etc."
                },
                "priority": {
                  "type": "number",
                  "description": "Priority 1-4 (1=urgent, 4=low)"
                },
                "assignees": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "description": "Optional array of assignee user IDs (numbers), emails, or usernames to assign to the task."
                },
                "description": {
                  "type": "string",
                  "description": "Plain text description"
                },
                "custom_fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "value"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the custom field"
                      },
                      "value": {
                        "description": "Value for the custom field. Type depends on the field type."
                      }
                    }
                  },
                  "description": "Optional array of custom field values to set on the task."
                },
                "markdown_description": {
                  "type": "string",
                  "description": "Markdown description (overrides plain text)"
                }
              }
            },
            "description": "Array of tasks to create. Each task must have at least a name."
          },
          "listId": {
            "type": "string",
            "description": "ID of list for new tasks (preferred). Use this instead of listName if you have it."
          },
          "options": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "batchSize": {
                    "type": "number",
                    "description": "Tasks per batch (default: 10)"
                  },
                  "retryCount": {
                    "type": "number",
                    "description": "Retry attempts for failures"
                  },
                  "concurrency": {
                    "type": "number",
                    "description": "Parallel operations (default: 3)"
                  },
                  "continueOnError": {
                    "type": "boolean",
                    "description": "Continue if some tasks fail"
                  }
                },
                "description": "Optional processing settings"
              },
              {
                "type": "string",
                "description": "JSON string representing options. Will be parsed automatically."
              }
            ],
            "description": "Processing options (or JSON string representing options)"
          },
          "listName": {
            "type": "string",
            "description": "Name of list for new tasks. Only use if you don't have listId."
          }
        }
      }
    },
    {
      "name": "update_bulk_tasks",
      "description": "Updates multiple tasks efficiently. For each task: use taskId (preferred) or taskName + listName. At least one update field per task. Supports assignees as array of user IDs, emails, or usernames. Configure batch size/concurrency via options. WARNING: taskName without listName will fail.",
      "inputSchema": {
        "type": "object",
        "required": [
          "tasks"
        ],
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "New name with emoji prefix"
                },
                "status": {
                  "type": "string",
                  "description": "New status"
                },
                "taskId": {
                  "type": "string",
                  "description": "Task ID (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
                },
                "dueDate": {
                  "type": "string",
                  "description": "New due date. Supports Unix timestamps (in milliseconds) and natural language expressions like '1 hour from now', 'tomorrow', etc."
                },
                "listName": {
                  "type": "string",
                  "description": "REQUIRED with taskName: List containing the task."
                },
                "priority": {
                  "enum": [
                    "1",
                    "2",
                    "3",
                    "4",
                    null
                  ],
                  "type": "string",
                  "nullable": true,
                  "description": "New priority (1-4 or null)"
                },
                "taskName": {
                  "type": "string",
                  "description": "Task name. Requires listName when used."
                },
                "assignees": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "number"
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "description": "Optional array of assignee user IDs (numbers), emails, or usernames to assign to the task."
                },
                "description": {
                  "type": "string",
                  "description": "New plain text description"
                },
                "customTaskId": {
                  "type": "string",
                  "description": "Custom task ID (e.g., 'DEV-1234'). Only use if you want to explicitly force custom ID lookup. In most cases, use taskId which auto-detects ID format."
                },
                "custom_fields": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "value"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the custom field"
                      },
                      "value": {
                        "description": "Value for the custom field. Type depends on the field type."
                      }
                    }
                  },
                  "description": "Optional array of custom field values to set on the task."
                },
                "markdown_description": {
                  "type": "string",
                  "description": "New markdown description"
                }
              }
            },
            "description": "Array of tasks to update"
          },
          "options": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "batchSize": {
                    "type": "number",
                    "description": "Tasks per batch (default: 10)"
                  },
                  "retryCount": {
                    "type": "number",
                    "description": "Retry attempts for failures"
                  },
                  "concurrency": {
                    "type": "number",
                    "description": "Parallel operations (default: 3)"
                  },
                  "continueOnError": {
                    "type": "boolean",
                    "description": "Continue if some tasks fail"
                  }
                },
                "description": "Optional processing settings"
              },
              {
                "type": "string",
                "description": "JSON string representing options. Will be parsed automatically."
              }
            ],
            "description": "Processing options (or JSON string representing options)"
          }
        }
      }
    },
    {
      "name": "move_bulk_tasks",
      "description": "Moves multiple tasks to one list. For each task: use taskId (preferred) or taskName + listName. Target list: use targetListId/Name. Configure batch size/concurrency via options. WARNING: Task statuses may reset, taskName needs listName.",
      "inputSchema": {
        "type": "object",
        "required": [
          "tasks"
        ],
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "description": "Task ID (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
                },
                "listName": {
                  "type": "string",
                  "description": "REQUIRED with taskName: List containing the task."
                },
                "taskName": {
                  "type": "string",
                  "description": "Task name. Requires listName when used."
                },
                "customTaskId": {
                  "type": "string",
                  "description": "Custom task ID (e.g., 'DEV-1234'). Only use if you want to explicitly force custom ID lookup. In most cases, use taskId which auto-detects ID format."
                }
              }
            },
            "description": "Array of tasks to move"
          },
          "options": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "batchSize": {
                    "type": "number",
                    "description": "Tasks per batch (default: 10)"
                  },
                  "retryCount": {
                    "type": "number",
                    "description": "Retry attempts for failures"
                  },
                  "concurrency": {
                    "type": "number",
                    "description": "Parallel operations (default: 3)"
                  },
                  "continueOnError": {
                    "type": "boolean",
                    "description": "Continue if some tasks fail"
                  }
                },
                "description": "Optional processing settings"
              },
              {
                "type": "string",
                "description": "JSON string representing options. Will be parsed automatically."
              }
            ],
            "description": "Processing options (or JSON string representing options)"
          },
          "targetListId": {
            "type": "string",
            "description": "ID of destination list (preferred). Use instead of targetListName if available."
          },
          "targetListName": {
            "type": "string",
            "description": "Name of destination list. Only use if you don't have targetListId."
          }
        }
      }
    },
    {
      "name": "delete_bulk_tasks",
      "description": "PERMANENTLY deletes multiple tasks. For each task: use taskId (preferred/safest) or taskName + listName. Configure batch size/concurrency via options. WARNING: Cannot be undone, taskName without listName is dangerous.",
      "inputSchema": {
        "type": "object",
        "required": [
          "tasks"
        ],
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "description": "Task ID (preferred). Automatically detects and handles both regular task IDs (9 characters) and custom IDs (like 'DEV-1234', 'PROJ-456')."
                },
                "listName": {
                  "type": "string",
                  "description": "REQUIRED with taskName: List containing the task."
                },
                "taskName": {
                  "type": "string",
                  "description": "Task name. Requires listName when used."
                },
                "customTaskId": {
                  "type": "string",
                  "description": "Custom task ID (e.g., 'DEV-1234'). Only use if you want to explicitly force custom ID lookup. In most cases, use taskId which auto-detects ID format."
                }
              }
            },
            "description": "Array of tasks to delete"
          },
          "options": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "batchSize": {
                    "type": "number",
                    "description": "Tasks per batch (default: 10)"
                  },
                  "retryCount": {
                    "type": "number",
                    "description": "Retry attempts for failures"
                  },
                  "concurrency": {
                    "type": "number",
                    "description": "Parallel operations (default: 3)"
                  },
                  "continueOnError": {
                    "type": "boolean",
                    "description": "Continue if some tasks fail"
                  }
                },
                "description": "Optional processing settings"
              },
              {
                "type": "string",
                "description": "JSON string representing options. Will be parsed automatically."
              }
            ],
            "description": "Processing options (or JSON string representing options)"
          }
        }
      }
    },
    {
      "name": "get_workspace_tasks",
      "parameters": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Page number for pagination (0-based)."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by tag names. Only tasks with ALL specified tags will be returned."
          },
          "reverse": {
            "type": "boolean",
            "description": "Reverse sort order (descending)."
          },
          "archived": {
            "type": "boolean",
            "description": "Include archived tasks in the results."
          },
          "list_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by list IDs. Narrows the search to specific lists."
          },
          "order_by": {
            "enum": [
              "id",
              "created",
              "updated",
              "due_date"
            ],
            "type": "string",
            "description": "Sort field for ordering results."
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by status names (e.g., ['To Do', 'In Progress'])."
          },
          "subtasks": {
            "type": "boolean",
            "description": "Include subtasks in the response. Set to true to retrieve subtask details for all returned tasks. Note: subtasks must still match your other filter criteria to appear in results."
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by assignee IDs."
          },
          "space_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by space IDs. Narrows the search to specific spaces."
          },
          "folder_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by folder IDs. Narrows the search to specific folders."
          },
          "due_date_gt": {
            "type": "number",
            "description": "Filter for tasks with due date greater than this timestamp."
          },
          "due_date_lt": {
            "type": "number",
            "description": "Filter for tasks with due date less than this timestamp."
          },
          "detail_level": {
            "enum": [
              "summary",
              "detailed"
            ],
            "type": "string",
            "description": "Level of detail to return. Use summary for lightweight responses or detailed for full task data. If not specified, defaults to \"detailed\"."
          },
          "custom_fields": {
            "type": "object",
            "description": "Filter by custom field values. Provide as key-value pairs where keys are custom field IDs."
          },
          "include_closed": {
            "type": "boolean",
            "description": "Include closed tasks in the results."
          },
          "date_created_gt": {
            "type": "number",
            "description": "Filter for tasks created after this timestamp."
          },
          "date_created_lt": {
            "type": "number",
            "description": "Filter for tasks created before this timestamp."
          },
          "date_updated_gt": {
            "type": "number",
            "description": "Filter for tasks updated after this timestamp."
          },
          "date_updated_lt": {
            "type": "number",
            "description": "Filter for tasks updated before this timestamp."
          },
          "include_subtasks": {
            "type": "boolean",
            "description": "Alternative parameter for including subtasks (legacy support)."
          },
          "include_closed_lists": {
            "type": "boolean",
            "description": "Include tasks from closed lists."
          },
          "include_archived_lists": {
            "type": "boolean",
            "description": "Include tasks from archived lists."
          },
          "include_compact_time_entries": {
            "type": "boolean",
            "description": "Include compact time entry data in the response."
          }
        }
      },
      "description": "Purpose: Retrieve tasks from across the entire workspace with powerful filtering options, including tag-based filtering.\n\nValid Usage:\n1. Apply any combination of filters (tags, lists, folders, spaces, statuses, etc.)\n2. Use pagination to manage large result sets\n3. Include subtasks by setting subtasks=true\n\nRequirements:\n- At least one filter parameter is REQUIRED (tags, list_ids, folder_ids, space_ids, statuses, assignees, or date filters)\n- Pagination parameters (page, order_by, reverse) alone are not considered filters\n\nNotes:\n- Provides workspace-wide task access (unlike get_tasks which only searches in one list)\n- Returns complete task details including descriptions, assignees, custom fields, and all metadata\n- Tag filtering is especially useful for cross-list organization (e.g., \"project-x\", \"blocker\", \"needs-review\")\n- Combine multiple filters to narrow down your search scope\n- Use pagination for large result sets\n- Set subtasks=true to include subtask details in the response\n  IMPORTANT: subtasks=true enables subtasks to appear in results, but subtasks must still match your other filter criteria (tags, lists, etc.) to be returned. To see all subtasks of a specific task regardless of filters, use the get_task tool with subtasks=true instead.\n- Use the detail_level parameter to control the amount of data returned:\n  - \"summary\": Returns lightweight task data (name, status, list, tags)\n  - \"detailed\": Returns complete task data with all fields (DEFAULT if not specified)\n- Responses exceeding 50,000 tokens automatically switch to summary format to avoid hitting LLM token limits\n- **Enhanced List Filtering**: When list_ids are provided, the tool leverages ClickUp's Views API to include tasks that are *associated with* the specified lists, including tasks that have been added to multiple lists. This provides comprehensive coverage of all tasks related to your specified lists, not just tasks that were originally created in those lists.\n",
      "inputSchema": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Page number for pagination (0-based)."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by tag names. Only tasks with ALL specified tags will be returned."
          },
          "reverse": {
            "type": "boolean",
            "description": "Reverse sort order (descending)."
          },
          "archived": {
            "type": "boolean",
            "description": "Include archived tasks in the results."
          },
          "list_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by list IDs. Narrows the search to specific lists."
          },
          "order_by": {
            "enum": [
              "id",
              "created",
              "updated",
              "due_date"
            ],
            "type": "string",
            "description": "Sort field for ordering results."
          },
          "statuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by status names (e.g., ['To Do', 'In Progress'])."
          },
          "subtasks": {
            "type": "boolean",
            "description": "Include subtasks in the response. Set to true to retrieve subtask details for all returned tasks. Note: subtasks must still match your other filter criteria to appear in results."
          },
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by assignee IDs."
          },
          "space_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by space IDs. Narrows the search to specific spaces."
          },
          "folder_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter tasks by folder IDs. Narrows the search to specific folders."
          },
          "due_date_gt": {
            "type": "number",
            "description": "Filter for tasks with due date greater than this timestamp."
          },
          "due_date_lt": {
            "type": "number",
            "description": "Filter for tasks with due date less than this timestamp."
          },
          "detail_level": {
            "enum": [
              "summary",
              "detailed"
            ],
            "type": "string",
            "description": "Level of detail to return. Use summary for lightweight responses or detailed for full task data. If not specified, defaults to \"detailed\"."
          },
          "custom_fields": {
            "type": "object",
            "description": "Filter by custom field values. Provide as key-value pairs where keys are custom field IDs."
          },
          "include_closed": {
            "type": "boolean",
            "description": "Include closed tasks in the results."
          },
          "date_created_gt": {
            "type": "number",
            "description": "Filter for tasks created after this timestamp."
          },
          "date_created_lt": {
            "type": "number",
            "description": "Filter for tasks created before this timestamp."
          },
          "date_updated_gt": {
            "type": "number",
            "description": "Filter for tasks updated after this timestamp."
          },
          "date_updated_lt": {
            "type": "number",
            "description": "Filter for tasks updated before this timestamp."
          },
          "include_subtasks": {
            "type": "boolean",
            "description": "Alternative parameter for including subtasks (legacy support)."
          },
          "include_closed_lists": {
            "type": "boolean",
            "description": "Include tasks from closed lists."
          },
          "include_archived_lists": {
            "type": "boolean",
            "description": "Include tasks from archived lists."
          },
          "include_compact_time_entries": {
            "type": "boolean",
            "description": "Include compact time entry data in the response."
          }
        }
      }
    },
    {
      "name": "get_task_time_entries",
      "description": "Gets all time entries for a task with filtering options. Use taskId (preferred) or taskName + optional listName. Returns all tracked time with user info, descriptions, tags, start/end times, and durations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of the task to get time entries for. Works with both regular task IDs and custom IDs."
          },
          "endDate": {
            "type": "string",
            "description": "Optional end date filter. Supports Unix timestamps (in milliseconds) and natural language expressions."
          },
          "listName": {
            "type": "string",
            "description": "Name of the list containing the task. Helps find the right task when using taskName."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to get time entries for. When using this parameter, it's recommended to also provide listName."
          },
          "startDate": {
            "type": "string",
            "description": "Optional start date filter. Supports Unix timestamps (in milliseconds) and natural language expressions like 'yesterday', 'last week', etc."
          }
        }
      }
    },
    {
      "name": "start_time_tracking",
      "description": "Starts time tracking on a task. Use taskId (preferred) or taskName + optional listName. Optional fields: description, billable status, and tags. Only one timer can be running at a time.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of tag names to assign to the time entry."
          },
          "taskId": {
            "type": "string",
            "description": "ID of the task to start tracking time on. Works with both regular task IDs and custom IDs."
          },
          "billable": {
            "type": "boolean",
            "description": "Whether this time is billable. Default is workspace setting."
          },
          "listName": {
            "type": "string",
            "description": "Name of the list containing the task. Helps find the right task when using taskName."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to start tracking time on. When using this parameter, it's recommended to also provide listName."
          },
          "description": {
            "type": "string",
            "description": "Optional description for the time entry."
          }
        }
      }
    },
    {
      "name": "stop_time_tracking",
      "description": "Stops the currently running time tracker. Optional fields: description and tags. Returns the completed time entry details.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of tag names to assign to the time entry."
          },
          "description": {
            "type": "string",
            "description": "Optional description to update or add to the time entry."
          }
        }
      }
    },
    {
      "name": "add_time_entry",
      "description": "Adds a manual time entry to a task. Use taskId (preferred) or taskName + optional listName. Required: start time, duration. Optional: description, billable, tags.",
      "inputSchema": {
        "type": "object",
        "required": [
          "start",
          "duration"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of tag names to assign to the time entry."
          },
          "start": {
            "type": "string",
            "description": "Start time for the entry. Supports Unix timestamps (in milliseconds) and natural language expressions like '2 hours ago', 'yesterday 9am', etc."
          },
          "taskId": {
            "type": "string",
            "description": "ID of the task to add time entry to. Works with both regular task IDs and custom IDs."
          },
          "billable": {
            "type": "boolean",
            "description": "Whether this time is billable. Default is workspace setting."
          },
          "duration": {
            "type": "string",
            "description": "Duration of the time entry. Format as 'Xh Ym' (e.g., '1h 30m') or just minutes (e.g., '90m')."
          },
          "listName": {
            "type": "string",
            "description": "Name of the list containing the task. Helps find the right task when using taskName."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to add time entry to. When using this parameter, it's recommended to also provide listName."
          },
          "description": {
            "type": "string",
            "description": "Optional description for the time entry."
          }
        }
      }
    },
    {
      "name": "delete_time_entry",
      "description": "Deletes a time entry. Required: time entry ID.",
      "inputSchema": {
        "type": "object",
        "required": [
          "timeEntryId"
        ],
        "properties": {
          "timeEntryId": {
            "type": "string",
            "description": "ID of the time entry to delete."
          }
        }
      }
    },
    {
      "name": "get_current_time_entry",
      "description": "Gets the currently running time entry, if any. No parameters needed.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "create_list",
      "description": "Creates a list in a ClickUp space. Use spaceId (preferred) or spaceName + list name. Name is required. For lists in folders, use create_list_in_folder. Optional: content, dueDate, priority, assignee, status.",
      "inputSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the list"
          },
          "status": {
            "type": "string",
            "description": "Status of the list"
          },
          "content": {
            "type": "string",
            "description": "Description or content of the list"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date for the list (Unix timestamp in milliseconds)"
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space to create the list in. Use this instead of spaceName if you have the ID."
          },
          "assignee": {
            "type": "number",
            "description": "User ID to assign the list to"
          },
          "priority": {
            "type": "number",
            "description": "Priority level: 1 (urgent), 2 (high), 3 (normal), 4 (low)"
          },
          "spaceName": {
            "type": "string",
            "description": "Name of the space to create the list in. Alternative to spaceId - one of them MUST be provided."
          }
        }
      }
    },
    {
      "name": "create_list_in_folder",
      "description": "Creates a list in a ClickUp folder. Use folderId (preferred) or folderName + space info + list name. Name is required. When using folderName, spaceId/spaceName required as folder names may not be unique. Optional: content, status.",
      "inputSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the list"
          },
          "status": {
            "type": "string",
            "description": "Status of the list (uses folder default if not specified)"
          },
          "content": {
            "type": "string",
            "description": "Description or content of the list"
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space containing the folder. Required when using folderName instead of folderId."
          },
          "folderId": {
            "type": "string",
            "description": "ID of the folder to create the list in. If you have this, you don't need folderName or space information."
          },
          "spaceName": {
            "type": "string",
            "description": "Name of the space containing the folder. Required when using folderName instead of folderId."
          },
          "folderName": {
            "type": "string",
            "description": "Name of the folder to create the list in. When using this, you MUST also provide either spaceName or spaceId."
          }
        }
      }
    },
    {
      "name": "get_list",
      "description": "Gets details of a ClickUp list. Use listId (preferred) or listName. Returns list details including name, content, and space info. ListId more reliable as names may not be unique.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "listId": {
            "type": "string",
            "description": "ID of the list to retrieve. Use this instead of listName if you have the ID."
          },
          "listName": {
            "type": "string",
            "description": "Name of the list to retrieve. May be ambiguous if multiple lists have the same name."
          }
        }
      }
    },
    {
      "name": "update_list",
      "description": "Updates a ClickUp list. Use listId (preferred) or listName + at least one update field (name/content/status). ListId more reliable as names may not be unique. Only specified fields updated.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the list"
          },
          "listId": {
            "type": "string",
            "description": "ID of the list to update. Use this instead of listName if you have the ID."
          },
          "status": {
            "type": "string",
            "description": "New status for the list"
          },
          "content": {
            "type": "string",
            "description": "New description or content for the list"
          },
          "listName": {
            "type": "string",
            "description": "Name of the list to update. May be ambiguous if multiple lists have the same name."
          }
        }
      }
    },
    {
      "name": "delete_list",
      "description": "PERMANENTLY deletes a ClickUp list and all its tasks. Use listId (preferred/safest) or listName. WARNING: Cannot be undone, all tasks will be deleted, listName risky if not unique.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "listId": {
            "type": "string",
            "description": "ID of the list to delete. Use this instead of listName if you have the ID."
          },
          "listName": {
            "type": "string",
            "description": "Name of the list to delete. May be ambiguous if multiple lists have the same name."
          }
        }
      }
    },
    {
      "name": "create_folder",
      "description": "Creates folder in ClickUp space. Use spaceId (preferred) or spaceName + folder name. Optional: override_statuses for folder-specific statuses. Use create_list_in_folder to add lists after creation.",
      "inputSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the folder"
          },
          "spaceId": {
            "type": "string",
            "description": "ID of the space to create the folder in (preferred). Use this instead of spaceName if you have it."
          },
          "spaceName": {
            "type": "string",
            "description": "Name of the space to create the folder in. Only use if you don't have spaceId."
          },
          "override_statuses": {
            "type": "boolean",
            "description": "Whether to override space statuses with folder-specific statuses"
          }
        }
      }
    },
    {
      "name": "get_folder",
      "description": "Gets folder details. Use folderId (preferred) or folderName + (spaceId/spaceName). Helps understand folder structure before creating/updating lists.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "spaceId": {
            "type": "string",
            "description": "ID of space containing the folder (required with folderName). Use this instead of spaceName if you have it."
          },
          "folderId": {
            "type": "string",
            "description": "ID of folder to retrieve (preferred). Use this instead of folderName if you have it."
          },
          "spaceName": {
            "type": "string",
            "description": "Name of space containing the folder (required with folderName). Only use if you don't have spaceId."
          },
          "folderName": {
            "type": "string",
            "description": "Name of folder to retrieve. When using this, you MUST also provide spaceId or spaceName."
          }
        }
      }
    },
    {
      "name": "update_folder",
      "description": "Updates folder properties. Use folderId (preferred) or folderName + (spaceId/spaceName). At least one update field (name/override_statuses) required. Changes apply to all lists in folder.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the folder"
          },
          "spaceId": {
            "type": "string",
            "description": "ID of space containing the folder (required with folderName). Use this instead of spaceName if you have it."
          },
          "folderId": {
            "type": "string",
            "description": "ID of folder to update (preferred). Use this instead of folderName if you have it."
          },
          "spaceName": {
            "type": "string",
            "description": "Name of space containing the folder (required with folderName). Only use if you don't have spaceId."
          },
          "folderName": {
            "type": "string",
            "description": "Name of folder to update. When using this, you MUST also provide spaceId or spaceName."
          },
          "override_statuses": {
            "type": "boolean",
            "description": "Whether to override space statuses with folder-specific statuses"
          }
        }
      }
    },
    {
      "name": "delete_folder",
      "description": "PERMANENTLY deletes folder and all contents. Use folderId (preferred/safest) or folderName + (spaceId/spaceName). WARNING: Cannot be undone, all lists/tasks deleted, folderName risky if not unique.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "spaceId": {
            "type": "string",
            "description": "ID of space containing the folder (required with folderName). Use this instead of spaceName if you have it."
          },
          "folderId": {
            "type": "string",
            "description": "ID of folder to delete (preferred). Use this instead of folderName for safety."
          },
          "spaceName": {
            "type": "string",
            "description": "Name of space containing the folder (required with folderName). Only use if you don't have spaceId."
          },
          "folderName": {
            "type": "string",
            "description": "Name of folder to delete. When using this, you MUST also provide spaceId or spaceName."
          }
        }
      }
    },
    {
      "name": "get_space_tags",
      "description": "Gets all tags in a ClickUp space. Use spaceId (preferred) or spaceName. Tags are defined at space level - check available tags before adding to tasks.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "spaceId": {
            "type": "string",
            "description": "ID of the space to get tags from. Use this instead of spaceName if you have the ID."
          },
          "spaceName": {
            "type": "string",
            "description": "Name of the space to get tags from. Only use if you don't have spaceId."
          }
        }
      }
    },
    {
      "name": "add_tag_to_task",
      "description": "Adds existing tag to task. Use taskId (preferred) or taskName + optional listName. Tag must exist in space (use get_space_tags to verify, create_space_tag if needed). WARNING: Will fail if tag doesn't exist.",
      "inputSchema": {
        "type": "object",
        "required": [
          "tagName"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of the task to add tag to. Works with both regular task IDs (9 characters) and custom IDs with uppercase prefixes (like 'DEV-1234')."
          },
          "tagName": {
            "type": "string",
            "description": "Name of the tag to add to the task. The tag must already exist in the space."
          },
          "listName": {
            "type": "string",
            "description": "Optional: Name of the list containing the task. Use to disambiguate when multiple tasks have the same name."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to add tag to. Will search across all lists unless listName is provided."
          },
          "customTaskId": {
            "type": "string",
            "description": "Custom task ID (e.g., 'DEV-1234'). Only use if you want to explicitly force custom ID lookup. In most cases, use taskId which auto-detects ID format."
          }
        }
      }
    },
    {
      "name": "remove_tag_from_task",
      "description": "Removes tag from task. Use taskId (preferred) or taskName + optional listName. Only removes tag-task association, tag remains in space. For multiple tasks, provide listName to disambiguate.",
      "inputSchema": {
        "type": "object",
        "required": [
          "tagName"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "ID of the task to remove tag from. Works with both regular task IDs (9 characters) and custom IDs with uppercase prefixes (like 'DEV-1234')."
          },
          "tagName": {
            "type": "string",
            "description": "Name of the tag to remove from the task."
          },
          "listName": {
            "type": "string",
            "description": "Optional: Name of the list containing the task. Use to disambiguate when multiple tasks have the same name."
          },
          "taskName": {
            "type": "string",
            "description": "Name of the task to remove tag from. Will search across all lists unless listName is provided."
          },
          "customTaskId": {
            "type": "string",
            "description": "Custom task ID (e.g., 'DEV-1234'). Only use if you want to explicitly force custom ID lookup. In most cases, use taskId which auto-detects ID format."
          }
        }
      }
    },
    {
      "name": "get_workspace_members",
      "description": "Returns all members (users) in the ClickUp workspace/team. Useful for resolving assignees by name or email.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {}
      }
    },
    {
      "name": "find_member_by_name",
      "description": "Finds a member in the ClickUp workspace by name or email. Returns the member object if found, or null if not found.",
      "inputSchema": {
        "type": "object",
        "required": [
          "nameOrEmail"
        ],
        "properties": {
          "nameOrEmail": {
            "type": "string",
            "description": "The name or email of the member to find."
          }
        }
      }
    },
    {
      "name": "resolve_assignees",
      "description": "Resolves an array of assignee names or emails to ClickUp user IDs. Returns an array of user IDs, or errors for any that cannot be resolved.",
      "inputSchema": {
        "type": "object",
        "required": [
          "assignees"
        ],
        "properties": {
          "assignees": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of assignee names or emails to resolve."
          }
        }
      }
    },
    {
      "name": "create_document",
      "description": "Creates a document in a ClickUp space, folder, or list. Requires name, parent info, visibility and create_page flag.\n\nExample usage:\n- For list: parent: {\"id\": \"901407953112\", \"type\": 6}\n- For space: parent: {\"id\": \"90141392755\", \"type\": 4}\n- For folder: parent: {\"id\": \"90144231850\", \"type\": 5}\n\nNote: Document creation permissions may vary by ClickUp plan and parent container type.",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "parent",
          "visibility",
          "create_page"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name and Title of the document"
          },
          "parent": {
            "type": "object",
            "required": [
              "id",
              "type"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the parent container (space, folder, or list). Use actual ID from workspace hierarchy."
              },
              "type": {
                "enum": [
                  4,
                  5,
                  6,
                  7,
                  12
                ],
                "type": "number",
                "description": "Type of the parent container: 4=space, 5=folder, 6=list, 7=everything, 12=workspace. Most commonly use 6 for lists."
              }
            },
            "description": "Parent container object with id and type properties. Example: {\"id\": \"901407953112\", \"type\": 6}"
          },
          "visibility": {
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ],
            "type": "string",
            "description": "Document visibility setting"
          },
          "create_page": {
            "type": "boolean",
            "description": "Whether to create an initial blank page"
          }
        }
      }
    },
    {
      "name": "get_document",
      "description": "Gets details of a ClickUp document. Use documentId (preferred) or search by title in a container.",
      "inputSchema": {
        "type": "object",
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "description": "ID of the document to retrieve"
          }
        }
      }
    },
    {
      "name": "list_documents",
      "description": "Lists all documents in a ClickUp space, folder, or list.",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "string",
            "description": "Optional document ID to filter by"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of documents to return"
          },
          "creator": {
            "type": "number",
            "description": "Optional creator ID to filter by"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether to include deleted documents"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether to include archived documents"
          },
          "parent_id": {
            "type": "string",
            "description": "ID of the parent container to list documents from"
          },
          "next_cursor": {
            "type": "string",
            "description": "Cursor for pagination"
          },
          "parent_type": {
            "enum": [
              "TASK",
              "SPACE",
              "FOLDER",
              "LIST",
              "EVERYTHING",
              "WORKSPACE"
            ],
            "type": "string",
            "description": "Type of the parent container"
          }
        }
      }
    },
    {
      "name": "list_document_pages",
      "description": "Lists all pages in a document with optional depth control",
      "inputSchema": {
        "type": "object",
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "description": "ID of the document to list pages from"
          },
          "max_page_depth": {
            "type": "number",
            "description": "Maximum depth of pages to retrieve (-1 for unlimited)"
          }
        }
      }
    },
    {
      "name": "get_document_pages",
      "description": "Gets the content of specific pages from a document",
      "inputSchema": {
        "type": "object",
        "required": [
          "documentId",
          "pageIds"
        ],
        "properties": {
          "pageIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of page IDs to retrieve"
          },
          "documentId": {
            "type": "string",
            "description": "ID of the document to get pages from"
          },
          "content_format": {
            "enum": [
              "text/md",
              "text/html"
            ],
            "type": "string",
            "description": "Format of the content to retrieve"
          }
        }
      }
    },
    {
      "name": "create_document_page",
      "description": "Creates a new page in a ClickUp document",
      "inputSchema": {
        "type": "object",
        "required": [
          "documentId",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name and title of the page"
          },
          "content": {
            "type": "string",
            "description": "Content of the page"
          },
          "sub_title": {
            "type": "string",
            "description": "Subtitle of the page"
          },
          "documentId": {
            "type": "string",
            "description": "ID of the document to create the page in"
          },
          "parent_page_id": {
            "type": "string",
            "description": "ID of the parent page (if this is a sub-page)"
          }
        }
      }
    },
    {
      "name": "update_document_page",
      "description": "Updates an existing page in a ClickUp document. Supports updating name, subtitle, and content with different edit modes (replace/append/prepend).",
      "inputSchema": {
        "type": "object",
        "required": [
          "documentId",
          "pageId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the page"
          },
          "pageId": {
            "type": "string",
            "description": "ID of the page to update"
          },
          "content": {
            "type": "string",
            "description": "New content for the page"
          },
          "sub_title": {
            "type": "string",
            "description": "New subtitle for the page"
          },
          "documentId": {
            "type": "string",
            "description": "ID of the document containing the page"
          },
          "content_format": {
            "enum": [
              "text/md",
              "text/plain"
            ],
            "type": "string",
            "description": "Format of the content. Defaults to text/md"
          },
          "content_edit_mode": {
            "enum": [
              "replace",
              "append",
              "prepend"
            ],
            "type": "string",
            "description": "How to update the content. Defaults to replace"
          }
        }
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@skr-cloudify/clickup-mcp-cloudify/mcp",
      "configSchema": {
        "type": "object",
        "title": "MCP Session Configuration",
        "required": [
          "clickupApiKey",
          "clickupTeamId"
        ],
        "properties": {
          "clickupApiKey": {
            "type": "string",
            "description": "Your ClickUp API key"
          },
          "clickupTeamId": {
            "type": "string",
            "description": "Your ClickUp Team ID"
          }
        },
        "description": "Schema for the /mcp endpoint configuration",
        "x-query-style": "dot+bracket",
        "additionalProperties": false
      }
    }
  ]
}