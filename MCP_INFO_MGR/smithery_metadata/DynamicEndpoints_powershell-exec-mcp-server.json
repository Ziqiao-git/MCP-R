{
  "qualifiedName": "@DynamicEndpoints/powershell-exec-mcp-server",
  "displayName": "PowerShell Exec Server",
  "description": "Execute PowerShell commands securely with controlled timeouts and input validation. Retrieve system information, manage services, monitor processes, and generate scripts dynamically using templates. Benefit from built-in security features that block dangerous commands and ensure consistent JSON-formatted outputs for automation workflows.",
  "iconUrl": null,
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@DynamicEndpoints/powershell-exec-mcp-server",
  "security": null,
  "tools": [
    {
      "name": "run_powershell",
      "description": "Execute PowerShell commands securely.\n    \n    Args:\n        code: PowerShell code to execute\n        timeout: Command timeout in seconds (1-300, default 60)\n        ctx: MCP context for logging and progress reporting\n    \n    Returns:\n        Command output as string\n    ",
      "inputSchema": {
        "type": "object",
        "$defs": {
          "Context": {
            "type": "object",
            "title": "Context",
            "properties": {},
            "description": "Context object providing access to MCP capabilities.\n\nThis provides a cleaner interface to MCP's RequestContext functionality.\nIt gets injected into tool and resource functions that request it via type hints.\n\nTo use context in a tool function, add a parameter with the Context type annotation:\n\n```python\n@server.tool()\ndef my_tool(x: int, ctx: Context) -> str:\n    # Log messages to the client\n    ctx.info(f\"Processing {x}\")\n    ctx.debug(\"Debug info\")\n    ctx.warning(\"Warning message\")\n    ctx.error(\"Error message\")\n\n    # Report progress\n    ctx.report_progress(50, 100)\n\n    # Access resources\n    data = ctx.read_resource(\"resource://data\")\n\n    # Get request info\n    request_id = ctx.request_id\n    client_id = ctx.client_id\n\n    return str(x)\n```\n\nThe context parameter name can be anything as long as it's annotated with Context.\nThe context is optional - tools that don't need it can omit the parameter."
          }
        },
        "title": "run_powershellArguments",
        "required": [
          "code"
        ],
        "properties": {
          "ctx": {
            "anyOf": [
              {
                "$ref": "#/$defs/Context"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "run_powershellOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "get_system_info",
      "description": "Get system information.\n    \n    Args:\n        properties: List of ComputerInfo properties to retrieve (optional)\n        timeout: Command timeout in seconds (1-300, default 60)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "get_system_infoArguments",
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "properties": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "get_system_infoOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "get_running_services",
      "description": "Get information about running services.\n    \n    Args:\n        name: Filter services by name (supports wildcards)\n        status: Filter by status (Running, Stopped, etc.)\n        timeout: Command timeout in seconds (1-300, default 60)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "get_running_servicesArguments",
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "default": null
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status",
            "default": null
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "get_running_servicesOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "get_processes",
      "description": "Get information about running processes.\n    \n    Args:\n        name: Filter processes by name (supports wildcards)\n        top: Limit to top N processes\n        sort_by: Property to sort by (e.g., CPU, WorkingSet)\n        timeout: Command timeout in seconds (1-300, default 60)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "get_processesArguments",
        "properties": {
          "top": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top",
            "default": null
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "default": null
          },
          "sort_by": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sort By",
            "default": null
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "get_processesOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "get_event_logs",
      "description": "Get Windows event logs.\n    \n    Args:\n        logname: Name of the event log (System, Application, Security, etc.)\n        newest: Number of most recent events to retrieve (default 10)\n        level: Filter by event level (1: Critical, 2: Error, 3: Warning, 4: Information)\n        timeout: Command timeout in seconds (1-300, default 60)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "get_event_logsArguments",
        "required": [
          "logname"
        ],
        "properties": {
          "level": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "default": null
          },
          "newest": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Newest",
            "default": 10
          },
          "logname": {
            "type": "string",
            "title": "Logname"
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "get_event_logsOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "generate_script_from_template",
      "description": "Generate a PowerShell script from a template.\n    \n    Args:\n        template_name: Name of the template to use (without .ps1 extension)\n        parameters: Dictionary of parameters to replace in the template\n        output_path: Where to save the generated script (optional)\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Generated script content or path where script was saved\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_script_from_templateArguments",
        "required": [
          "template_name",
          "parameters"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "additionalProperties": true
          },
          "output_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Path",
            "default": null
          },
          "template_name": {
            "type": "string",
            "title": "Template Name"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_script_from_templateOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "generate_custom_script",
      "description": "Generate a custom PowerShell script based on description.\n    \n    Args:\n        description: Natural language description of what the script should do\n        script_type: Type of script to generate (file_ops, service_mgmt, etc.)\n        parameters: List of parameters the script should accept\n        include_logging: Whether to include logging functions\n        include_error_handling: Whether to include error handling\n        output_path: Where to save the generated script (optional)\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Generated script content or path where script was saved\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_custom_scriptArguments",
        "required": [
          "description",
          "script_type"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "parameters": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters",
            "default": null
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "output_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Path",
            "default": null
          },
          "script_type": {
            "type": "string",
            "title": "Script Type"
          },
          "include_logging": {
            "type": "boolean",
            "title": "Include Logging",
            "default": true
          },
          "include_error_handling": {
            "type": "boolean",
            "title": "Include Error Handling",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_custom_scriptOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "ensure_directory",
      "description": "Ensure directory exists and return absolute path.",
      "inputSchema": {
        "type": "object",
        "title": "ensure_directoryArguments",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "string",
            "title": "Path"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "ensure_directoryOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "generate_intune_remediation_script",
      "description": "Generate a Microsoft Intune remediation script with enterprise-grade features.\n    \n    Creates a PowerShell remediation script that follows Microsoft Intune best practices:\n    - Proper exit codes (0=success, 1=failure, 2=error)\n    - Event log integration for monitoring and troubleshooting\n    - System restore point creation before making changes\n    - Comprehensive error handling and logging\n    - No user interaction (required for Intune deployment)\n    \n    ⚠️  IMPORTANT: For complete Intune compliance, you need BOTH detection and remediation scripts.\n    Consider using 'generate_intune_script_pair' instead to create both scripts together.\n    \n    Microsoft References:\n    - Intune Remediation Scripts: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations\n    - Best Practices: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations-script-samples\n    - PowerShell Script Requirements: https://docs.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n    - Exit Code Standards: https://docs.microsoft.com/en-us/mem/intune/apps/troubleshoot-mam-app-installation#exit-codes\n    \n    Args:\n        description: Clear description of what the script should remediate (e.g., 'Install Chrome browser', 'Configure Windows firewall')\n        remediation_logic: PowerShell code that performs the remediation. Use 'Complete-Remediation -Success $true -Message \"description\"' to indicate completion\n        output_path: Optional file path where the script will be saved. If not provided, returns script content\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Generated script content or path where script was saved\n        \n    Example:\n        Generate a script to install Chrome:\n        ```\n        result = await generate_intune_remediation_script(\n            description=\"Install Chrome browser to latest version\",\n            remediation_logic='''\n            $installer = \"$env:TEMP\\ChromeSetup.exe\"\n            Invoke-WebRequest -Uri \"https://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $installer\n            Start-Process -FilePath $installer -Args \"/silent /install\" -Wait\n            Remove-Item $installer -Force\n            Complete-Remediation -Success $true -Message \"Chrome installation completed successfully\"\n            ''',\n            output_path=\"remediate_chrome.ps1\"\n        )\n        ```\n        \n    Tips:\n        - Always use Complete-Remediation function to set proper exit codes\n        - Test your remediation_logic in a safe environment first\n        - Consider creating a system restore point for major changes\n        - Use Write-IntuneLog for detailed logging and troubleshooting\n        - Ensure no user interaction is required (scripts run silently)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_intune_remediation_scriptArguments",
        "required": [
          "description",
          "remediation_logic"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "output_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Path",
            "default": null
          },
          "remediation_logic": {
            "type": "string",
            "title": "Remediation Logic"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_intune_remediation_scriptOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "generate_intune_script_pair",
      "description": "Generate a complete pair of Microsoft Intune detection and remediation scripts.\n    \n    This is the RECOMMENDED tool for Intune compliance as it creates both required scripts:\n    - Detection script: Checks current system state and determines compliance\n    - Remediation script: Fixes non-compliant conditions with proper safeguards\n    \n    Both scripts follow Microsoft Intune best practices:\n    - Proper exit codes (Detection: 0=compliant, 1=non-compliant, 2=error; Remediation: 0=success, 1=failure, 2=error)\n    - Event log integration for centralized monitoring\n    - System restore points before changes (remediation only)\n    - Comprehensive error handling and logging\n    - No user interaction (silent execution required)\n    \n    Microsoft References:\n    - Intune Remediation Scripts Overview: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations\n    - Script Deployment Best Practices: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations-script-samples\n    - PowerShell Requirements: https://docs.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n    - Exit Code Standards: https://docs.microsoft.com/en-us/mem/intune/apps/troubleshoot-mam-app-deployment\n    - Monitoring and Reporting: https://docs.microsoft.com/en-us/mem/intune/fundamentals/remediations-monitor\n    \n    Args:\n        description: Clear description of what the scripts should detect and remediate (e.g., 'Ensure Chrome browser is installed with latest version')\n        detection_logic: PowerShell code that performs the compliance check. Use 'Complete-Detection -Compliant $true/$false -Message \"status\"' to indicate result\n        remediation_logic: PowerShell code that fixes non-compliant conditions. Use 'Complete-Remediation -Success $true/$false -Message \"result\"' to indicate completion\n        output_dir: Optional directory to save both scripts. If not provided, returns script content in response\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Dictionary containing both scripts: {\"detection_script\": \"content/path\", \"remediation_script\": \"content/path\"}\n        \n    Example:\n        Generate scripts to manage Chrome browser installation:\n        ```\n        result = await generate_intune_script_pair(\n            description=\"Ensure Chrome browser is installed with version 100.0.0.0 or higher\",\n            detection_logic='''\n            try {\n                $app = Get-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe\" -ErrorAction Stop\n                $version = (Get-Item $app.'(Default)').VersionInfo.FileVersion\n                $compliant = [version]$version -ge [version]\"100.0.0.0\"\n                Complete-Detection -Compliant $compliant -Message \"Chrome version: $version (Required: 100.0.0.0+)\"\n            } catch {\n                Complete-Detection -Compliant $false -Message \"Chrome not found or inaccessible\"\n            }\n            ''',\n            remediation_logic='''\n            try {\n                $installer = \"$env:TEMP\\ChromeSetup.exe\"\n                Write-IntuneLog \"Downloading Chrome installer...\"\n                Invoke-WebRequest -Uri \"https://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $installer -UseBasicParsing\n                Write-IntuneLog \"Installing Chrome silently...\"\n                Start-Process -FilePath $installer -Args \"/silent /install\" -Wait\n                Remove-Item $installer -Force\n                Complete-Remediation -Success $true -Message \"Chrome installation completed successfully\"\n            } catch {\n                Complete-Remediation -Success $false -Message \"Chrome installation failed: $($_.Exception.Message)\"\n            }\n            ''',\n            output_dir=\"chrome_intune_scripts\"\n        )\n        ```\n        \n    Tips:\n        - Always test both scripts in a controlled environment first\n        - Use descriptive logging messages for easier troubleshooting\n        - Consider the impact of remediation actions (e.g., system restarts, user disruption)\n        - Use Write-IntuneLog for detailed progress tracking\n        - Ensure detection logic is fast and efficient (runs frequently)\n        - Make remediation logic idempotent (safe to run multiple times)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_intune_script_pairArguments",
        "required": [
          "description",
          "detection_logic",
          "remediation_logic"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "output_dir": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Dir",
            "default": null
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "detection_logic": {
            "type": "string",
            "title": "Detection Logic"
          },
          "remediation_logic": {
            "type": "string",
            "title": "Remediation Logic"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_intune_script_pairOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "title": "Result",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "generate_bigfix_relevance_script",
      "description": "Generate a BigFix relevance script to determine if computers need action.\n    \n    Creates a PowerShell relevance script that follows IBM BigFix best practices:\n    - Proper output format (TRUE/FALSE for BigFix consumption)\n    - BigFix client log integration for monitoring\n    - Event log integration for troubleshooting\n    - Comprehensive error handling and logging\n    - Fast execution optimized for frequent evaluations\n    \n    💡 TIP: For complete BigFix deployments, you need BOTH relevance and action scripts.\n    Consider using 'generate_bigfix_script_pair' to create both scripts together with matching logic.\n    \n    IBM BigFix References:\n    - Relevance Language Guide: https://help.hcltechsw.com/bigfix/11.0/relevance/Relevance/c_relevance_language.html\n    - Action Scripts: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_action_scripts.html\n    - Best Practices: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_best_practices_for_creating_fixlets.html\n    - Client Logging: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Installation/c_bes_client_logging.html\n    \n    Args:\n        description: Clear description of what the script should check (e.g., 'Check if Chrome needs updating', 'Verify Windows patches are current')\n        relevance_logic: PowerShell code that determines relevance. Use 'Complete-Relevance -Relevant $true/$false -Message \"status\"' to indicate result\n        output_path: Optional file path where the script will be saved. If not provided, returns script content\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Generated script content or path where script was saved\n        \n    Example:\n        Generate a script to check if Chrome needs updating:\n        ```\n        result = await generate_bigfix_relevance_script(\n            description=\"Check if Chrome browser needs updating to version 100.0.0.0 or higher\",\n            relevance_logic=''',\n            try {\n                $app = Get-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe\" -ErrorAction Stop\n                $version = (Get-Item $app.'(Default)').VersionInfo.FileVersion\n                $needsUpdate = [version]$version -lt [version]\"100.0.0.0\"\n                Complete-Relevance -Relevant $needsUpdate -Message \"Chrome version: $version (Target: 100.0.0.0+)\"\n            } catch {\n                Complete-Relevance -Relevant $true -Message \"Chrome not found or inaccessible - installation needed\"\n            }\n            ''',\n            output_path=\"chrome_relevance.ps1\"\n        )\n        ```\n        \n    Tips:\n        - Keep relevance logic fast and efficient (evaluated frequently)\n        - Return TRUE when action is needed, FALSE when compliant\n        - Always use Complete-Relevance function for proper BigFix output format\n        - Use try-catch blocks for robust error handling\n        - Test relevance logic thoroughly across different environments\n        - Use Write-BigFixLog for detailed progress tracking\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_bigfix_relevance_scriptArguments",
        "required": [
          "description",
          "relevance_logic"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "output_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Path",
            "default": null
          },
          "relevance_logic": {
            "type": "string",
            "title": "Relevance Logic"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_bigfix_relevance_scriptOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "generate_bigfix_action_script",
      "description": "Generate a BigFix action script to perform remediation or configuration changes.\n    \n    Creates a PowerShell action script that follows IBM BigFix best practices:\n    - Proper exit codes (0=success, 1=retryable failure, 2=non-retryable failure)\n    - BigFix client log integration for monitoring\n    - System restore point creation before changes\n    - Comprehensive error handling and logging\n    - Event log integration for troubleshooting\n    \n    ⚠️ IMPORTANT: For complete BigFix deployments, you need BOTH relevance and action scripts.\n    Consider using 'generate_bigfix_script_pair' instead to create both scripts together.\n    \n    IBM BigFix References:\n    - Action Scripts: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_action_scripts.html\n    - Exit Codes: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_action_script_exit_codes.html\n    - Best Practices: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_best_practices_for_creating_fixlets.html\n    - Client Logging: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Installation/c_bes_client_logging.html\n    \n    Args:\n        description: Clear description of what the script should accomplish (e.g., 'Install Chrome browser', 'Configure Windows firewall')\n        action_logic: PowerShell code that performs the action. Use 'Complete-Action -Result \"Success/RetryableFailure/NonRetryableFailure\" -Message \"details\"' to indicate completion\n        output_path: Optional file path where the script will be saved. If not provided, returns script content\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Generated script content or path where script was saved\n        \n    Example:\n        Generate a script to install Chrome:\n        ```\n        result = await generate_bigfix_action_script(\n            description=\"Install Chrome browser to latest version\",\n            action_logic='''\n            try {\n                $installer = \"$env:TEMP\\ChromeSetup.exe\"\n                Write-BigFixLog \"Downloading Chrome installer...\"\n                Invoke-WebRequest -Uri \"https://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $installer -UseBasicParsing\n                Write-BigFixLog \"Installing Chrome silently...\"\n                Start-Process -FilePath $installer -Args \"/silent /install\" -Wait\n                Remove-Item $installer -Force\n                Complete-Action -Result \"Success\" -Message \"Chrome installation completed successfully\"\n            } catch {\n                Complete-Action -Result \"RetryableFailure\" -Message \"Chrome installation failed: $($_.Exception.Message)\"\n            }\n            ''',\n            output_path=\"chrome_action.ps1\"\n        )\n        ```\n        \n    Tips:\n        - Always use Complete-Action function to set proper exit codes\n        - Use \"Success\" for completed actions\n        - Use \"RetryableFailure\" for temporary issues (network, locks, etc.)\n        - Use \"NonRetryableFailure\" for permanent issues (unsupported OS, etc.)\n        - Test action logic in safe environments first\n        - Consider creating system restore points for major changes\n        - Use Write-BigFixLog for detailed logging and troubleshooting\n        - Make actions idempotent (safe to run multiple times)\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_bigfix_action_scriptArguments",
        "required": [
          "description",
          "action_logic"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "output_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Path",
            "default": null
          },
          "action_logic": {
            "type": "string",
            "title": "Action Logic"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_bigfix_action_scriptOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    },
    {
      "name": "generate_bigfix_script_pair",
      "description": "Generate a complete pair of BigFix relevance and action scripts for deployment.\n    \n    This is the RECOMMENDED tool for BigFix fixlet creation as it creates both required scripts:\n    - Relevance script: Determines which computers need the action (TRUE/FALSE output)\n    - Action script: Performs the necessary changes with proper error handling\n    \n    Both scripts follow IBM BigFix best practices:\n    - Proper BigFix output formats and exit codes\n    - BigFix client log integration for centralized monitoring\n    - System restore points before changes (action only)\n    - Comprehensive error handling and logging\n    - Event log integration for troubleshooting\n    - No user interaction (silent execution required)\n    \n    IBM BigFix References:\n    - Fixlet Development: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_fixlets.html\n    - Relevance Language: https://help.hcltechsw.com/bigfix/11.0/relevance/Relevance/c_relevance_language.html\n    - Action Scripts: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_creating_action_scripts.html\n    - Best Practices: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_best_practices_for_creating_fixlets.html\n    - Testing Guidelines: https://help.hcltechsw.com/bigfix/11.0/platform/Platform/Console/c_testing_fixlets.html\n    \n    Args:\n        description: Clear description of what the scripts should accomplish (e.g., 'Manage Chrome browser installation and updates')\n        relevance_logic: PowerShell code that determines if action is needed. Use 'Complete-Relevance -Relevant $true/$false -Message \"status\"' to indicate result\n        action_logic: PowerShell code that performs the remediation. Use 'Complete-Action -Result \"Success/RetryableFailure/NonRetryableFailure\" -Message \"details\"' to indicate completion\n        output_dir: Optional directory to save both scripts. If not provided, returns script content in response\n        timeout: Command timeout in seconds (1-300, default 60)\n        \n    Returns:\n        Dictionary containing both scripts: {\"relevance_script\": \"content/path\", \"action_script\": \"content/path\"}\n        \n    Example:\n        Generate scripts to manage Chrome browser installation:\n        ```\n        result = await generate_bigfix_script_pair(\n            description=\"Manage Chrome browser installation with version 100.0.0.0 or higher\",\n            relevance_logic=''',\n            try {\n                $app = Get-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe\" -ErrorAction Stop\n                $version = (Get-Item $app.'(Default)').VersionInfo.FileVersion\n                $needsAction = [version]$version -lt [version]\"100.0.0.0\"\n                Complete-Relevance -Relevant $needsAction -Message \"Chrome version: $version (Target: 100.0.0.0+)\"\n            } catch {\n                Complete-Relevance -Relevant $true -Message \"Chrome not found - installation needed\"\n            }\n            ''',\n            action_logic=''',\n            try {\n                $installer = \"$env:TEMP\\ChromeSetup.exe\"\n                Write-BigFixLog \"Downloading Chrome installer...\"\n                Invoke-WebRequest -Uri \"https://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $installer -UseBasicParsing\n                Write-BigFixLog \"Installing Chrome silently...\"\n                Start-Process -FilePath $installer -Args \"/silent /install\" -Wait\n                Remove-Item $installer -Force\n                Complete-Action -Result \"Success\" -Message \"Chrome installation completed successfully\"\n            } catch {\n                Complete-Action -Result \"RetryableFailure\" -Message \"Chrome installation failed: $($_.Exception.Message)\"\n            }\n            ''',\n            output_dir=\"chrome_bigfix_scripts\"\n        )\n        ```\n        \n    Tips:\n        - Always test both scripts in a controlled environment first\n        - Ensure relevance logic matches the conditions that action script addresses\n        - Use descriptive logging messages for easier troubleshooting\n        - Consider the scope and impact of actions (test groups first)\n        - Make sure relevance logic is efficient (evaluated frequently)\n        - Ensure action logic is idempotent (safe to run multiple times)\n        - Use Write-BigFixLog for detailed progress tracking\n        - Test across different OS versions and configurations\n    ",
      "inputSchema": {
        "type": "object",
        "title": "generate_bigfix_script_pairArguments",
        "required": [
          "description",
          "relevance_logic",
          "action_logic"
        ],
        "properties": {
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          },
          "output_dir": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Dir",
            "default": null
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "action_logic": {
            "type": "string",
            "title": "Action Logic"
          },
          "relevance_logic": {
            "type": "string",
            "title": "Relevance Logic"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "generate_bigfix_script_pairOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "object",
            "title": "Result",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "name": "run_powershell_with_progress",
      "description": "Execute PowerShell commands with detailed progress reporting.\n    \n    Args:\n        code: PowerShell code to execute\n        timeout: Command timeout in seconds (1-300, default 60)\n        ctx: MCP context for logging and progress reporting\n    \n    Returns:\n        Command output as string with execution details\n    ",
      "inputSchema": {
        "type": "object",
        "$defs": {
          "Context": {
            "type": "object",
            "title": "Context",
            "properties": {},
            "description": "Context object providing access to MCP capabilities.\n\nThis provides a cleaner interface to MCP's RequestContext functionality.\nIt gets injected into tool and resource functions that request it via type hints.\n\nTo use context in a tool function, add a parameter with the Context type annotation:\n\n```python\n@server.tool()\ndef my_tool(x: int, ctx: Context) -> str:\n    # Log messages to the client\n    ctx.info(f\"Processing {x}\")\n    ctx.debug(\"Debug info\")\n    ctx.warning(\"Warning message\")\n    ctx.error(\"Error message\")\n\n    # Report progress\n    ctx.report_progress(50, 100)\n\n    # Access resources\n    data = ctx.read_resource(\"resource://data\")\n\n    # Get request info\n    request_id = ctx.request_id\n    client_id = ctx.client_id\n\n    return str(x)\n```\n\nThe context parameter name can be anything as long as it's annotated with Context.\nThe context is optional - tools that don't need it can omit the parameter."
          }
        },
        "title": "run_powershell_with_progressArguments",
        "required": [
          "code"
        ],
        "properties": {
          "ctx": {
            "anyOf": [
              {
                "$ref": "#/$defs/Context"
              },
              {
                "type": "null"
              }
            ],
            "default": null
          },
          "code": {
            "type": "string",
            "title": "Code"
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "default": 60
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "run_powershell_with_progressOutput",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        }
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@DynamicEndpoints/powershell-exec-mcp-server/mcp",
      "configSchema": {
        "type": "object",
        "default": {},
        "description": "No configuration required for this PowerShell MCP server"
      }
    }
  ]
}