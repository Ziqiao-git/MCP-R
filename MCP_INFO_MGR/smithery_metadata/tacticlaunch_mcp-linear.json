{
  "qualifiedName": "@tacticlaunch/mcp-linear",
  "displayName": "Linear",
  "description": "Interact with Linear project management through AI assistants. Access and manage your Linear projects, issues, and teams seamlessly with AI-driven commands. Enhance your productivity by automating project management tasks effortlessly.",
  "iconUrl": "https://icons.duckduckgo.com/ip3/linear.app.ico",
  "remote": false,
  "deploymentUrl": null,
  "security": {
    "scanPassed": true
  },
  "tools": [
    {
      "name": "linear_getViewer",
      "description": "Get information about the currently authenticated user",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "linear_getOrganization",
      "description": "Get information about the current Linear organization",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "linear_getUsers",
      "description": "Get a list of users in the Linear organization",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "linear_getLabels",
      "description": "Get a list of issue labels from Linear",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "linear_getTeams",
      "description": "Get a list of teams from Linear",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "linear_getWorkflowStates",
      "description": "Get workflow states for a team",
      "inputSchema": {
        "type": "object",
        "required": [
          "teamId"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "description": "ID of the team to get workflow states for"
          },
          "includeArchived": {
            "type": "boolean",
            "description": "Whether to include archived states (default: false)"
          }
        }
      }
    },
    {
      "name": "linear_getProjects",
      "description": "Get a list of projects from Linear",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "linear_createProject",
      "description": "Create a new project in Linear",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "teamIds"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the project"
          },
          "state": {
            "type": "string",
            "description": "Initial state of the project (e.g., 'planned', 'started', 'paused', 'completed', 'canceled')"
          },
          "content": {
            "type": "string",
            "description": "Content of the project (Markdown supported)"
          },
          "teamIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of the teams this project belongs to"
          },
          "description": {
            "type": "string",
            "description": "Short summary of the project"
          }
        }
      }
    },
    {
      "name": "linear_updateProject",
      "description": "Update an existing project in Linear",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the project to update"
          },
          "name": {
            "type": "string",
            "description": "New name of the project"
          },
          "state": {
            "type": "string",
            "description": "New state of the project (e.g., 'planned', 'started', 'paused', 'completed', 'canceled')"
          },
          "content": {
            "type": "string",
            "description": "New content of the project (Markdown supported)"
          },
          "description": {
            "type": "string",
            "description": "New short summary of the project"
          }
        }
      }
    },
    {
      "name": "linear_addIssueToProject",
      "description": "Add an existing issue to a project",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "projectId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to add to the project"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project to add the issue to"
          }
        }
      }
    },
    {
      "name": "linear_getProjectIssues",
      "description": "Get all issues associated with a project",
      "inputSchema": {
        "type": "object",
        "required": [
          "projectId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of issues to return (default: 25)"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project to get issues for"
          }
        }
      }
    },
    {
      "name": "linear_getCycles",
      "description": "Get a list of all cycles",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of cycles to return (default: 25)"
          },
          "teamId": {
            "type": "string",
            "description": "ID of the team to get cycles for (optional)"
          }
        }
      }
    },
    {
      "name": "linear_getActiveCycle",
      "description": "Get the currently active cycle for a team",
      "inputSchema": {
        "type": "object",
        "required": [
          "teamId"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "description": "ID of the team to get the active cycle for"
          }
        }
      }
    },
    {
      "name": "linear_addIssueToCycle",
      "description": "Add an issue to a cycle",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "cycleId"
        ],
        "properties": {
          "cycleId": {
            "type": "string",
            "description": "ID of the cycle to add the issue to"
          },
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to add to the cycle"
          }
        }
      }
    },
    {
      "name": "linear_getInitiatives",
      "description": "Get a list of all initiatives from Linear",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 50,
            "description": "Maximum number of initiatives to return"
          },
          "includeArchived": {
            "type": "boolean",
            "default": false,
            "description": "Include archived initiatives in the results"
          }
        }
      }
    },
    {
      "name": "linear_getInitiativeById",
      "description": "Get details of a specific initiative by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId"
        ],
        "properties": {
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative to retrieve"
          },
          "includeProjects": {
            "type": "boolean",
            "default": true,
            "description": "Include associated projects in the response"
          }
        }
      }
    },
    {
      "name": "linear_createInitiative",
      "description": "Create a new initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "icon": {
            "type": "string",
            "description": "Icon emoji for the initiative"
          },
          "name": {
            "type": "string",
            "description": "Name of the initiative"
          },
          "color": {
            "type": "string",
            "description": "Color of the initiative in hex format"
          },
          "status": {
            "enum": [
              "notStarted",
              "inProgress",
              "completed",
              "paused"
            ],
            "type": "string",
            "description": "Status of the initiative"
          },
          "content": {
            "type": "string",
            "description": "Content in markdown format"
          },
          "ownerId": {
            "type": "string",
            "description": "ID of the user who owns the initiative"
          },
          "targetDate": {
            "type": "string",
            "description": "Target completion date (ISO 8601 format)"
          },
          "description": {
            "type": "string",
            "description": "Description of the initiative"
          }
        }
      }
    },
    {
      "name": "linear_updateInitiative",
      "description": "Update an existing initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId"
        ],
        "properties": {
          "icon": {
            "type": "string",
            "description": "Updated icon emoji"
          },
          "name": {
            "type": "string",
            "description": "Updated name of the initiative"
          },
          "color": {
            "type": "string",
            "description": "Updated color in hex format"
          },
          "status": {
            "enum": [
              "notStarted",
              "inProgress",
              "completed",
              "paused"
            ],
            "type": "string",
            "description": "Updated status of the initiative"
          },
          "content": {
            "type": "string",
            "description": "Updated content in markdown format"
          },
          "ownerId": {
            "type": "string",
            "description": "Updated owner ID"
          },
          "targetDate": {
            "type": "string",
            "description": "Updated target completion date (ISO 8601 format)"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the initiative"
          },
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative to update"
          }
        }
      }
    },
    {
      "name": "linear_archiveInitiative",
      "description": "Archive an initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId"
        ],
        "properties": {
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative to archive"
          }
        }
      }
    },
    {
      "name": "linear_unarchiveInitiative",
      "description": "Unarchive an initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId"
        ],
        "properties": {
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative to unarchive"
          }
        }
      }
    },
    {
      "name": "linear_deleteInitiative",
      "description": "Delete an initiative (move to trash)",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId"
        ],
        "properties": {
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative to delete"
          }
        }
      }
    },
    {
      "name": "linear_getInitiativeProjects",
      "description": "Get all projects associated with an initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId"
        ],
        "properties": {
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative"
          },
          "includeArchived": {
            "type": "boolean",
            "default": false,
            "description": "Include archived projects in the results"
          }
        }
      }
    },
    {
      "name": "linear_addProjectToInitiative",
      "description": "Add a project to an initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId",
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project to add"
          },
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative"
          }
        }
      }
    },
    {
      "name": "linear_removeProjectFromInitiative",
      "description": "Remove a project from an initiative",
      "inputSchema": {
        "type": "object",
        "required": [
          "initiativeId",
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The ID of the project to remove"
          },
          "initiativeId": {
            "type": "string",
            "description": "The ID of the initiative"
          }
        }
      }
    },
    {
      "name": "linear_getIssues",
      "description": "Get a list of recent issues from Linear",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of issues to return (default: 10)"
          }
        }
      }
    },
    {
      "name": "linear_getIssueById",
      "description": "Get a specific issue by ID or identifier (e.g., ABC-123)",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID or identifier of the issue (e.g., ABC-123)"
          }
        }
      }
    },
    {
      "name": "linear_searchIssues",
      "description": "Search for issues with various filters",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of issues to return (default: 10)"
          },
          "query": {
            "type": "string",
            "description": "Text to search for in issue title or description"
          },
          "states": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter issues by state name (e.g., 'Todo', 'In Progress', 'Done')"
          },
          "teamId": {
            "type": "string",
            "description": "Filter issues by team ID"
          },
          "projectId": {
            "type": "string",
            "description": "Filter issues by project ID"
          },
          "assigneeId": {
            "type": "string",
            "description": "Filter issues by assignee ID"
          }
        }
      }
    },
    {
      "name": "linear_createIssue",
      "description": "Create a new issue in Linear",
      "inputSchema": {
        "type": "object",
        "required": [
          "title",
          "teamId"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the issue"
          },
          "teamId": {
            "type": "string",
            "description": "ID of the team the issue belongs to"
          },
          "cycleId": {
            "type": "string",
            "description": "ID of the cycle to add the issue to"
          },
          "dueDate": {
            "type": "string",
            "description": "The date at which the issue is due (YYYY-MM-DD format)"
          },
          "stateId": {
            "type": "string",
            "description": "ID of the workflow state for the issue"
          },
          "estimate": {
            "type": "number",
            "description": "The estimated complexity/points for the issue"
          },
          "labelIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of the labels to attach to the issue"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent issue (to create as a sub-task)"
          },
          "priority": {
            "type": "number",
            "description": "Priority of the issue (0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low)"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project the issue belongs to"
          },
          "sortOrder": {
            "type": "number",
            "description": "The position of the issue in relation to other issues"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user to assign the issue to"
          },
          "templateId": {
            "type": "string",
            "description": "ID of a template to use for creating the issue"
          },
          "description": {
            "type": "string",
            "description": "Description of the issue (Markdown supported)"
          },
          "subscriberIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of the users to subscribe to the issue"
          }
        }
      }
    },
    {
      "name": "linear_updateIssue",
      "description": "Update an existing issue in Linear",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID or identifier of the issue to update (e.g., ABC-123)"
          },
          "title": {
            "type": "string",
            "description": "New title for the issue"
          },
          "teamId": {
            "type": "string",
            "description": "ID of the team to move the issue to"
          },
          "cycleId": {
            "type": "string",
            "description": "ID of the cycle to move the issue to, or null to remove from current cycle"
          },
          "dueDate": {
            "type": "string",
            "description": "The new due date for the issue (YYYY-MM-DD format), or null to remove"
          },
          "stateId": {
            "type": "string",
            "description": "ID of the new state for the issue"
          },
          "estimate": {
            "type": "number",
            "description": "The estimated complexity/points for the issue"
          },
          "labelIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of the labels to set on the issue (replacing existing labels)"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent issue, or null to convert to a regular issue"
          },
          "priority": {
            "type": "number",
            "description": "New priority for the issue (0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low)"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the project to move the issue to"
          },
          "sortOrder": {
            "type": "number",
            "description": "The position of the issue in relation to other issues"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user to assign the issue to, or null to unassign"
          },
          "description": {
            "type": "string",
            "description": "New description for the issue (Markdown supported)"
          },
          "addedLabelIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of labels to add to the issue (without removing existing ones)"
          },
          "subscriberIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of the users to subscribe to the issue (replacing existing subscribers)"
          },
          "removedLabelIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "IDs of labels to remove from the issue"
          }
        }
      }
    },
    {
      "name": "linear_createComment",
      "description": "Add a comment to an issue in Linear (supports threaded replies)",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Text of the comment (Markdown supported)"
          },
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to comment on (e.g., ABC-123)"
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent comment to reply to (for threaded comments)"
          }
        }
      }
    },
    {
      "name": "linear_addIssueLabel",
      "description": "Add a label to an issue in Linear",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "labelId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to add the label to (e.g., ABC-123)"
          },
          "labelId": {
            "type": "string",
            "description": "ID of the label to add to the issue"
          }
        }
      }
    },
    {
      "name": "linear_removeIssueLabel",
      "description": "Remove a label from an issue in Linear",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "labelId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to remove the label from (e.g., ABC-123)"
          },
          "labelId": {
            "type": "string",
            "description": "ID of the label to remove from the issue"
          }
        }
      }
    },
    {
      "name": "linear_assignIssue",
      "description": "Assign an issue to a user",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "assigneeId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to assign (e.g., ABC-123)"
          },
          "assigneeId": {
            "type": "string",
            "description": "ID of the user to assign the issue to, or null to unassign"
          }
        }
      }
    },
    {
      "name": "linear_subscribeToIssue",
      "description": "Subscribe to issue updates",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to subscribe to (e.g., ABC-123)"
          }
        }
      }
    },
    {
      "name": "linear_convertIssueToSubtask",
      "description": "Convert an issue to a subtask",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "parentIssueId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to convert (e.g., ABC-123)"
          },
          "parentIssueId": {
            "type": "string",
            "description": "ID or identifier of the parent issue (e.g., ABC-456)"
          }
        }
      }
    },
    {
      "name": "linear_createIssueRelation",
      "description": "Create relations between issues (blocks, is blocked by, etc.)",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "relatedIssueId",
          "type"
        ],
        "properties": {
          "type": {
            "enum": [
              "blocks",
              "blocked_by",
              "related",
              "duplicate",
              "duplicate_of"
            ],
            "type": "string",
            "description": "Type of relation: 'blocks', 'blocked_by', 'related', 'duplicate', 'duplicate_of'"
          },
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the first issue (e.g., ABC-123)"
          },
          "relatedIssueId": {
            "type": "string",
            "description": "ID or identifier of the second issue (e.g., ABC-456)"
          }
        }
      }
    },
    {
      "name": "linear_archiveIssue",
      "description": "Archive an issue",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to archive (e.g., ABC-123)"
          }
        }
      }
    },
    {
      "name": "linear_setIssuePriority",
      "description": "Set the priority of an issue",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "priority"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue (e.g., ABC-123)"
          },
          "priority": {
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "type": "number",
            "description": "Priority level (0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low)"
          }
        }
      }
    },
    {
      "name": "linear_transferIssue",
      "description": "Transfer an issue to another team",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId",
          "teamId"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "description": "ID of the team to transfer the issue to"
          },
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to transfer (e.g., ABC-123)"
          }
        }
      }
    },
    {
      "name": "linear_duplicateIssue",
      "description": "Duplicate an issue",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId"
        ],
        "properties": {
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to duplicate (e.g., ABC-123)"
          }
        }
      }
    },
    {
      "name": "linear_getIssueHistory",
      "description": "Get the history of changes made to an issue",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of history events to return (default: 10)"
          },
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue (e.g., ABC-123)"
          }
        }
      }
    },
    {
      "name": "linear_getComments",
      "description": "Get all comments for an issue",
      "inputSchema": {
        "type": "object",
        "required": [
          "issueId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of comments to return (default: 25)"
          },
          "issueId": {
            "type": "string",
            "description": "ID or identifier of the issue to get comments from (e.g., ABC-123)"
          }
        }
      }
    }
  ],
  "connections": [
    {
      "type": "stdio",
      "bundleUrl": "https://backend.smithery.ai/storage/v1/object/public/bundles/@tacticlaunch/mcp-linear/server.mcpb",
      "runtime": "node",
      "configSchema": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "Your Linear API key. Required for Linear API access."
          }
        }
      }
    }
  ]
}