{
  "qualifiedName": "@multiversx/mx-mcp",
  "displayName": "MultiversX MCP Server",
  "description": "Create and manage PEM wallets for the MultiversX blockchain. Effortlessly retrieve wallet addresses, check balances, and send various token types including EGLD and NFTs. Enhance your blockchain interactions with secure and efficient wallet management capabilities.",
  "iconUrl": "https://icons.duckduckgo.com/ip3/docs.multiversx.com.ico",
  "remote": false,
  "deploymentUrl": null,
  "security": {
    "scanPassed": true
  },
  "tools": [
    {
      "name": "get-balance-of-address",
      "description": "Get the balance for a MultiversX address",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "The bech32 representation of the address"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "get-wallet-address",
      "description": "Get the bech32 address of the wallet set in the environment config",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "create-wallet",
      "description": "Create a new wallet and save it as a PEM file. PEM file ARE NOT SECURE. If a wallet already exists, will abort operation.",
      "inputSchema": {
        "type": "object"
      }
    },
    {
      "name": "send-egld",
      "description": "Create a move balance transaction and send it. Will send EGLD using the wallet set in the env to the specified receiver.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "amount",
          "receiver"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of EGLD to send. This amount will then be denominated (1 EGLD=1000000000000000000)"
          },
          "receiver": {
            "type": "string",
            "description": "The bech32 address of the receiver (erd1...)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "send-fungible-tokens",
      "description": "Create a fungible token transfer transaction and send it. Will send the specified token using the wallet set in the env to the specified receiver.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "amount",
          "token",
          "receiver"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The identifier of the token to send."
          },
          "amount": {
            "type": "string",
            "description": "The amount to send. This amount will then be denominated."
          },
          "receiver": {
            "type": "string",
            "description": "The bech32 address of the receiver (erd1...)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "send-sft-nft-meta-tokens",
      "description": "Create a nft, sft or meta esdt transfer transaction and send it. Will send the specified token using the wallet set in the env to the specified receiver.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "token",
          "receiver"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The extended identifier of the token to send (e.g. NFTEST-123456-0a)."
          },
          "amount": {
            "type": "string",
            "description": "The amount of tokens to send. ONLY needed for SFT or Meta-ESDT."
          },
          "receiver": {
            "type": "string",
            "description": "The bech32 address of the receiver (erd1...)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "issue-fungible-token",
      "description": "Create a transaction to issue a fungible token and send it. Will issue the token with the specified arguments. All the properties will be set to true.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tokenName",
          "tokenTicker",
          "initialSupply",
          "numDecimals"
        ],
        "properties": {
          "tokenName": {
            "type": "string",
            "description": "The token name."
          },
          "numDecimals": {
            "type": "string",
            "description": "The number of decimals the token will have."
          },
          "tokenTicker": {
            "type": "string",
            "description": "The token ticker."
          },
          "initialSupply": {
            "type": "string",
            "description": "The initial supply that will be minted."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "issue-semi-fungible-collection",
      "description": "Create a transaction to issue a semi-fungible collection (SFT) and send it. Will issue the collection with the specified arguments. All the properties will be set to true.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tokenName",
          "tokenTicker"
        ],
        "properties": {
          "tokenName": {
            "type": "string",
            "description": "The token name."
          },
          "tokenTicker": {
            "type": "string",
            "description": "The token ticker."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "issue-nft-collection",
      "description": "Create a transaction to issue a non-fungible token collection (NFT) and send it. Will issue the collection with the specified arguments. All the properties will be set to true.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tokenName",
          "tokenTicker"
        ],
        "properties": {
          "tokenName": {
            "type": "string",
            "description": "The token name."
          },
          "tokenTicker": {
            "type": "string",
            "description": "The token ticker."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "issue-meta-esdt-collection",
      "description": "Create a transaction to issue a MetaESDT token collection (MESDT) and send it. Will issue the collection with the specified arguments. All the properties will be set to true.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tokenName",
          "tokenTicker",
          "numDecimals"
        ],
        "properties": {
          "tokenName": {
            "type": "string",
            "description": "The token name."
          },
          "numDecimals": {
            "type": "string",
            "description": "The number of decimals."
          },
          "tokenTicker": {
            "type": "string",
            "description": "The token ticker."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "create-sft-nft-mesdt-tokens",
      "description": "Create a transaction to issue a semi-fungible token (SFT), or a non-fungible token (NFT), or a MetaESDT token for a collection and send it.\nPlease also specify the initial quantity and the royalties.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tokenIdentifier",
          "name",
          "initialQuantity"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the token."
          },
          "royalties": {
            "type": "string",
            "description": "The royalties you'll receive."
          },
          "initialQuantity": {
            "type": "string",
            "description": "The initial quantity(number of tokens) that will be minted. If not provided, defaults to 1."
          },
          "tokenIdentifier": {
            "type": "string",
            "description": "The identifier of the collection."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "get-tokens-of-address",
      "description": "Get the tokens of an address. Returns the first 25 fungible tokens and the first 25 NFTs, SFTs and MetaESDT. To get more tokens, specify the number of tokens you want to get. Will return the specified number of fungible tokens and the same number of non-fungible. The returned list will contain twice the number of tokens specified, if tokens are available.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "address"
        ],
        "properties": {
          "size": {
            "type": "number",
            "description": "The number of each token type to be returned. By default, the number is 25."
          },
          "address": {
            "type": "string",
            "description": "The bech32 address of the account (erd1...)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "send-egld-to-multiple-receivers",
      "description": "Create move balance transactions and send them. Will send EGLD using the wallet set in the env to each specified receiver.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "amount",
          "receivers"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "The amount of EGLD to send. This amount will then be denominated (1 EGLD=1000000000000000000)"
          },
          "receivers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of bech32 addresses of the receivers (erd1...)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "get-network",
      "description": "Get the network set in the environment config",
      "inputSchema": {
        "type": "object"
      }
    }
  ],
  "connections": [
    {
      "type": "stdio",
      "bundleUrl": "https://backend.smithery.ai/storage/v1/object/public/bundles/@multiversx/mx-mcp/server.mcpb",
      "runtime": "node",
      "configSchema": {
        "type": "object",
        "required": [
          "mvxNetwork"
        ],
        "properties": {
          "mvxWallet": {
            "type": "string",
            "description": "The absolute path to a PEM wallet. Will be used for signing transactions."
          },
          "mvxNetwork": {
            "type": "string",
            "default": "devnet",
            "description": "The MultiversX network to interact with, e.g., 'devnet', 'mainnet'."
          }
        }
      }
    }
  ]
}