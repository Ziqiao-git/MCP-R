{
  "qualifiedName": "@cpretzinger/gohighlevel-mcp",
  "displayName": "MCP ALL TOOLS GHL",
  "description": "A comprehensive Model Context Protocol (MCP) server that provides programmatic access to the entire\n  GoHighLevel platform API with 269+ automated tools.\n\n  What it does\n\n  This MCP server acts as a bridge between AI assistants (like Claude) and GoHighLevel's extensive API\n  ecosystem, enabling:\n\n  - Complete CRM automation - Manage contacts, companies, opportunities, pipelines\n  - Marketing automation - Create/manage campaigns, workflows, funnels, forms\n  - Communication tools - SMS, email, voicemail drops, conversations\n  - Calendar & booking - Appointments, availability, scheduling\n  - Course & membership management - Products, offers, price points\n  - Analytics & reporting - Track performance, attribution, conversions\n  - Agency management - Sub-accounts, users, permissions, SaaS rebilling\n  - Integration capabilities - Webhooks, custom fields, OAuth apps\n\n  Key Features\n\n  - 269+ pre-built tools covering every GoHighLevel API endpoint\n  - Automatic token refresh for uninterrupted access\n  - Smart pagination handling for large datasets\n  - Error handling & retry logic for reliability\n  - Type-safe operations with full TypeScript support\n  - Modular architecture organized by functional domains\n\n  Use Cases\n\n  - Build custom automations and workflows\n  - Bulk data operations and migrations\n  - Create custom reporting dashboards\n  - Integrate GoHighLevel with other platforms\n  - Automate repetitive administrative tasks\n  - Develop custom applications on top of GoHighLevel\n\n  Perfect for agencies, developers, and power users who want to unlock the full potential of GoHighLevel through\n   code and AI-powered automation.",
  "iconUrl": "https://spjawbfpwezjfmicopsl.supabase.co/storage/v1/object/public/server-icons/c6e41664-04f5-43b6-9157-f1e5a7e63401.png",
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@cpretzinger/gohighlevel-mcp",
  "security": null,
  "tools": [
    {
      "name": "create_contact",
      "description": "Create a new contact in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to assign to contact"
          },
          "email": {
            "type": "string",
            "description": "Contact email address"
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number"
          },
          "source": {
            "type": "string",
            "description": "Source of the contact"
          },
          "lastName": {
            "type": "string",
            "description": "Contact last name"
          },
          "firstName": {
            "type": "string",
            "description": "Contact first name"
          }
        }
      }
    },
    {
      "name": "search_contacts",
      "description": "Search for contacts with advanced filtering options",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Filter by email address"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of results (default: 25)"
          },
          "phone": {
            "type": "string",
            "description": "Filter by phone number"
          },
          "query": {
            "type": "string",
            "description": "Search query string"
          }
        }
      }
    },
    {
      "name": "get_contact",
      "description": "Get detailed information about a specific contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "update_contact",
      "description": "Update contact information",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to assign to contact"
          },
          "email": {
            "type": "string",
            "description": "Contact email address"
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number"
          },
          "lastName": {
            "type": "string",
            "description": "Contact last name"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "firstName": {
            "type": "string",
            "description": "Contact first name"
          }
        }
      }
    },
    {
      "name": "delete_contact",
      "description": "Delete a contact from GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "add_contact_tags",
      "description": "Add tags to a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "tags"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to add"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "remove_contact_tags",
      "description": "Remove tags from a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "tags"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to remove"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "get_contact_tasks",
      "description": "Get all tasks for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "create_contact_task",
      "description": "Create a new task for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "title",
          "dueDate"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Task description"
          },
          "title": {
            "type": "string",
            "description": "Task title"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date (ISO format)"
          },
          "completed": {
            "type": "boolean",
            "description": "Task completion status"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign task to"
          }
        }
      }
    },
    {
      "name": "get_contact_task",
      "description": "Get a specific task for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "Task ID"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "update_contact_task",
      "description": "Update a task for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "taskId"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Task description"
          },
          "title": {
            "type": "string",
            "description": "Task title"
          },
          "taskId": {
            "type": "string",
            "description": "Task ID"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date (ISO format)"
          },
          "completed": {
            "type": "boolean",
            "description": "Task completion status"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign task to"
          }
        }
      }
    },
    {
      "name": "delete_contact_task",
      "description": "Delete a task for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "taskId"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "Task ID"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "update_task_completion",
      "description": "Update task completion status",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "taskId",
          "completed"
        ],
        "properties": {
          "taskId": {
            "type": "string",
            "description": "Task ID"
          },
          "completed": {
            "type": "boolean",
            "description": "Completion status"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "get_contact_notes",
      "description": "Get all notes for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "create_contact_note",
      "description": "Create a new note for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Note content"
          },
          "userId": {
            "type": "string",
            "description": "User ID creating the note"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "get_contact_note",
      "description": "Get a specific note for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "noteId"
        ],
        "properties": {
          "noteId": {
            "type": "string",
            "description": "Note ID"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "update_contact_note",
      "description": "Update a note for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "noteId",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Note content"
          },
          "noteId": {
            "type": "string",
            "description": "Note ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID updating the note"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "delete_contact_note",
      "description": "Delete a note for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "noteId"
        ],
        "properties": {
          "noteId": {
            "type": "string",
            "description": "Note ID"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "upsert_contact",
      "description": "Create or update contact based on email/phone (smart merge)",
      "inputSchema": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to assign to contact"
          },
          "email": {
            "type": "string",
            "description": "Contact email address"
          },
          "phone": {
            "type": "string",
            "description": "Contact phone number"
          },
          "source": {
            "type": "string",
            "description": "Source of the contact"
          },
          "lastName": {
            "type": "string",
            "description": "Contact last name"
          },
          "firstName": {
            "type": "string",
            "description": "Contact first name"
          },
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign contact to"
          }
        }
      }
    },
    {
      "name": "get_duplicate_contact",
      "description": "Check for duplicate contacts by email or phone",
      "inputSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email to check for duplicates"
          },
          "phone": {
            "type": "string",
            "description": "Phone to check for duplicates"
          }
        }
      }
    },
    {
      "name": "get_contacts_by_business",
      "description": "Get contacts associated with a specific business",
      "inputSchema": {
        "type": "object",
        "required": [
          "businessId"
        ],
        "properties": {
          "skip": {
            "type": "number",
            "description": "Number of results to skip"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of results"
          },
          "query": {
            "type": "string",
            "description": "Search query"
          },
          "businessId": {
            "type": "string",
            "description": "Business ID"
          }
        }
      }
    },
    {
      "name": "get_contact_appointments",
      "description": "Get all appointments for a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "bulk_update_contact_tags",
      "description": "Bulk add or remove tags from multiple contacts",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactIds",
          "tags",
          "operation"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to add or remove"
          },
          "operation": {
            "enum": [
              "add",
              "remove"
            ],
            "type": "string",
            "description": "Operation to perform"
          },
          "contactIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of contact IDs"
          },
          "removeAllTags": {
            "type": "boolean",
            "description": "Remove all existing tags before adding new ones"
          }
        }
      }
    },
    {
      "name": "bulk_update_contact_business",
      "description": "Bulk update business association for multiple contacts",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactIds"
        ],
        "properties": {
          "businessId": {
            "type": "string",
            "description": "Business ID (null to remove from business)"
          },
          "contactIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of contact IDs"
          }
        }
      }
    },
    {
      "name": "add_contact_followers",
      "description": "Add followers to a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "followers"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs to add as followers"
          }
        }
      }
    },
    {
      "name": "remove_contact_followers",
      "description": "Remove followers from a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "followers"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs to remove as followers"
          }
        }
      }
    },
    {
      "name": "add_contact_to_campaign",
      "description": "Add contact to a marketing campaign",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "campaignId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign ID"
          }
        }
      }
    },
    {
      "name": "remove_contact_from_campaign",
      "description": "Remove contact from a specific campaign",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "campaignId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "campaignId": {
            "type": "string",
            "description": "Campaign ID"
          }
        }
      }
    },
    {
      "name": "remove_contact_from_all_campaigns",
      "description": "Remove contact from all campaigns",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          }
        }
      }
    },
    {
      "name": "add_contact_to_workflow",
      "description": "Add contact to a workflow",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "workflowId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "workflowId": {
            "type": "string",
            "description": "Workflow ID"
          },
          "eventStartTime": {
            "type": "string",
            "description": "Event start time (ISO format)"
          }
        }
      }
    },
    {
      "name": "remove_contact_from_workflow",
      "description": "Remove contact from a workflow",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "workflowId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "workflowId": {
            "type": "string",
            "description": "Workflow ID"
          },
          "eventStartTime": {
            "type": "string",
            "description": "Event start time (ISO format)"
          }
        }
      }
    },
    {
      "name": "send_sms",
      "description": "Send an SMS message to a contact in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 1600,
            "description": "The SMS message content to send"
          },
          "contactId": {
            "type": "string",
            "description": "The unique ID of the contact to send SMS to"
          },
          "fromNumber": {
            "type": "string",
            "description": "Optional: Phone number to send from (must be configured in GHL)"
          }
        }
      }
    },
    {
      "name": "send_email",
      "description": "Send an email message to a contact in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "subject"
        ],
        "properties": {
          "html": {
            "type": "string",
            "description": "HTML email content (optional, takes precedence over message)"
          },
          "emailCc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional: Array of CC email addresses"
          },
          "message": {
            "type": "string",
            "description": "Plain text email content"
          },
          "subject": {
            "type": "string",
            "description": "Email subject line"
          },
          "emailBcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional: Array of BCC email addresses"
          },
          "contactId": {
            "type": "string",
            "description": "The unique ID of the contact to send email to"
          },
          "emailFrom": {
            "type": "string",
            "format": "email",
            "description": "Optional: Email address to send from (must be configured in GHL)"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional: Array of attachment URLs"
          }
        }
      }
    },
    {
      "name": "search_conversations",
      "description": "Search conversations in GoHighLevel with various filters",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 20,
            "maximum": 100,
            "minimum": 1,
            "description": "Maximum number of conversations to return (default: 20, max: 100)"
          },
          "query": {
            "type": "string",
            "description": "Search query to filter conversations"
          },
          "status": {
            "enum": [
              "all",
              "read",
              "unread",
              "starred",
              "recents"
            ],
            "type": "string",
            "default": "all",
            "description": "Filter conversations by read status"
          },
          "contactId": {
            "type": "string",
            "description": "Filter conversations for a specific contact"
          },
          "assignedTo": {
            "type": "string",
            "description": "Filter by user ID assigned to conversations"
          }
        }
      }
    },
    {
      "name": "get_conversation",
      "description": "Get detailed conversation information including message history",
      "inputSchema": {
        "type": "object",
        "required": [
          "conversationId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "default": 20,
            "maximum": 100,
            "minimum": 1,
            "description": "Maximum number of messages to return (default: 20)"
          },
          "messageTypes": {
            "type": "array",
            "items": {
              "enum": [
                "TYPE_SMS",
                "TYPE_EMAIL",
                "TYPE_CALL",
                "TYPE_FACEBOOK",
                "TYPE_INSTAGRAM",
                "TYPE_WHATSAPP",
                "TYPE_LIVE_CHAT"
              ],
              "type": "string"
            },
            "description": "Filter messages by type (optional)"
          },
          "conversationId": {
            "type": "string",
            "description": "The unique ID of the conversation to retrieve"
          }
        }
      }
    },
    {
      "name": "create_conversation",
      "description": "Create a new conversation with a contact",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId"
        ],
        "properties": {
          "contactId": {
            "type": "string",
            "description": "The unique ID of the contact to create conversation with"
          }
        }
      }
    },
    {
      "name": "update_conversation",
      "description": "Update conversation properties (star, mark read, etc.)",
      "inputSchema": {
        "type": "object",
        "required": [
          "conversationId"
        ],
        "properties": {
          "starred": {
            "type": "boolean",
            "description": "Star or unstar the conversation"
          },
          "unreadCount": {
            "type": "number",
            "minimum": 0,
            "description": "Set the unread message count (0 to mark as read)"
          },
          "conversationId": {
            "type": "string",
            "description": "The unique ID of the conversation to update"
          }
        }
      }
    },
    {
      "name": "get_recent_messages",
      "description": "Get recent messages across all conversations for monitoring",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "maximum": 50,
            "minimum": 1,
            "description": "Maximum number of conversations to check (default: 10)"
          },
          "status": {
            "enum": [
              "all",
              "unread"
            ],
            "type": "string",
            "default": "unread",
            "description": "Filter by conversation status"
          }
        }
      }
    },
    {
      "name": "delete_conversation",
      "description": "Delete a conversation permanently",
      "inputSchema": {
        "type": "object",
        "required": [
          "conversationId"
        ],
        "properties": {
          "conversationId": {
            "type": "string",
            "description": "The unique ID of the conversation to delete"
          }
        }
      }
    },
    {
      "name": "get_email_message",
      "description": "Get detailed email message information by email message ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "emailMessageId"
        ],
        "properties": {
          "emailMessageId": {
            "type": "string",
            "description": "The unique ID of the email message to retrieve"
          }
        }
      }
    },
    {
      "name": "get_message",
      "description": "Get detailed message information by message ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "The unique ID of the message to retrieve"
          }
        }
      }
    },
    {
      "name": "upload_message_attachments",
      "description": "Upload file attachments for use in messages",
      "inputSchema": {
        "type": "object",
        "required": [
          "conversationId",
          "attachmentUrls"
        ],
        "properties": {
          "attachmentUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of file URLs to upload as attachments"
          },
          "conversationId": {
            "type": "string",
            "description": "The conversation ID to upload attachments for"
          }
        }
      }
    },
    {
      "name": "update_message_status",
      "description": "Update the delivery status of a message",
      "inputSchema": {
        "type": "object",
        "required": [
          "messageId",
          "status"
        ],
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "description": "Error details if status is failed"
          },
          "status": {
            "enum": [
              "delivered",
              "failed",
              "pending",
              "read"
            ],
            "type": "string",
            "description": "New status for the message"
          },
          "messageId": {
            "type": "string",
            "description": "The unique ID of the message to update"
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Email delivery status for additional recipients"
          },
          "emailMessageId": {
            "type": "string",
            "description": "Email message ID if updating email status"
          }
        }
      }
    },
    {
      "name": "add_inbound_message",
      "description": "Manually add an inbound message to a conversation",
      "inputSchema": {
        "type": "object",
        "required": [
          "type",
          "conversationId",
          "conversationProviderId"
        ],
        "properties": {
          "call": {
            "type": "object",
            "properties": {
              "to": {
                "type": "string",
                "description": "Called number"
              },
              "from": {
                "type": "string",
                "description": "Caller number"
              },
              "status": {
                "enum": [
                  "pending",
                  "completed",
                  "answered",
                  "busy",
                  "no-answer",
                  "failed",
                  "canceled",
                  "voicemail"
                ],
                "type": "string",
                "description": "Call status"
              }
            },
            "description": "Call details for call-type messages"
          },
          "date": {
            "type": "string",
            "description": "Date of the message (ISO format)"
          },
          "html": {
            "type": "string",
            "description": "HTML content for email messages"
          },
          "type": {
            "enum": [
              "SMS",
              "Email",
              "WhatsApp",
              "GMB",
              "IG",
              "FB",
              "Custom",
              "WebChat",
              "Live_Chat",
              "Call"
            ],
            "type": "string",
            "description": "Type of inbound message to add"
          },
          "altId": {
            "type": "string",
            "description": "External provider message ID"
          },
          "emailCc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "CC email addresses"
          },
          "emailTo": {
            "type": "string",
            "description": "To email address"
          },
          "message": {
            "type": "string",
            "description": "Message content (for text-based messages)"
          },
          "subject": {
            "type": "string",
            "description": "Subject line for email messages"
          },
          "emailBcc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "BCC email addresses"
          },
          "emailFrom": {
            "type": "string",
            "description": "From email address"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attachment URLs"
          },
          "conversationId": {
            "type": "string",
            "description": "The conversation to add the message to"
          },
          "emailMessageId": {
            "type": "string",
            "description": "Email message ID for threading"
          },
          "conversationProviderId": {
            "type": "string",
            "description": "Conversation provider ID for the message"
          }
        }
      }
    },
    {
      "name": "add_outbound_call",
      "description": "Manually add an outbound call record to a conversation",
      "inputSchema": {
        "type": "object",
        "required": [
          "conversationId",
          "conversationProviderId",
          "to",
          "from",
          "status"
        ],
        "properties": {
          "to": {
            "type": "string",
            "description": "Called phone number"
          },
          "date": {
            "type": "string",
            "description": "Date of the call (ISO format)"
          },
          "from": {
            "type": "string",
            "description": "Caller phone number"
          },
          "altId": {
            "type": "string",
            "description": "External provider call ID"
          },
          "status": {
            "enum": [
              "pending",
              "completed",
              "answered",
              "busy",
              "no-answer",
              "failed",
              "canceled",
              "voicemail"
            ],
            "type": "string",
            "description": "Call completion status"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of attachment URLs"
          },
          "conversationId": {
            "type": "string",
            "description": "The conversation to add the call to"
          },
          "conversationProviderId": {
            "type": "string",
            "description": "Conversation provider ID for the call"
          }
        }
      }
    },
    {
      "name": "get_message_recording",
      "description": "Get call recording audio for a message",
      "inputSchema": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "The unique ID of the call message to get recording for"
          }
        }
      }
    },
    {
      "name": "get_message_transcription",
      "description": "Get call transcription text for a message",
      "inputSchema": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "The unique ID of the call message to get transcription for"
          }
        }
      }
    },
    {
      "name": "download_transcription",
      "description": "Download call transcription as a text file",
      "inputSchema": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "The unique ID of the call message to download transcription for"
          }
        }
      }
    },
    {
      "name": "cancel_scheduled_message",
      "description": "Cancel a scheduled message before it is sent",
      "inputSchema": {
        "type": "object",
        "required": [
          "messageId"
        ],
        "properties": {
          "messageId": {
            "type": "string",
            "description": "The unique ID of the scheduled message to cancel"
          }
        }
      }
    },
    {
      "name": "cancel_scheduled_email",
      "description": "Cancel a scheduled email before it is sent",
      "inputSchema": {
        "type": "object",
        "required": [
          "emailMessageId"
        ],
        "properties": {
          "emailMessageId": {
            "type": "string",
            "description": "The unique ID of the scheduled email to cancel"
          }
        }
      }
    },
    {
      "name": "live_chat_typing",
      "description": "Send typing indicator for live chat conversations",
      "inputSchema": {
        "type": "object",
        "required": [
          "visitorId",
          "conversationId",
          "isTyping"
        ],
        "properties": {
          "isTyping": {
            "type": "boolean",
            "description": "Whether the agent is currently typing"
          },
          "visitorId": {
            "type": "string",
            "description": "Unique visitor ID for the live chat session"
          },
          "conversationId": {
            "type": "string",
            "description": "The conversation ID for the live chat"
          }
        }
      }
    },
    {
      "name": "create_blog_post",
      "description": "Create a new blog post in GoHighLevel. Requires blog ID, author ID, and category IDs which can be obtained from other blog tools.",
      "inputSchema": {
        "type": "object",
        "required": [
          "title",
          "blogId",
          "content",
          "description",
          "imageUrl",
          "imageAltText",
          "urlSlug",
          "author",
          "categories"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of tags for the blog post"
          },
          "title": {
            "type": "string",
            "description": "Blog post title"
          },
          "author": {
            "type": "string",
            "description": "Author ID (use get_blog_authors to find available authors)"
          },
          "blogId": {
            "type": "string",
            "description": "Blog site ID (use get_blog_sites to find available blogs)"
          },
          "status": {
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "SCHEDULED",
              "ARCHIVED"
            ],
            "type": "string",
            "default": "DRAFT",
            "description": "Publication status of the blog post"
          },
          "content": {
            "type": "string",
            "description": "Full HTML content of the blog post"
          },
          "urlSlug": {
            "type": "string",
            "description": "URL slug for the blog post (use check_url_slug to verify availability)"
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the featured image for the blog post"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of category IDs (use get_blog_categories to find available categories)"
          },
          "description": {
            "type": "string",
            "description": "Short description/excerpt of the blog post"
          },
          "publishedAt": {
            "type": "string",
            "description": "Optional ISO timestamp for publication date (defaults to now for PUBLISHED status)"
          },
          "imageAltText": {
            "type": "string",
            "description": "Alt text for the featured image (for SEO and accessibility)"
          },
          "canonicalLink": {
            "type": "string",
            "description": "Optional canonical URL for SEO"
          }
        }
      }
    },
    {
      "name": "update_blog_post",
      "description": "Update an existing blog post in GoHighLevel. All fields except postId and blogId are optional.",
      "inputSchema": {
        "type": "object",
        "required": [
          "postId",
          "blogId"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Updated array of tags"
          },
          "title": {
            "type": "string",
            "description": "Updated blog post title"
          },
          "author": {
            "type": "string",
            "description": "Updated author ID"
          },
          "blogId": {
            "type": "string",
            "description": "Blog site ID that contains the post"
          },
          "postId": {
            "type": "string",
            "description": "Blog post ID to update"
          },
          "status": {
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "SCHEDULED",
              "ARCHIVED"
            ],
            "type": "string",
            "description": "Updated publication status"
          },
          "content": {
            "type": "string",
            "description": "Updated HTML content of the blog post"
          },
          "urlSlug": {
            "type": "string",
            "description": "Updated URL slug (use check_url_slug to verify availability)"
          },
          "imageUrl": {
            "type": "string",
            "description": "Updated featured image URL"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Updated array of category IDs"
          },
          "description": {
            "type": "string",
            "description": "Updated description/excerpt of the blog post"
          },
          "publishedAt": {
            "type": "string",
            "description": "Updated ISO timestamp for publication date"
          },
          "imageAltText": {
            "type": "string",
            "description": "Updated alt text for the featured image"
          },
          "canonicalLink": {
            "type": "string",
            "description": "Updated canonical URL"
          }
        }
      }
    },
    {
      "name": "get_blog_posts",
      "description": "Get blog posts from a specific blog site. Use this to list and search existing blog posts.",
      "inputSchema": {
        "type": "object",
        "required": [
          "blogId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number of posts to retrieve (default: 10, max recommended: 50)"
          },
          "blogId": {
            "type": "string",
            "description": "Blog site ID to get posts from (use get_blog_sites to find available blogs)"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of posts to skip for pagination (default: 0)"
          },
          "status": {
            "enum": [
              "DRAFT",
              "PUBLISHED",
              "SCHEDULED",
              "ARCHIVED"
            ],
            "type": "string",
            "description": "Optional filter by publication status"
          },
          "searchTerm": {
            "type": "string",
            "description": "Optional search term to filter posts by title or content"
          }
        }
      }
    },
    {
      "name": "get_blog_sites",
      "description": "Get all blog sites for the current location. Use this to find available blogs before creating or managing posts.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number of blogs to skip for pagination (default: 0)"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number of blogs to retrieve (default: 10)"
          },
          "searchTerm": {
            "type": "string",
            "description": "Optional search term to filter blogs by name"
          }
        }
      }
    },
    {
      "name": "get_blog_authors",
      "description": "Get all available blog authors for the current location. Use this to find author IDs for creating blog posts.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number of authors to retrieve (default: 10)"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of authors to skip for pagination (default: 0)"
          }
        }
      }
    },
    {
      "name": "get_blog_categories",
      "description": "Get all available blog categories for the current location. Use this to find category IDs for creating blog posts.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number of categories to retrieve (default: 10)"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of categories to skip for pagination (default: 0)"
          }
        }
      }
    },
    {
      "name": "check_url_slug",
      "description": "Check if a URL slug is available for use. Use this before creating or updating blog posts to ensure unique URLs.",
      "inputSchema": {
        "type": "object",
        "required": [
          "urlSlug"
        ],
        "properties": {
          "postId": {
            "type": "string",
            "description": "Optional post ID when updating an existing post (to exclude itself from the check)"
          },
          "urlSlug": {
            "type": "string",
            "description": "URL slug to check for availability"
          }
        }
      }
    },
    {
      "name": "search_opportunities",
      "description": "Search for opportunities in GoHighLevel CRM using various filters like pipeline, stage, contact, status, etc.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 20,
            "maximum": 100,
            "minimum": 1,
            "description": "Maximum number of opportunities to return (default: 20, max: 100)"
          },
          "query": {
            "type": "string",
            "description": "General search query (searches name, contact info)"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned",
              "all"
            ],
            "type": "string",
            "description": "Filter by opportunity status"
          },
          "contactId": {
            "type": "string",
            "description": "Filter by specific contact ID"
          },
          "assignedTo": {
            "type": "string",
            "description": "Filter by assigned user ID"
          },
          "pipelineId": {
            "type": "string",
            "description": "Filter by specific pipeline ID"
          },
          "pipelineStageId": {
            "type": "string",
            "description": "Filter by specific pipeline stage ID"
          }
        }
      }
    },
    {
      "name": "get_pipelines",
      "description": "Get all sales pipelines configured in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "get_opportunity",
      "description": "Get detailed information about a specific opportunity by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "opportunityId"
        ],
        "properties": {
          "opportunityId": {
            "type": "string",
            "description": "The unique ID of the opportunity to retrieve"
          }
        }
      }
    },
    {
      "name": "create_opportunity",
      "description": "Create a new opportunity in GoHighLevel CRM",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "pipelineId",
          "contactId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name/title of the opportunity"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned"
            ],
            "type": "string",
            "default": "open",
            "description": "Initial status of the opportunity (default: open)"
          },
          "contactId": {
            "type": "string",
            "description": "ID of the contact associated with this opportunity"
          },
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign this opportunity to"
          },
          "pipelineId": {
            "type": "string",
            "description": "ID of the pipeline this opportunity belongs to"
          },
          "monetaryValue": {
            "type": "number",
            "description": "Monetary value of the opportunity in dollars"
          }
        }
      }
    },
    {
      "name": "update_opportunity_status",
      "description": "Update the status of an opportunity (won, lost, etc.)",
      "inputSchema": {
        "type": "object",
        "required": [
          "opportunityId",
          "status"
        ],
        "properties": {
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned"
            ],
            "type": "string",
            "description": "New status for the opportunity"
          },
          "opportunityId": {
            "type": "string",
            "description": "The unique ID of the opportunity"
          }
        }
      }
    },
    {
      "name": "delete_opportunity",
      "description": "Delete an opportunity from GoHighLevel CRM",
      "inputSchema": {
        "type": "object",
        "required": [
          "opportunityId"
        ],
        "properties": {
          "opportunityId": {
            "type": "string",
            "description": "The unique ID of the opportunity to delete"
          }
        }
      }
    },
    {
      "name": "update_opportunity",
      "description": "Update an existing opportunity with new details (full update)",
      "inputSchema": {
        "type": "object",
        "required": [
          "opportunityId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name/title of the opportunity"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned"
            ],
            "type": "string",
            "description": "Updated status of the opportunity"
          },
          "assignedTo": {
            "type": "string",
            "description": "Updated assigned user ID"
          },
          "pipelineId": {
            "type": "string",
            "description": "Updated pipeline ID"
          },
          "monetaryValue": {
            "type": "number",
            "description": "Updated monetary value in dollars"
          },
          "opportunityId": {
            "type": "string",
            "description": "The unique ID of the opportunity to update"
          },
          "pipelineStageId": {
            "type": "string",
            "description": "Updated pipeline stage ID"
          }
        }
      }
    },
    {
      "name": "upsert_opportunity",
      "description": "Create or update an opportunity based on contact and pipeline (smart merge)",
      "inputSchema": {
        "type": "object",
        "required": [
          "pipelineId",
          "contactId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name/title of the opportunity"
          },
          "status": {
            "enum": [
              "open",
              "won",
              "lost",
              "abandoned"
            ],
            "type": "string",
            "default": "open",
            "description": "Status of the opportunity"
          },
          "contactId": {
            "type": "string",
            "description": "ID of the contact associated with this opportunity"
          },
          "assignedTo": {
            "type": "string",
            "description": "User ID to assign this opportunity to"
          },
          "pipelineId": {
            "type": "string",
            "description": "ID of the pipeline this opportunity belongs to"
          },
          "monetaryValue": {
            "type": "number",
            "description": "Monetary value of the opportunity in dollars"
          },
          "pipelineStageId": {
            "type": "string",
            "description": "Pipeline stage ID"
          }
        }
      }
    },
    {
      "name": "add_opportunity_followers",
      "description": "Add followers to an opportunity for notifications and tracking",
      "inputSchema": {
        "type": "object",
        "required": [
          "opportunityId",
          "followers"
        ],
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs to add as followers"
          },
          "opportunityId": {
            "type": "string",
            "description": "The unique ID of the opportunity"
          }
        }
      }
    },
    {
      "name": "remove_opportunity_followers",
      "description": "Remove followers from an opportunity",
      "inputSchema": {
        "type": "object",
        "required": [
          "opportunityId",
          "followers"
        ],
        "properties": {
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of user IDs to remove as followers"
          },
          "opportunityId": {
            "type": "string",
            "description": "The unique ID of the opportunity"
          }
        }
      }
    },
    {
      "name": "get_calendar_groups",
      "description": "Get all calendar groups in the GoHighLevel location",
      "inputSchema": {
        "type": "object",
        "properties": {}
      }
    },
    {
      "name": "get_calendars",
      "description": "Get all calendars in the GoHighLevel location with optional filtering",
      "inputSchema": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Filter calendars by group ID"
          },
          "showDrafted": {
            "type": "boolean",
            "default": true,
            "description": "Include draft calendars (default: true)"
          }
        }
      }
    },
    {
      "name": "create_calendar",
      "description": "Create a new calendar in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "calendarType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the calendar"
          },
          "groupId": {
            "type": "string",
            "description": "Calendar group ID to organize the calendar"
          },
          "isActive": {
            "type": "boolean",
            "default": true,
            "description": "Make calendar active immediately (default: true)"
          },
          "autoConfirm": {
            "type": "boolean",
            "default": true,
            "description": "Automatically confirm appointments (default: true)"
          },
          "description": {
            "type": "string",
            "description": "Description of the calendar"
          },
          "calendarType": {
            "enum": [
              "round_robin",
              "event",
              "class_booking",
              "collective",
              "service_booking",
              "personal"
            ],
            "type": "string",
            "default": "event",
            "description": "Type of calendar to create"
          },
          "slotDuration": {
            "type": "number",
            "default": 30,
            "description": "Duration of appointment slots in minutes (default: 30)"
          },
          "allowReschedule": {
            "type": "boolean",
            "default": true,
            "description": "Allow clients to reschedule appointments (default: true)"
          },
          "slotDurationUnit": {
            "enum": [
              "mins",
              "hours"
            ],
            "type": "string",
            "default": "mins",
            "description": "Unit for slot duration"
          },
          "allowCancellation": {
            "type": "boolean",
            "default": true,
            "description": "Allow clients to cancel appointments (default: true)"
          }
        }
      }
    },
    {
      "name": "get_calendar",
      "description": "Get detailed information about a specific calendar by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId"
        ],
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "The unique ID of the calendar to retrieve"
          }
        }
      }
    },
    {
      "name": "update_calendar",
      "description": "Update an existing calendar in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the calendar"
          },
          "isActive": {
            "type": "boolean",
            "description": "Updated active status"
          },
          "calendarId": {
            "type": "string",
            "description": "The unique ID of the calendar to update"
          },
          "autoConfirm": {
            "type": "boolean",
            "description": "Updated auto-confirm setting"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the calendar"
          },
          "slotDuration": {
            "type": "number",
            "description": "Updated duration of appointment slots in minutes"
          },
          "allowReschedule": {
            "type": "boolean",
            "description": "Updated reschedule permission setting"
          },
          "allowCancellation": {
            "type": "boolean",
            "description": "Updated cancellation permission setting"
          }
        }
      }
    },
    {
      "name": "delete_calendar",
      "description": "Delete a calendar from GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId"
        ],
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "The unique ID of the calendar to delete"
          }
        }
      }
    },
    {
      "name": "get_calendar_events",
      "description": "Get appointments/events from calendars within a date range",
      "inputSchema": {
        "type": "object",
        "required": [
          "startTime",
          "endTime"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "Filter events by assigned user ID"
          },
          "endTime": {
            "type": "string",
            "description": "End time in milliseconds or ISO date (e.g., \"2024-01-31\" or \"1706745599999\")"
          },
          "groupId": {
            "type": "string",
            "description": "Filter events by calendar group ID"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in milliseconds or ISO date (e.g., \"2024-01-01\" or \"1704067200000\")"
          },
          "calendarId": {
            "type": "string",
            "description": "Filter events by specific calendar ID"
          }
        }
      }
    },
    {
      "name": "get_free_slots",
      "description": "Get available time slots for booking appointments on a specific calendar",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId",
          "startDate",
          "endDate"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "Specific user ID to check availability for"
          },
          "endDate": {
            "type": "string",
            "description": "End date for availability check (YYYY-MM-DD format or milliseconds)"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone for the results (e.g., \"America/New_York\")"
          },
          "startDate": {
            "type": "string",
            "description": "Start date for availability check (YYYY-MM-DD format or milliseconds)"
          },
          "calendarId": {
            "type": "string",
            "description": "The calendar ID to check availability for"
          }
        }
      }
    },
    {
      "name": "create_appointment",
      "description": "Create a new appointment/booking in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId",
          "contactId",
          "startTime"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title/subject of the appointment"
          },
          "address": {
            "type": "string",
            "description": "Meeting location or address"
          },
          "endTime": {
            "type": "string",
            "description": "End time in ISO format (optional, will be calculated from slot duration if not provided)"
          },
          "toNotify": {
            "type": "boolean",
            "default": true,
            "description": "Send notifications for this appointment"
          },
          "contactId": {
            "type": "string",
            "description": "The contact ID for whom to book the appointment"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in ISO format (e.g., \"2024-01-15T10:00:00-05:00\")"
          },
          "calendarId": {
            "type": "string",
            "description": "The calendar ID to book the appointment in"
          },
          "assignedUserId": {
            "type": "string",
            "description": "User ID to assign this appointment to"
          },
          "ignoreDateRange": {
            "type": "boolean",
            "default": false,
            "description": "Ignore minimum scheduling notice and date range restrictions"
          },
          "appointmentStatus": {
            "enum": [
              "new",
              "confirmed"
            ],
            "type": "string",
            "default": "confirmed",
            "description": "Initial status of the appointment"
          },
          "meetingLocationType": {
            "enum": [
              "custom",
              "zoom",
              "gmeet",
              "phone",
              "address"
            ],
            "type": "string",
            "default": "custom",
            "description": "Type of meeting location"
          }
        }
      }
    },
    {
      "name": "get_appointment",
      "description": "Get detailed information about a specific appointment by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId"
        ],
        "properties": {
          "appointmentId": {
            "type": "string",
            "description": "The unique ID of the appointment to retrieve"
          }
        }
      }
    },
    {
      "name": "update_appointment",
      "description": "Update an existing appointment in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated title/subject of the appointment"
          },
          "address": {
            "type": "string",
            "description": "Updated meeting location or address"
          },
          "endTime": {
            "type": "string",
            "description": "Updated end time in ISO format"
          },
          "toNotify": {
            "type": "boolean",
            "default": true,
            "description": "Send notifications for this update"
          },
          "startTime": {
            "type": "string",
            "description": "Updated start time in ISO format"
          },
          "appointmentId": {
            "type": "string",
            "description": "The unique ID of the appointment to update"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Updated assigned user ID"
          },
          "appointmentStatus": {
            "enum": [
              "new",
              "confirmed",
              "cancelled",
              "showed",
              "noshow"
            ],
            "type": "string",
            "description": "Updated status of the appointment"
          }
        }
      }
    },
    {
      "name": "delete_appointment",
      "description": "Cancel/delete an appointment from GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId"
        ],
        "properties": {
          "appointmentId": {
            "type": "string",
            "description": "The unique ID of the appointment to delete"
          }
        }
      }
    },
    {
      "name": "create_block_slot",
      "description": "Create a blocked time slot to prevent bookings during specific times",
      "inputSchema": {
        "type": "object",
        "required": [
          "startTime",
          "endTime"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title/reason for the block (e.g., \"Lunch Break\", \"Meeting\")"
          },
          "endTime": {
            "type": "string",
            "description": "End time of the block in ISO format (e.g., \"2024-01-15T12:00:00-05:00\")"
          },
          "startTime": {
            "type": "string",
            "description": "Start time of the block in ISO format (e.g., \"2024-01-15T10:00:00-05:00\")"
          },
          "calendarId": {
            "type": "string",
            "description": "Specific calendar to block (optional, blocks all if not specified)"
          },
          "assignedUserId": {
            "type": "string",
            "description": "User ID to apply the block for"
          }
        }
      }
    },
    {
      "name": "update_block_slot",
      "description": "Update an existing blocked time slot",
      "inputSchema": {
        "type": "object",
        "required": [
          "blockSlotId"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated title/reason for the block"
          },
          "endTime": {
            "type": "string",
            "description": "Updated end time in ISO format"
          },
          "startTime": {
            "type": "string",
            "description": "Updated start time in ISO format"
          },
          "calendarId": {
            "type": "string",
            "description": "Updated calendar ID for the block"
          },
          "blockSlotId": {
            "type": "string",
            "description": "The unique ID of the block slot to update"
          },
          "assignedUserId": {
            "type": "string",
            "description": "Updated assigned user ID"
          }
        }
      }
    },
    {
      "name": "create_calendar_group",
      "description": "Create a new calendar group",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "description",
          "slug"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "slug": {
            "type": "string",
            "description": "URL slug for the group"
          },
          "isActive": {
            "type": "boolean",
            "default": true,
            "description": "Whether group is active"
          },
          "description": {
            "type": "string",
            "description": "Group description"
          }
        }
      }
    },
    {
      "name": "validate_group_slug",
      "description": "Validate if a calendar group slug is available",
      "inputSchema": {
        "type": "object",
        "required": [
          "slug"
        ],
        "properties": {
          "slug": {
            "type": "string",
            "description": "Slug to validate"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    },
    {
      "name": "update_calendar_group",
      "description": "Update calendar group details",
      "inputSchema": {
        "type": "object",
        "required": [
          "groupId",
          "name",
          "description",
          "slug"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "slug": {
            "type": "string",
            "description": "URL slug for the group"
          },
          "groupId": {
            "type": "string",
            "description": "Calendar group ID"
          },
          "description": {
            "type": "string",
            "description": "Group description"
          }
        }
      }
    },
    {
      "name": "delete_calendar_group",
      "description": "Delete a calendar group",
      "inputSchema": {
        "type": "object",
        "required": [
          "groupId"
        ],
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Calendar group ID"
          }
        }
      }
    },
    {
      "name": "disable_calendar_group",
      "description": "Enable or disable a calendar group",
      "inputSchema": {
        "type": "object",
        "required": [
          "groupId",
          "isActive"
        ],
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Calendar group ID"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether to enable (true) or disable (false) the group"
          }
        }
      }
    },
    {
      "name": "get_appointment_notes",
      "description": "Get notes for an appointment",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of notes to return"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of notes to skip"
          },
          "appointmentId": {
            "type": "string",
            "description": "Appointment ID"
          }
        }
      }
    },
    {
      "name": "create_appointment_note",
      "description": "Create a note for an appointment",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Note content"
          },
          "userId": {
            "type": "string",
            "description": "User ID creating the note"
          },
          "appointmentId": {
            "type": "string",
            "description": "Appointment ID"
          }
        }
      }
    },
    {
      "name": "update_appointment_note",
      "description": "Update an appointment note",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId",
          "noteId",
          "body"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Updated note content"
          },
          "noteId": {
            "type": "string",
            "description": "Note ID"
          },
          "userId": {
            "type": "string",
            "description": "User ID updating the note"
          },
          "appointmentId": {
            "type": "string",
            "description": "Appointment ID"
          }
        }
      }
    },
    {
      "name": "delete_appointment_note",
      "description": "Delete an appointment note",
      "inputSchema": {
        "type": "object",
        "required": [
          "appointmentId",
          "noteId"
        ],
        "properties": {
          "noteId": {
            "type": "string",
            "description": "Note ID"
          },
          "appointmentId": {
            "type": "string",
            "description": "Appointment ID"
          }
        }
      }
    },
    {
      "name": "get_calendar_resources_equipments",
      "description": "Get calendar equipment resources",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number to skip"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Maximum number to return"
          }
        }
      }
    },
    {
      "name": "create_calendar_resource_equipment",
      "description": "Create a calendar equipment resource",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "description",
          "quantity",
          "outOfService",
          "capacity",
          "calendarIds"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Equipment name"
          },
          "capacity": {
            "type": "number",
            "description": "Capacity per unit"
          },
          "quantity": {
            "type": "number",
            "description": "Total quantity available"
          },
          "calendarIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated calendar IDs"
          },
          "description": {
            "type": "string",
            "description": "Equipment description"
          },
          "outOfService": {
            "type": "number",
            "description": "Number currently out of service"
          }
        }
      }
    },
    {
      "name": "get_calendar_resource_equipment",
      "description": "Get specific equipment resource details",
      "inputSchema": {
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "resourceId": {
            "type": "string",
            "description": "Equipment resource ID"
          }
        }
      }
    },
    {
      "name": "update_calendar_resource_equipment",
      "description": "Update equipment resource details",
      "inputSchema": {
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Equipment name"
          },
          "capacity": {
            "type": "number",
            "description": "Capacity per unit"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether resource is active"
          },
          "quantity": {
            "type": "number",
            "description": "Total quantity available"
          },
          "resourceId": {
            "type": "string",
            "description": "Equipment resource ID"
          },
          "calendarIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated calendar IDs"
          },
          "description": {
            "type": "string",
            "description": "Equipment description"
          },
          "outOfService": {
            "type": "number",
            "description": "Number currently out of service"
          }
        }
      }
    },
    {
      "name": "delete_calendar_resource_equipment",
      "description": "Delete an equipment resource",
      "inputSchema": {
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "resourceId": {
            "type": "string",
            "description": "Equipment resource ID"
          }
        }
      }
    },
    {
      "name": "get_calendar_resources_rooms",
      "description": "Get calendar room resources",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number to skip"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Maximum number to return"
          }
        }
      }
    },
    {
      "name": "create_calendar_resource_room",
      "description": "Create a calendar room resource",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "description",
          "quantity",
          "outOfService",
          "capacity",
          "calendarIds"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Room name"
          },
          "capacity": {
            "type": "number",
            "description": "Room capacity"
          },
          "quantity": {
            "type": "number",
            "description": "Total quantity available"
          },
          "calendarIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated calendar IDs"
          },
          "description": {
            "type": "string",
            "description": "Room description"
          },
          "outOfService": {
            "type": "number",
            "description": "Number currently out of service"
          }
        }
      }
    },
    {
      "name": "get_calendar_resource_room",
      "description": "Get specific room resource details",
      "inputSchema": {
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "resourceId": {
            "type": "string",
            "description": "Room resource ID"
          }
        }
      }
    },
    {
      "name": "update_calendar_resource_room",
      "description": "Update room resource details",
      "inputSchema": {
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Room name"
          },
          "capacity": {
            "type": "number",
            "description": "Room capacity"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether resource is active"
          },
          "quantity": {
            "type": "number",
            "description": "Total quantity available"
          },
          "resourceId": {
            "type": "string",
            "description": "Room resource ID"
          },
          "calendarIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Associated calendar IDs"
          },
          "description": {
            "type": "string",
            "description": "Room description"
          },
          "outOfService": {
            "type": "number",
            "description": "Number currently out of service"
          }
        }
      }
    },
    {
      "name": "delete_calendar_resource_room",
      "description": "Delete a room resource",
      "inputSchema": {
        "type": "object",
        "required": [
          "resourceId"
        ],
        "properties": {
          "resourceId": {
            "type": "string",
            "description": "Room resource ID"
          }
        }
      }
    },
    {
      "name": "get_calendar_notifications",
      "description": "Get calendar notifications",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId"
        ],
        "properties": {
          "skip": {
            "type": "number",
            "description": "Number to skip"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number to return"
          },
          "deleted": {
            "type": "boolean",
            "description": "Include deleted notifications"
          },
          "isActive": {
            "type": "boolean",
            "description": "Filter by active status"
          },
          "calendarId": {
            "type": "string",
            "description": "Calendar ID"
          }
        }
      }
    },
    {
      "name": "create_calendar_notifications",
      "description": "Create calendar notifications",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId",
          "notifications"
        ],
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "Calendar ID"
          },
          "notifications": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "receiverType",
                "channel",
                "notificationType"
              ],
              "properties": {
                "body": {
                  "type": "string",
                  "description": "Notification body"
                },
                "channel": {
                  "enum": [
                    "email",
                    "inApp"
                  ],
                  "type": "string",
                  "description": "Notification channel"
                },
                "subject": {
                  "type": "string",
                  "description": "Notification subject"
                },
                "isActive": {
                  "type": "boolean",
                  "description": "Whether notification is active"
                },
                "templateId": {
                  "type": "string",
                  "description": "Template ID"
                },
                "receiverType": {
                  "enum": [
                    "contact",
                    "guest",
                    "assignedUser",
                    "emails"
                  ],
                  "type": "string",
                  "description": "Who receives the notification"
                },
                "notificationType": {
                  "enum": [
                    "booked",
                    "confirmation",
                    "cancellation",
                    "reminder",
                    "followup",
                    "reschedule"
                  ],
                  "type": "string",
                  "description": "Type of notification"
                }
              }
            },
            "description": "Array of notification configurations"
          }
        }
      }
    },
    {
      "name": "get_calendar_notification",
      "description": "Get specific calendar notification",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId",
          "notificationId"
        ],
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "Calendar ID"
          },
          "notificationId": {
            "type": "string",
            "description": "Notification ID"
          }
        }
      }
    },
    {
      "name": "update_calendar_notification",
      "description": "Update calendar notification",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId",
          "notificationId"
        ],
        "properties": {
          "body": {
            "type": "string",
            "description": "Notification body"
          },
          "channel": {
            "enum": [
              "email",
              "inApp"
            ],
            "type": "string",
            "description": "Notification channel"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether notification is deleted"
          },
          "subject": {
            "type": "string",
            "description": "Notification subject"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether notification is active"
          },
          "calendarId": {
            "type": "string",
            "description": "Calendar ID"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID"
          },
          "receiverType": {
            "enum": [
              "contact",
              "guest",
              "assignedUser",
              "emails"
            ],
            "type": "string",
            "description": "Who receives the notification"
          },
          "notificationId": {
            "type": "string",
            "description": "Notification ID"
          },
          "notificationType": {
            "enum": [
              "booked",
              "confirmation",
              "cancellation",
              "reminder",
              "followup",
              "reschedule"
            ],
            "type": "string",
            "description": "Type of notification"
          }
        }
      }
    },
    {
      "name": "delete_calendar_notification",
      "description": "Delete calendar notification",
      "inputSchema": {
        "type": "object",
        "required": [
          "calendarId",
          "notificationId"
        ],
        "properties": {
          "calendarId": {
            "type": "string",
            "description": "Calendar ID"
          },
          "notificationId": {
            "type": "string",
            "description": "Notification ID"
          }
        }
      }
    },
    {
      "name": "get_blocked_slots",
      "description": "Get blocked time slots for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "startTime",
          "endTime"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "Filter by user ID"
          },
          "endTime": {
            "type": "string",
            "description": "End time for the query range"
          },
          "groupId": {
            "type": "string",
            "description": "Filter by group ID"
          },
          "startTime": {
            "type": "string",
            "description": "Start time for the query range"
          },
          "calendarId": {
            "type": "string",
            "description": "Filter by calendar ID"
          }
        }
      }
    },
    {
      "name": "get_email_campaigns",
      "description": "Get a list of email campaigns from GoHighLevel.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of campaigns to return."
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of campaigns to skip for pagination."
          },
          "status": {
            "enum": [
              "active",
              "pause",
              "complete",
              "cancelled",
              "retry",
              "draft",
              "resend-scheduled"
            ],
            "type": "string",
            "default": "active",
            "description": "Filter campaigns by status."
          }
        }
      }
    },
    {
      "name": "create_email_template",
      "description": "Create a new email template in GoHighLevel.",
      "inputSchema": {
        "type": "object",
        "required": [
          "title",
          "html"
        ],
        "properties": {
          "html": {
            "type": "string",
            "description": "HTML content of the template."
          },
          "title": {
            "type": "string",
            "description": "Title of the new template."
          },
          "isPlainText": {
            "type": "boolean",
            "default": false,
            "description": "Whether the template is plain text."
          }
        }
      }
    },
    {
      "name": "get_email_templates",
      "description": "Get a list of email templates from GoHighLevel.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of templates to return."
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of templates to skip for pagination."
          }
        }
      }
    },
    {
      "name": "update_email_template",
      "description": "Update an existing email template in GoHighLevel.",
      "inputSchema": {
        "type": "object",
        "required": [
          "templateId",
          "html"
        ],
        "properties": {
          "html": {
            "type": "string",
            "description": "The updated HTML content of the template."
          },
          "templateId": {
            "type": "string",
            "description": "The ID of the template to update."
          },
          "previewText": {
            "type": "string",
            "description": "The updated preview text for the template."
          }
        }
      }
    },
    {
      "name": "delete_email_template",
      "description": "Delete an email template from GoHighLevel.",
      "inputSchema": {
        "type": "object",
        "required": [
          "templateId"
        ],
        "properties": {
          "templateId": {
            "type": "string",
            "description": "The ID of the template to delete."
          }
        }
      }
    },
    {
      "name": "search_locations",
      "description": "Search for locations/sub-accounts in GoHighLevel with filtering options",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number of results to skip for pagination (default: 0)"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Filter by email address"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of locations to return (default: 10)"
          },
          "order": {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "asc",
            "description": "Order of results (default: asc)"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency ID to filter locations"
          }
        }
      }
    },
    {
      "name": "get_location",
      "description": "Get detailed information about a specific location/sub-account by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The unique ID of the location to retrieve"
          }
        }
      }
    },
    {
      "name": "create_location",
      "description": "Create a new sub-account/location in GoHighLevel (Agency Pro plan required)",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "companyId"
        ],
        "properties": {
          "city": {
            "type": "string",
            "description": "City where business is located"
          },
          "name": {
            "type": "string",
            "description": "Name of the sub-account/location"
          },
          "phone": {
            "type": "string",
            "description": "Phone number with country code (e.g., +1410039940)"
          },
          "state": {
            "type": "string",
            "description": "State where business operates"
          },
          "address": {
            "type": "string",
            "description": "Business address"
          },
          "country": {
            "type": "string",
            "description": "2-letter country code (e.g., US, CA, GB)"
          },
          "website": {
            "type": "string",
            "description": "Business website URL"
          },
          "timezone": {
            "type": "string",
            "description": "Business timezone (e.g., US/Central)"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency ID"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal/ZIP code"
          },
          "snapshotId": {
            "type": "string",
            "description": "Snapshot ID to load into the location"
          },
          "prospectInfo": {
            "type": "object",
            "required": [
              "firstName",
              "lastName",
              "email"
            ],
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "Prospect email"
              },
              "lastName": {
                "type": "string",
                "description": "Prospect last name"
              },
              "firstName": {
                "type": "string",
                "description": "Prospect first name"
              }
            },
            "description": "Prospect information for the location"
          }
        }
      }
    },
    {
      "name": "update_location",
      "description": "Update an existing sub-account/location in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "companyId"
        ],
        "properties": {
          "city": {
            "type": "string",
            "description": "Updated city"
          },
          "name": {
            "type": "string",
            "description": "Updated name of the sub-account/location"
          },
          "phone": {
            "type": "string",
            "description": "Updated phone number"
          },
          "state": {
            "type": "string",
            "description": "Updated state"
          },
          "address": {
            "type": "string",
            "description": "Updated business address"
          },
          "country": {
            "type": "string",
            "description": "Updated 2-letter country code"
          },
          "website": {
            "type": "string",
            "description": "Updated website URL"
          },
          "timezone": {
            "type": "string",
            "description": "Updated timezone"
          },
          "companyId": {
            "type": "string",
            "description": "Company/Agency ID"
          },
          "locationId": {
            "type": "string",
            "description": "The unique ID of the location to update"
          },
          "postalCode": {
            "type": "string",
            "description": "Updated postal/ZIP code"
          }
        }
      }
    },
    {
      "name": "delete_location",
      "description": "Delete a sub-account/location from GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "deleteTwilioAccount"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The unique ID of the location to delete"
          },
          "deleteTwilioAccount": {
            "type": "boolean",
            "default": false,
            "description": "Whether to delete associated Twilio account"
          }
        }
      }
    },
    {
      "name": "get_location_tags",
      "description": "Get all tags for a specific location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID to get tags from"
          }
        }
      }
    },
    {
      "name": "create_location_tag",
      "description": "Create a new tag for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the tag to create"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID to create tag in"
          }
        }
      }
    },
    {
      "name": "get_location_tag",
      "description": "Get a specific location tag by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "description": "The tag ID to retrieve"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "update_location_tag",
      "description": "Update an existing location tag",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "tagId",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name for the tag"
          },
          "tagId": {
            "type": "string",
            "description": "The tag ID to update"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "delete_location_tag",
      "description": "Delete a location tag",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "tagId"
        ],
        "properties": {
          "tagId": {
            "type": "string",
            "description": "The tag ID to delete"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "search_location_tasks",
      "description": "Search tasks within a location with advanced filtering",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number of tasks to skip for pagination (default: 0)"
          },
          "limit": {
            "type": "number",
            "default": 25,
            "description": "Maximum number of tasks to return (default: 25)"
          },
          "query": {
            "type": "string",
            "description": "Search query for task content"
          },
          "completed": {
            "type": "boolean",
            "description": "Filter by completion status"
          },
          "contactId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by specific contact IDs"
          },
          "assignedTo": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter by assigned user IDs"
          },
          "businessId": {
            "type": "string",
            "description": "Business ID filter"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID to search tasks in"
          }
        }
      }
    },
    {
      "name": "get_location_custom_fields",
      "description": "Get custom fields for a location, optionally filtered by model type",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "model": {
            "enum": [
              "contact",
              "opportunity",
              "all"
            ],
            "type": "string",
            "default": "all",
            "description": "Filter by model type (default: all)"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "create_location_custom_field",
      "description": "Create a new custom field for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "name",
          "dataType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the custom field"
          },
          "model": {
            "enum": [
              "contact",
              "opportunity"
            ],
            "type": "string",
            "default": "contact",
            "description": "Model to create the field for"
          },
          "dataType": {
            "type": "string",
            "description": "Data type of the field (TEXT, NUMBER, DATE, etc.)"
          },
          "position": {
            "type": "number",
            "default": 0,
            "description": "Position/order of the field (default: 0)"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          }
        }
      }
    },
    {
      "name": "get_location_custom_field",
      "description": "Get a specific custom field by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "customFieldId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "customFieldId": {
            "type": "string",
            "description": "The custom field ID to retrieve"
          }
        }
      }
    },
    {
      "name": "update_location_custom_field",
      "description": "Update an existing custom field",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "customFieldId",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the custom field"
          },
          "position": {
            "type": "number",
            "description": "Updated position/order"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "placeholder": {
            "type": "string",
            "description": "Updated placeholder text"
          },
          "customFieldId": {
            "type": "string",
            "description": "The custom field ID to update"
          }
        }
      }
    },
    {
      "name": "delete_location_custom_field",
      "description": "Delete a custom field from a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "customFieldId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "customFieldId": {
            "type": "string",
            "description": "The custom field ID to delete"
          }
        }
      }
    },
    {
      "name": "get_location_custom_values",
      "description": "Get all custom values for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "create_location_custom_value",
      "description": "Create a new custom value for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the custom value field"
          },
          "value": {
            "type": "string",
            "description": "Value to assign"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "get_location_custom_value",
      "description": "Get a specific custom value by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "customValueId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "customValueId": {
            "type": "string",
            "description": "The custom value ID to retrieve"
          }
        }
      }
    },
    {
      "name": "update_location_custom_value",
      "description": "Update an existing custom value",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "customValueId",
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name"
          },
          "value": {
            "type": "string",
            "description": "Updated value"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "customValueId": {
            "type": "string",
            "description": "The custom value ID to update"
          }
        }
      }
    },
    {
      "name": "delete_location_custom_value",
      "description": "Delete a custom value from a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "customValueId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "customValueId": {
            "type": "string",
            "description": "The custom value ID to delete"
          }
        }
      }
    },
    {
      "name": "get_location_templates",
      "description": "Get SMS/Email templates for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "originId"
        ],
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number to skip for pagination (default: 0)"
          },
          "type": {
            "enum": [
              "sms",
              "email",
              "whatsapp"
            ],
            "type": "string",
            "description": "Filter by template type"
          },
          "limit": {
            "type": "number",
            "default": 25,
            "description": "Maximum number to return (default: 25)"
          },
          "deleted": {
            "type": "boolean",
            "default": false,
            "description": "Include deleted templates (default: false)"
          },
          "originId": {
            "type": "string",
            "description": "Origin ID (required parameter)"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID"
          }
        }
      }
    },
    {
      "name": "delete_location_template",
      "description": "Delete a template from a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "templateId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID"
          },
          "templateId": {
            "type": "string",
            "description": "The template ID to delete"
          }
        }
      }
    },
    {
      "name": "get_timezones",
      "description": "Get available timezones for location configuration",
      "inputSchema": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Optional location ID"
          }
        }
      }
    },
    {
      "name": "verify_email",
      "description": "Verify email address deliverability and get risk assessment. Charges will be deducted from the specified location wallet.",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "type",
          "verify"
        ],
        "properties": {
          "type": {
            "enum": [
              "email",
              "contact"
            ],
            "type": "string",
            "description": "Verification type: \"email\" for direct email verification, \"contact\" for contact ID verification"
          },
          "verify": {
            "type": "string",
            "description": "Email address to verify (if type=email) or contact ID (if type=contact)"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID - charges will be deducted from this location wallet"
          }
        }
      }
    },
    {
      "name": "search_social_posts",
      "description": "Search and filter social media posts across all platforms",
      "inputSchema": {
        "type": "object",
        "required": [
          "fromDate",
          "toDate"
        ],
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number of posts to skip"
          },
          "type": {
            "enum": [
              "recent",
              "all",
              "scheduled",
              "draft",
              "failed",
              "in_review",
              "published",
              "in_progress",
              "deleted"
            ],
            "type": "string",
            "default": "all",
            "description": "Filter posts by status"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number of posts to return"
          },
          "toDate": {
            "type": "string",
            "description": "End date (ISO format)"
          },
          "accounts": {
            "type": "string",
            "description": "Comma-separated account IDs to filter by"
          },
          "fromDate": {
            "type": "string",
            "description": "Start date (ISO format)"
          },
          "postType": {
            "enum": [
              "post",
              "story",
              "reel"
            ],
            "type": "string",
            "description": "Type of post to search for"
          },
          "includeUsers": {
            "type": "boolean",
            "default": true,
            "description": "Include user data in response"
          }
        }
      }
    },
    {
      "name": "create_social_post",
      "description": "Create a new social media post for multiple platforms",
      "inputSchema": {
        "type": "object",
        "required": [
          "accountIds",
          "summary",
          "type"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tag IDs to associate with post"
          },
          "type": {
            "enum": [
              "post",
              "story",
              "reel"
            ],
            "type": "string",
            "description": "Type of post"
          },
          "media": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "url"
              ],
              "properties": {
                "url": {
                  "type": "string",
                  "description": "Media URL"
                },
                "type": {
                  "type": "string",
                  "description": "Media MIME type"
                },
                "caption": {
                  "type": "string",
                  "description": "Media caption"
                }
              }
            },
            "description": "Media attachments"
          },
          "status": {
            "enum": [
              "draft",
              "scheduled",
              "published"
            ],
            "type": "string",
            "default": "draft",
            "description": "Post status"
          },
          "userId": {
            "type": "string",
            "description": "User ID creating the post"
          },
          "summary": {
            "type": "string",
            "description": "Post content/text"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of social media account IDs to post to"
          },
          "categoryId": {
            "type": "string",
            "description": "Category ID"
          },
          "scheduleDate": {
            "type": "string",
            "description": "Schedule date for post (ISO format)"
          },
          "followUpComment": {
            "type": "string",
            "description": "Follow-up comment"
          }
        }
      }
    },
    {
      "name": "get_social_post",
      "description": "Get details of a specific social media post",
      "inputSchema": {
        "type": "object",
        "required": [
          "postId"
        ],
        "properties": {
          "postId": {
            "type": "string",
            "description": "Social media post ID"
          }
        }
      }
    },
    {
      "name": "update_social_post",
      "description": "Update an existing social media post",
      "inputSchema": {
        "type": "object",
        "required": [
          "postId"
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Updated tag IDs"
          },
          "postId": {
            "type": "string",
            "description": "Social media post ID"
          },
          "status": {
            "enum": [
              "draft",
              "scheduled",
              "published"
            ],
            "type": "string",
            "description": "Updated post status"
          },
          "summary": {
            "type": "string",
            "description": "Updated post content"
          },
          "scheduleDate": {
            "type": "string",
            "description": "Updated schedule date"
          }
        }
      }
    },
    {
      "name": "delete_social_post",
      "description": "Delete a social media post",
      "inputSchema": {
        "type": "object",
        "required": [
          "postId"
        ],
        "properties": {
          "postId": {
            "type": "string",
            "description": "Social media post ID to delete"
          }
        }
      }
    },
    {
      "name": "bulk_delete_social_posts",
      "description": "Delete multiple social media posts at once (max 50)",
      "inputSchema": {
        "type": "object",
        "required": [
          "postIds"
        ],
        "properties": {
          "postIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 50,
            "description": "Array of post IDs to delete"
          }
        }
      }
    },
    {
      "name": "get_social_accounts",
      "description": "Get all connected social media accounts and groups",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "delete_social_account",
      "description": "Delete a social media account connection",
      "inputSchema": {
        "type": "object",
        "required": [
          "accountId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "accountId": {
            "type": "string",
            "description": "Account ID to delete"
          },
          "companyId": {
            "type": "string",
            "description": "Company ID"
          }
        }
      }
    },
    {
      "name": "upload_social_csv",
      "description": "Upload CSV file for bulk social media posts",
      "inputSchema": {
        "type": "object",
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "CSV file data (base64 or file path)"
          }
        }
      }
    },
    {
      "name": "get_csv_upload_status",
      "description": "Get status of CSV uploads",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number to skip"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number to return"
          },
          "userId": {
            "type": "string",
            "description": "Filter by user ID"
          },
          "includeUsers": {
            "type": "boolean",
            "description": "Include user data"
          }
        }
      }
    },
    {
      "name": "set_csv_accounts",
      "description": "Set accounts for CSV import processing",
      "inputSchema": {
        "type": "object",
        "required": [
          "accountIds",
          "filePath",
          "rowsCount",
          "fileName"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID"
          },
          "approver": {
            "type": "string",
            "description": "Approver user ID"
          },
          "fileName": {
            "type": "string",
            "description": "CSV file name"
          },
          "filePath": {
            "type": "string",
            "description": "CSV file path"
          },
          "rowsCount": {
            "type": "number",
            "description": "Number of rows to process"
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Account IDs for CSV import"
          }
        }
      }
    },
    {
      "name": "get_social_categories",
      "description": "Get social media post categories",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number to skip"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number to return"
          },
          "searchText": {
            "type": "string",
            "description": "Search for categories"
          }
        }
      }
    },
    {
      "name": "get_social_category",
      "description": "Get a specific social media category by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "categoryId"
        ],
        "properties": {
          "categoryId": {
            "type": "string",
            "description": "Category ID"
          }
        }
      }
    },
    {
      "name": "get_social_tags",
      "description": "Get social media post tags",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number to skip"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number to return"
          },
          "searchText": {
            "type": "string",
            "description": "Search for tags"
          }
        }
      }
    },
    {
      "name": "get_social_tags_by_ids",
      "description": "Get specific social media tags by their IDs",
      "inputSchema": {
        "type": "object",
        "required": [
          "tagIds"
        ],
        "properties": {
          "tagIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of tag IDs"
          }
        }
      }
    },
    {
      "name": "start_social_oauth",
      "description": "Start OAuth process for social media platform",
      "inputSchema": {
        "type": "object",
        "required": [
          "platform",
          "userId"
        ],
        "properties": {
          "page": {
            "type": "string",
            "description": "Page context"
          },
          "userId": {
            "type": "string",
            "description": "User ID initiating OAuth"
          },
          "platform": {
            "enum": [
              "google",
              "facebook",
              "instagram",
              "linkedin",
              "twitter",
              "tiktok",
              "tiktok-business"
            ],
            "type": "string",
            "description": "Social media platform"
          },
          "reconnect": {
            "type": "boolean",
            "description": "Whether this is a reconnection"
          }
        }
      }
    },
    {
      "name": "get_platform_accounts",
      "description": "Get available accounts for a specific platform after OAuth",
      "inputSchema": {
        "type": "object",
        "required": [
          "platform",
          "accountId"
        ],
        "properties": {
          "platform": {
            "enum": [
              "google",
              "facebook",
              "instagram",
              "linkedin",
              "twitter",
              "tiktok",
              "tiktok-business"
            ],
            "type": "string",
            "description": "Social media platform"
          },
          "accountId": {
            "type": "string",
            "description": "OAuth account ID"
          }
        }
      }
    },
    {
      "name": "get_media_files",
      "description": "Get list of files and folders from the media library with filtering and search capabilities",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "type": {
            "enum": [
              "file",
              "folder"
            ],
            "type": "string",
            "description": "Filter by type (file or folder)"
          },
          "altId": {
            "type": "string",
            "description": "Location or Agency ID (uses default location if not provided)"
          },
          "limit": {
            "type": "number",
            "maximum": 100,
            "minimum": 1,
            "description": "Number of files to show in the listing (max 100)"
          },
          "query": {
            "type": "string",
            "description": "Search query text to filter files by name"
          },
          "offset": {
            "type": "number",
            "minimum": 0,
            "description": "Number of files to skip in listing"
          },
          "sortBy": {
            "type": "string",
            "default": "createdAt",
            "description": "Field to sort the file listing by (e.g., createdAt, name, size)"
          },
          "altType": {
            "enum": [
              "location",
              "agency"
            ],
            "type": "string",
            "default": "location",
            "description": "Context type (location or agency)"
          },
          "parentId": {
            "type": "string",
            "description": "Parent folder ID to list files within a specific folder"
          },
          "sortOrder": {
            "enum": [
              "asc",
              "desc"
            ],
            "type": "string",
            "default": "desc",
            "description": "Direction to sort files (asc or desc)"
          }
        }
      }
    },
    {
      "name": "upload_media_file",
      "description": "Upload a file to the media library or add a hosted file URL (max 25MB for direct uploads)",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "file": {
            "type": "string",
            "description": "File data (binary) for direct upload"
          },
          "name": {
            "type": "string",
            "description": "Custom name for the uploaded file"
          },
          "altId": {
            "type": "string",
            "description": "Location or Agency ID (uses default location if not provided)"
          },
          "hosted": {
            "type": "boolean",
            "default": false,
            "description": "Set to true if providing a fileUrl instead of direct file upload"
          },
          "altType": {
            "enum": [
              "location",
              "agency"
            ],
            "type": "string",
            "default": "location",
            "description": "Context type (location or agency)"
          },
          "fileUrl": {
            "type": "string",
            "description": "URL of hosted file (required if hosted=true)"
          },
          "parentId": {
            "type": "string",
            "description": "Parent folder ID to upload file into"
          }
        }
      }
    },
    {
      "name": "delete_media_file",
      "description": "Delete a specific file or folder from the media library",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the file or folder to delete"
          },
          "altId": {
            "type": "string",
            "description": "Location or Agency ID (uses default location if not provided)"
          },
          "altType": {
            "enum": [
              "location",
              "agency"
            ],
            "type": "string",
            "default": "location",
            "description": "Context type (location or agency)"
          }
        }
      }
    },
    {
      "name": "get_all_objects",
      "description": "Get all objects (custom and standard) for a location including contact, opportunity, business, and custom objects",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "create_object_schema",
      "description": "Create a new custom object schema with labels, key, and primary display property",
      "inputSchema": {
        "type": "object",
        "required": [
          "labels",
          "key",
          "primaryDisplayPropertyDetails"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the object (e.g., \"custom_objects.pet\"). The \"custom_objects.\" prefix is added automatically if not included"
          },
          "labels": {
            "type": "object",
            "required": [
              "singular",
              "plural"
            ],
            "properties": {
              "plural": {
                "type": "string",
                "description": "Plural name (e.g., \"Pets\")"
              },
              "singular": {
                "type": "string",
                "description": "Singular name (e.g., \"Pet\")"
              }
            },
            "description": "Singular and plural names for the custom object"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          },
          "description": {
            "type": "string",
            "description": "Description of the custom object"
          },
          "primaryDisplayPropertyDetails": {
            "type": "object",
            "required": [
              "key",
              "name",
              "dataType"
            ],
            "properties": {
              "key": {
                "type": "string",
                "description": "Property key (e.g., \"custom_objects.pet.name\")"
              },
              "name": {
                "type": "string",
                "description": "Display name (e.g., \"Pet Name\")"
              },
              "dataType": {
                "enum": [
                  "TEXT",
                  "NUMERICAL"
                ],
                "type": "string",
                "description": "Data type (TEXT or NUMERICAL)"
              }
            },
            "description": "Primary property configuration for display"
          }
        }
      }
    },
    {
      "name": "get_object_schema",
      "description": "Get object schema details by key including all fields and properties for custom or standard objects",
      "inputSchema": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Object key (e.g., \"custom_objects.pet\" for custom objects, \"contact\" for standard objects)"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          },
          "fetchProperties": {
            "type": "boolean",
            "default": true,
            "description": "Whether to fetch all standard/custom fields of the object"
          }
        }
      }
    },
    {
      "name": "update_object_schema",
      "description": "Update object schema properties including labels, description, and searchable fields",
      "inputSchema": {
        "type": "object",
        "required": [
          "key",
          "searchableProperties"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Object key to update"
          },
          "labels": {
            "type": "object",
            "properties": {
              "plural": {
                "type": "string",
                "description": "Updated plural name"
              },
              "singular": {
                "type": "string",
                "description": "Updated singular name"
              }
            },
            "description": "Updated singular and plural names (optional)"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          },
          "description": {
            "type": "string",
            "description": "Updated description"
          },
          "searchableProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of field keys that should be searchable (e.g., [\"custom_objects.pet.name\", \"custom_objects.pet.breed\"])"
          }
        }
      }
    },
    {
      "name": "create_object_record",
      "description": "Create a new record in a custom or standard object with properties, owner, and followers",
      "inputSchema": {
        "type": "object",
        "required": [
          "schemaKey",
          "properties"
        ],
        "properties": {
          "owner": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 1,
            "description": "Array of user IDs who own this record (limited to 1, only for custom objects)"
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10,
            "description": "Array of user IDs who follow this record (limited to 10)"
          },
          "schemaKey": {
            "type": "string",
            "description": "Schema key of the object (e.g., \"custom_objects.pet\", \"business\")"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          },
          "properties": {
            "type": "object",
            "description": "Record properties as key-value pairs (e.g., {\"name\": \"Buddy\", \"breed\": \"Golden Retriever\"})"
          }
        }
      }
    },
    {
      "name": "get_object_record",
      "description": "Get a specific record by ID from a custom or standard object",
      "inputSchema": {
        "type": "object",
        "required": [
          "schemaKey",
          "recordId"
        ],
        "properties": {
          "recordId": {
            "type": "string",
            "description": "ID of the record to retrieve"
          },
          "schemaKey": {
            "type": "string",
            "description": "Schema key of the object"
          }
        }
      }
    },
    {
      "name": "update_object_record",
      "description": "Update an existing record in a custom or standard object",
      "inputSchema": {
        "type": "object",
        "required": [
          "schemaKey",
          "recordId"
        ],
        "properties": {
          "owner": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 1,
            "description": "Updated array of user IDs who own this record"
          },
          "recordId": {
            "type": "string",
            "description": "ID of the record to update"
          },
          "followers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "maxItems": 10,
            "description": "Updated array of user IDs who follow this record"
          },
          "schemaKey": {
            "type": "string",
            "description": "Schema key of the object"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          },
          "properties": {
            "type": "object",
            "description": "Updated record properties as key-value pairs"
          }
        }
      }
    },
    {
      "name": "delete_object_record",
      "description": "Delete a record from a custom or standard object",
      "inputSchema": {
        "type": "object",
        "required": [
          "schemaKey",
          "recordId"
        ],
        "properties": {
          "recordId": {
            "type": "string",
            "description": "ID of the record to delete"
          },
          "schemaKey": {
            "type": "string",
            "description": "Schema key of the object"
          }
        }
      }
    },
    {
      "name": "search_object_records",
      "description": "Search records within a custom or standard object using searchable properties",
      "inputSchema": {
        "type": "object",
        "required": [
          "schemaKey",
          "query"
        ],
        "properties": {
          "page": {
            "type": "number",
            "default": 1,
            "minimum": 1,
            "description": "Page number for pagination"
          },
          "query": {
            "type": "string",
            "description": "Search query using searchable properties (e.g., \"name:Buddy\" to search for records with name Buddy)"
          },
          "pageLimit": {
            "type": "number",
            "default": 10,
            "maximum": 100,
            "minimum": 1,
            "description": "Number of records per page"
          },
          "schemaKey": {
            "type": "string",
            "description": "Schema key of the object to search in"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (uses default if not provided)"
          },
          "searchAfter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Cursor for pagination (returned from previous search)"
          }
        }
      }
    },
    {
      "name": "ghl_get_all_associations",
      "description": "Get all associations for a sub-account/location with pagination. Returns system-defined and user-defined associations.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number of records to skip for pagination"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Maximum number of records to return (max 100)"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_create_association",
      "description": "Create a new association that defines relationship types between entities like contacts, custom objects, and opportunities.",
      "inputSchema": {
        "type": "object",
        "required": [
          "key",
          "firstObjectLabel",
          "firstObjectKey",
          "secondObjectLabel",
          "secondObjectKey"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the association (e.g., \"student_teacher\")"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          },
          "firstObjectKey": {
            "description": "Key for the first object (e.g., \"custom_objects.children\")"
          },
          "secondObjectKey": {
            "description": "Key for the second object (e.g., \"contact\")"
          },
          "firstObjectLabel": {
            "description": "Label for the first object in the association (e.g., \"student\")"
          },
          "secondObjectLabel": {
            "description": "Label for the second object in the association (e.g., \"teacher\")"
          }
        }
      }
    },
    {
      "name": "ghl_get_association_by_id",
      "description": "Get a specific association by its ID. Works for both system-defined and user-defined associations.",
      "inputSchema": {
        "type": "object",
        "required": [
          "associationId"
        ],
        "properties": {
          "associationId": {
            "type": "string",
            "description": "The ID of the association to retrieve"
          }
        }
      }
    },
    {
      "name": "ghl_update_association",
      "description": "Update the labels of an existing association. Only user-defined associations can be updated.",
      "inputSchema": {
        "type": "object",
        "required": [
          "associationId",
          "firstObjectLabel",
          "secondObjectLabel"
        ],
        "properties": {
          "associationId": {
            "type": "string",
            "description": "The ID of the association to update"
          },
          "firstObjectLabel": {
            "description": "New label for the first object in the association"
          },
          "secondObjectLabel": {
            "description": "New label for the second object in the association"
          }
        }
      }
    },
    {
      "name": "ghl_delete_association",
      "description": "Delete a user-defined association. This will also delete all relations created with this association.",
      "inputSchema": {
        "type": "object",
        "required": [
          "associationId"
        ],
        "properties": {
          "associationId": {
            "type": "string",
            "description": "The ID of the association to delete"
          }
        }
      }
    },
    {
      "name": "ghl_get_association_by_key",
      "description": "Get an association by its key name. Useful for finding both standard and user-defined associations.",
      "inputSchema": {
        "type": "object",
        "required": [
          "keyName"
        ],
        "properties": {
          "keyName": {
            "type": "string",
            "description": "The key name of the association to retrieve"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_get_association_by_object_key",
      "description": "Get associations by object keys like contacts, custom objects, and opportunities.",
      "inputSchema": {
        "type": "object",
        "required": [
          "objectKey"
        ],
        "properties": {
          "objectKey": {
            "type": "string",
            "description": "The object key to search for (e.g., \"custom_objects.car\", \"contact\", \"opportunity\")"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (optional)"
          }
        }
      }
    },
    {
      "name": "ghl_create_relation",
      "description": "Create a relation between two entities using an existing association. Links specific records together.",
      "inputSchema": {
        "type": "object",
        "required": [
          "associationId",
          "firstRecordId",
          "secondRecordId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          },
          "associationId": {
            "type": "string",
            "description": "The ID of the association to use for this relation"
          },
          "firstRecordId": {
            "type": "string",
            "description": "ID of the first record (e.g., contact ID if contact is first object in association)"
          },
          "secondRecordId": {
            "type": "string",
            "description": "ID of the second record (e.g., custom object record ID if custom object is second object)"
          }
        }
      }
    },
    {
      "name": "ghl_get_relations_by_record",
      "description": "Get all relations for a specific record ID with pagination and optional filtering by association IDs.",
      "inputSchema": {
        "type": "object",
        "required": [
          "recordId"
        ],
        "properties": {
          "skip": {
            "type": "number",
            "default": 0,
            "description": "Number of records to skip for pagination"
          },
          "limit": {
            "type": "number",
            "default": 20,
            "description": "Maximum number of records to return"
          },
          "recordId": {
            "type": "string",
            "description": "The record ID to get relations for"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          },
          "associationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of association IDs to filter relations"
          }
        }
      }
    },
    {
      "name": "ghl_delete_relation",
      "description": "Delete a specific relation between two entities.",
      "inputSchema": {
        "type": "object",
        "required": [
          "relationId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          },
          "relationId": {
            "type": "string",
            "description": "The ID of the relation to delete"
          }
        }
      }
    },
    {
      "name": "ghl_get_custom_field_by_id",
      "description": "Get a custom field or folder by its ID. Supports custom objects and company (business) fields.",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the custom field or folder to retrieve"
          }
        }
      }
    },
    {
      "name": "ghl_create_custom_field",
      "description": "Create a new custom field for custom objects or company (business). Supports various field types including text, number, options, date, file upload, etc.",
      "inputSchema": {
        "type": "object",
        "required": [
          "dataType",
          "fieldKey",
          "objectKey",
          "parentId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Field name (optional for some field types)"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "key",
                "label"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key of the option"
                },
                "url": {
                  "type": "string",
                  "description": "URL associated with the option (only for RADIO type)"
                },
                "label": {
                  "type": "string",
                  "description": "Label of the option"
                }
              }
            },
            "description": "Options for the field (required for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST types)"
          },
          "dataType": {
            "enum": [
              "TEXT",
              "LARGE_TEXT",
              "NUMERICAL",
              "PHONE",
              "MONETORY",
              "CHECKBOX",
              "SINGLE_OPTIONS",
              "MULTIPLE_OPTIONS",
              "DATE",
              "TEXTBOX_LIST",
              "FILE_UPLOAD",
              "RADIO",
              "EMAIL"
            ],
            "type": "string",
            "description": "Type of field to create"
          },
          "fieldKey": {
            "type": "string",
            "description": "Field key. Format: \"custom_object.{objectKey}.{fieldKey}\" for custom objects. Example: \"custom_object.pet.name\""
          },
          "parentId": {
            "type": "string",
            "description": "ID of the parent folder for organization"
          },
          "objectKey": {
            "type": "string",
            "description": "The object key. Format: \"custom_object.{objectKey}\" for custom objects. Example: \"custom_object.pet\""
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "showInForms": {
            "type": "boolean",
            "default": true,
            "description": "Whether the field should be shown in forms"
          },
          "maxFileLimit": {
            "type": "number",
            "description": "Maximum file limit for uploads (only for FILE_UPLOAD type)"
          },
          "acceptedFormats": {
            "enum": [
              ".pdf",
              ".docx",
              ".doc",
              ".jpg",
              ".jpeg",
              ".png",
              ".gif",
              ".csv",
              ".xlsx",
              ".xls",
              "all"
            ],
            "type": "string",
            "description": "Allowed file formats for uploads (only for FILE_UPLOAD type)"
          },
          "allowCustomOption": {
            "type": "boolean",
            "description": "Allow users to add custom option values for RADIO type fields"
          }
        }
      }
    },
    {
      "name": "ghl_update_custom_field",
      "description": "Update an existing custom field by ID. Can modify name, description, options, and other properties.",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the custom field to update"
          },
          "name": {
            "type": "string",
            "description": "Updated field name"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "key",
                "label"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key of the option"
                },
                "url": {
                  "type": "string",
                  "description": "URL associated with the option (only for RADIO type)"
                },
                "label": {
                  "type": "string",
                  "description": "Label of the option"
                }
              }
            },
            "description": "Updated options (replaces all existing options - include all options you want to keep)"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          },
          "description": {
            "type": "string",
            "description": "Updated description of the field"
          },
          "placeholder": {
            "type": "string",
            "description": "Updated placeholder text for the field"
          },
          "showInForms": {
            "type": "boolean",
            "description": "Whether the field should be shown in forms"
          },
          "maxFileLimit": {
            "type": "number",
            "description": "Updated maximum file limit for uploads"
          },
          "acceptedFormats": {
            "enum": [
              ".pdf",
              ".docx",
              ".doc",
              ".jpg",
              ".jpeg",
              ".png",
              ".gif",
              ".csv",
              ".xlsx",
              ".xls",
              "all"
            ],
            "type": "string",
            "description": "Updated allowed file formats for uploads"
          }
        }
      }
    },
    {
      "name": "ghl_delete_custom_field",
      "description": "Delete a custom field by ID. This will permanently remove the field and its data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the custom field to delete"
          }
        }
      }
    },
    {
      "name": "ghl_get_custom_fields_by_object_key",
      "description": "Get all custom fields and folders for a specific object key (e.g., custom object or company).",
      "inputSchema": {
        "type": "object",
        "required": [
          "objectKey"
        ],
        "properties": {
          "objectKey": {
            "type": "string",
            "description": "Object key to get fields for. Format: \"custom_object.{objectKey}\" for custom objects. Example: \"custom_object.pet\""
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_create_custom_field_folder",
      "description": "Create a new custom field folder for organizing fields within an object.",
      "inputSchema": {
        "type": "object",
        "required": [
          "objectKey",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the folder"
          },
          "objectKey": {
            "type": "string",
            "description": "Object key for the folder. Format: \"custom_object.{objectKey}\" for custom objects. Example: \"custom_object.pet\""
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_update_custom_field_folder",
      "description": "Update the name of an existing custom field folder.",
      "inputSchema": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the folder to update"
          },
          "name": {
            "type": "string",
            "description": "New name for the folder"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_delete_custom_field_folder",
      "description": "Delete a custom field folder. This will also affect any fields within the folder.",
      "inputSchema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the folder to delete"
          },
          "locationId": {
            "type": "string",
            "description": "GoHighLevel location ID (will use default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_get_workflows",
      "description": "Retrieve all workflows for a location. Workflows represent automation sequences that can be triggered by various events in the system.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "The location ID to get workflows for. If not provided, uses the default location from configuration."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "ghl_get_surveys",
      "description": "Retrieve all surveys for a location. Surveys are used to collect information from contacts through forms and questionnaires.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "number",
            "description": "Number of records to skip for pagination (default: 0)"
          },
          "type": {
            "type": "string",
            "description": "Filter surveys by type (e.g., \"folder\")"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of surveys to return (max: 50, default: 10)"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID to get surveys for. If not provided, uses the default location from configuration."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "ghl_get_survey_submissions",
      "description": "Retrieve survey submissions with advanced filtering and pagination. Get responses from contacts who have completed surveys.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "q": {
            "type": "string",
            "description": "Search by contact ID, name, email, or phone number"
          },
          "page": {
            "type": "number",
            "description": "Page number for pagination (default: 1)"
          },
          "endAt": {
            "type": "string",
            "description": "End date for filtering submissions (YYYY-MM-DD format)"
          },
          "limit": {
            "type": "number",
            "description": "Number of submissions per page (max: 100, default: 20)"
          },
          "startAt": {
            "type": "string",
            "description": "Start date for filtering submissions (YYYY-MM-DD format)"
          },
          "surveyId": {
            "type": "string",
            "description": "Filter submissions by specific survey ID"
          },
          "locationId": {
            "type": "string",
            "description": "The location ID to get submissions for. If not provided, uses the default location from configuration."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "ghl_create_shipping_zone",
      "description": "Create a new shipping zone with specific countries and states",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "countries"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping zone"
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Country code (e.g., US, CA)"
                },
                "states": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "State code (e.g., CA, NY)"
                      }
                    }
                  },
                  "description": "Optional array of state codes for this country"
                }
              }
            },
            "description": "Array of countries with optional state restrictions"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_list_shipping_zones",
      "description": "List all shipping zones for a location",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number",
            "description": "Number of zones to return (optional)"
          },
          "offset": {
            "type": "number",
            "description": "Number of zones to skip (optional)"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "withShippingRate": {
            "type": "boolean",
            "description": "Include shipping rates in response (optional)"
          }
        }
      }
    },
    {
      "name": "ghl_get_shipping_zone",
      "description": "Get details of a specific shipping zone",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone to retrieve"
          },
          "withShippingRate": {
            "type": "boolean",
            "description": "Include shipping rates in response (optional)"
          }
        }
      }
    },
    {
      "name": "ghl_update_shipping_zone",
      "description": "Update a shipping zone's name or countries",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the shipping zone (optional)"
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "code"
              ],
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Country code (e.g., US, CA)"
                },
                "states": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "code"
                    ],
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "State code (e.g., CA, NY)"
                      }
                    }
                  },
                  "description": "Optional array of state codes for this country"
                }
              }
            },
            "description": "Updated array of countries with optional state restrictions (optional)"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone to update"
          }
        }
      }
    },
    {
      "name": "ghl_delete_shipping_zone",
      "description": "Delete a shipping zone and all its associated shipping rates",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone to delete"
          }
        }
      }
    },
    {
      "name": "ghl_get_available_shipping_rates",
      "description": "Get available shipping rates for an order based on destination and order details",
      "inputSchema": {
        "type": "object",
        "required": [
          "country",
          "address",
          "totalOrderAmount",
          "totalOrderWeight",
          "products"
        ],
        "properties": {
          "address": {
            "type": "object",
            "required": [
              "street1",
              "city",
              "country"
            ],
            "properties": {
              "city": {
                "type": "string",
                "description": "City"
              },
              "country": {
                "type": "string",
                "description": "Country code"
              },
              "street1": {
                "type": "string",
                "description": "Street address line 1"
              }
            },
            "description": "Shipping address details"
          },
          "country": {
            "type": "string",
            "description": "Destination country code"
          },
          "products": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "id",
                "quantity"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Product ID"
                },
                "quantity": {
                  "type": "number",
                  "description": "Product quantity"
                }
              }
            },
            "description": "Array of products in the order"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "totalOrderAmount": {
            "type": "number",
            "description": "Total order amount"
          },
          "totalOrderWeight": {
            "type": "number",
            "description": "Total order weight"
          }
        }
      }
    },
    {
      "name": "ghl_create_shipping_rate",
      "description": "Create a new shipping rate for a shipping zone",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId",
          "name",
          "currency",
          "amount",
          "conditionType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping rate"
          },
          "amount": {
            "type": "number",
            "description": "Shipping rate amount"
          },
          "currency": {
            "type": "string",
            "description": "Currency code (e.g., USD)"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "conditionType": {
            "type": "string",
            "description": "Condition type for rate calculation"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone"
          }
        }
      }
    },
    {
      "name": "ghl_list_shipping_rates",
      "description": "List all shipping rates for a specific shipping zone",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone"
          }
        }
      }
    },
    {
      "name": "ghl_get_shipping_rate",
      "description": "Get details of a specific shipping rate",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId",
          "shippingRateId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingRateId": {
            "type": "string",
            "description": "ID of the shipping rate to retrieve"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone"
          }
        }
      }
    },
    {
      "name": "ghl_update_shipping_rate",
      "description": "Update a shipping rate's properties",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId",
          "shippingRateId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingRateId": {
            "type": "string",
            "description": "ID of the shipping rate to update"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone"
          }
        }
      }
    },
    {
      "name": "ghl_delete_shipping_rate",
      "description": "Delete a shipping rate",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingZoneId",
          "shippingRateId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingRateId": {
            "type": "string",
            "description": "ID of the shipping rate to delete"
          },
          "shippingZoneId": {
            "type": "string",
            "description": "ID of the shipping zone"
          }
        }
      }
    },
    {
      "name": "ghl_create_shipping_carrier",
      "description": "Create a new shipping carrier for dynamic rate calculation",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "callbackUrl",
          "services"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the shipping carrier"
          },
          "services": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "value"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Service name"
                },
                "value": {
                  "type": "string",
                  "description": "Service value"
                }
              }
            },
            "description": "Array of available services"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "callbackUrl": {
            "type": "string",
            "description": "Callback URL for carrier rate requests"
          }
        }
      }
    },
    {
      "name": "ghl_list_shipping_carriers",
      "description": "List all shipping carriers for a location",
      "inputSchema": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_get_shipping_carrier",
      "description": "Get details of a specific shipping carrier",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingCarrierId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "ID of the shipping carrier to retrieve"
          }
        }
      }
    },
    {
      "name": "ghl_update_shipping_carrier",
      "description": "Update a shipping carrier's properties",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingCarrierId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "ID of the shipping carrier to update"
          }
        }
      }
    },
    {
      "name": "ghl_delete_shipping_carrier",
      "description": "Delete a shipping carrier",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingCarrierId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingCarrierId": {
            "type": "string",
            "description": "ID of the shipping carrier to delete"
          }
        }
      }
    },
    {
      "name": "ghl_create_store_setting",
      "description": "Create or update store settings including shipping origin and notifications",
      "inputSchema": {
        "type": "object",
        "required": [
          "shippingOrigin"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "shippingOrigin": {
            "type": "object",
            "required": [
              "name",
              "street1",
              "city",
              "zip",
              "country"
            ],
            "properties": {
              "zip": {
                "type": "string",
                "description": "Postal/ZIP code"
              },
              "city": {
                "type": "string",
                "description": "City"
              },
              "name": {
                "type": "string",
                "description": "Business name"
              },
              "country": {
                "type": "string",
                "description": "Country code"
              },
              "street1": {
                "type": "string",
                "description": "Street address line 1"
              }
            },
            "description": "Shipping origin address details"
          }
        }
      }
    },
    {
      "name": "ghl_get_store_setting",
      "description": "Get current store settings",
      "inputSchema": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_create_product",
      "description": "Create a new product in GoHighLevel",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "productType"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "slug": {
            "type": "string",
            "description": "Product URL slug"
          },
          "image": {
            "type": "string",
            "description": "Product image URL"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "description": {
            "type": "string",
            "description": "Product description"
          },
          "productType": {
            "enum": [
              "DIGITAL",
              "PHYSICAL",
              "SERVICE",
              "PHYSICAL/DIGITAL"
            ],
            "type": "string",
            "description": "Type of product"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Whether product is available in store"
          }
        }
      }
    },
    {
      "name": "ghl_list_products",
      "description": "List products with optional filtering",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of products to return"
          },
          "offset": {
            "type": "number",
            "description": "Number of products to skip"
          },
          "search": {
            "type": "string",
            "description": "Search term for product names"
          },
          "storeId": {
            "type": "string",
            "description": "Filter by store ID"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "includedInStore": {
            "type": "boolean",
            "description": "Filter by store inclusion status"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Filter by store availability"
          }
        }
      }
    },
    {
      "name": "ghl_get_product",
      "description": "Get a specific product by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "productId"
        ],
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID to retrieve"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_update_product",
      "description": "Update an existing product",
      "inputSchema": {
        "type": "object",
        "required": [
          "productId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "image": {
            "type": "string",
            "description": "Product image URL"
          },
          "productId": {
            "type": "string",
            "description": "Product ID to update"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "description": {
            "type": "string",
            "description": "Product description"
          },
          "productType": {
            "enum": [
              "DIGITAL",
              "PHYSICAL",
              "SERVICE",
              "PHYSICAL/DIGITAL"
            ],
            "type": "string",
            "description": "Type of product"
          },
          "availableInStore": {
            "type": "boolean",
            "description": "Whether product is available in store"
          }
        }
      }
    },
    {
      "name": "ghl_delete_product",
      "description": "Delete a product by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "productId"
        ],
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID to delete"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_create_price",
      "description": "Create a price for a product",
      "inputSchema": {
        "type": "object",
        "required": [
          "productId",
          "name",
          "type",
          "currency",
          "amount"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Price name/variant name"
          },
          "type": {
            "enum": [
              "one_time",
              "recurring"
            ],
            "type": "string",
            "description": "Price type"
          },
          "amount": {
            "type": "number",
            "description": "Price amount in cents"
          },
          "currency": {
            "type": "string",
            "description": "Currency code (e.g., USD)"
          },
          "productId": {
            "type": "string",
            "description": "Product ID to create price for"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          },
          "compareAtPrice": {
            "type": "number",
            "description": "Compare at price (for discounts)"
          }
        }
      }
    },
    {
      "name": "ghl_list_prices",
      "description": "List prices for a product",
      "inputSchema": {
        "type": "object",
        "required": [
          "productId"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of prices to return"
          },
          "offset": {
            "type": "number",
            "description": "Number of prices to skip"
          },
          "productId": {
            "type": "string",
            "description": "Product ID to list prices for"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_list_inventory",
      "description": "List inventory items with stock levels",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of items to return"
          },
          "offset": {
            "type": "number",
            "description": "Number of items to skip"
          },
          "search": {
            "type": "string",
            "description": "Search term for inventory items"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_create_product_collection",
      "description": "Create a new product collection",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "slug"
        ],
        "properties": {
          "seo": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "SEO title"
              },
              "description": {
                "type": "string",
                "description": "SEO description"
              }
            }
          },
          "name": {
            "type": "string",
            "description": "Collection name"
          },
          "slug": {
            "type": "string",
            "description": "Collection URL slug"
          },
          "image": {
            "type": "string",
            "description": "Collection image URL"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "ghl_list_product_collections",
      "description": "List product collections",
      "inputSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "name": {
            "type": "string",
            "description": "Search by collection name"
          },
          "limit": {
            "type": "number",
            "description": "Maximum number of collections to return"
          },
          "offset": {
            "type": "number",
            "description": "Number of collections to skip"
          },
          "locationId": {
            "type": "string",
            "description": "GHL Location ID (optional, uses default if not provided)"
          }
        }
      }
    },
    {
      "name": "create_whitelabel_integration_provider",
      "description": "Create a white-label integration provider for payments",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType",
          "uniqueName",
          "title",
          "provider",
          "description",
          "imageUrl"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID or company ID based on altType"
          },
          "title": {
            "type": "string",
            "description": "The title or name of the integration provider"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "imageUrl": {
            "type": "string",
            "description": "The URL to an image representing the integration provider"
          },
          "provider": {
            "enum": [
              "authorize-net",
              "nmi"
            ],
            "type": "string",
            "description": "The type of payment provider"
          },
          "uniqueName": {
            "type": "string",
            "description": "A unique name for the integration provider (lowercase, hyphens only)"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the integration provider"
          }
        }
      }
    },
    {
      "name": "list_whitelabel_integration_providers",
      "description": "List white-label integration providers with optional pagination",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID or company ID based on altType"
          },
          "limit": {
            "type": "number",
            "default": 0,
            "description": "Maximum number of items to return"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Starting index for pagination"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          }
        }
      }
    },
    {
      "name": "list_orders",
      "description": "List orders with optional filtering and pagination",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Alt ID (unique identifier like location ID)"
          },
          "endAt": {
            "type": "string",
            "description": "Ending date interval for orders (YYYY-MM-DD)"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Starting index for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term for order name"
          },
          "status": {
            "type": "string",
            "description": "Order status filter"
          },
          "altType": {
            "type": "string",
            "description": "Alt Type (type of identifier)"
          },
          "startAt": {
            "type": "string",
            "description": "Starting date interval for orders (YYYY-MM-DD)"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID for filtering orders"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (sub-account ID)"
          },
          "paymentMode": {
            "type": "string",
            "description": "Mode of payment (live/test)"
          },
          "funnelProductIds": {
            "type": "string",
            "description": "Comma-separated funnel product IDs"
          }
        }
      }
    },
    {
      "name": "get_order_by_id",
      "description": "Get a specific order by its ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "orderId",
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Alt ID (unique identifier like location ID)"
          },
          "altType": {
            "type": "string",
            "description": "Alt Type (type of identifier)"
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order to retrieve"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (sub-account ID)"
          }
        }
      }
    },
    {
      "name": "create_order_fulfillment",
      "description": "Create a fulfillment for an order",
      "inputSchema": {
        "type": "object",
        "required": [
          "orderId",
          "altId",
          "altType",
          "trackings",
          "items",
          "notifyCustomer"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID or Agency ID"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "priceId",
                "qty"
              ],
              "properties": {
                "qty": {
                  "type": "number",
                  "description": "Quantity of the item"
                },
                "priceId": {
                  "type": "string",
                  "description": "The ID of the product price"
                }
              }
            },
            "description": "Items being fulfilled"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order to fulfill"
          },
          "trackings": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "trackingUrl": {
                  "type": "string",
                  "description": "Tracking URL"
                },
                "trackingNumber": {
                  "type": "string",
                  "description": "Tracking number from shipping carrier"
                },
                "shippingCarrier": {
                  "type": "string",
                  "description": "Shipping carrier name"
                }
              }
            },
            "description": "Fulfillment tracking information"
          },
          "notifyCustomer": {
            "type": "boolean",
            "description": "Whether to notify the customer"
          }
        }
      }
    },
    {
      "name": "list_order_fulfillments",
      "description": "List all fulfillments for an order",
      "inputSchema": {
        "type": "object",
        "required": [
          "orderId",
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID or Agency ID"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "orderId": {
            "type": "string",
            "description": "ID of the order"
          }
        }
      }
    },
    {
      "name": "list_transactions",
      "description": "List transactions with optional filtering and pagination",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Alt ID (unique identifier like location ID)"
          },
          "endAt": {
            "type": "string",
            "description": "Ending date interval for transactions (YYYY-MM-DD)"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Starting index for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term for transaction name"
          },
          "altType": {
            "type": "string",
            "description": "Alt Type (type of identifier)"
          },
          "startAt": {
            "type": "string",
            "description": "Starting date interval for transactions (YYYY-MM-DD)"
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID for filtering transactions"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID for filtering transactions"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (sub-account ID)"
          },
          "paymentMode": {
            "type": "string",
            "description": "Mode of payment (live/test)"
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID for filtering transactions"
          },
          "entitySourceType": {
            "type": "string",
            "description": "Source of the transactions"
          },
          "entitySourceSubType": {
            "type": "string",
            "description": "Source sub-type of the transactions"
          }
        }
      }
    },
    {
      "name": "get_transaction_by_id",
      "description": "Get a specific transaction by its ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "transactionId",
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Alt ID (unique identifier like location ID)"
          },
          "altType": {
            "type": "string",
            "description": "Alt Type (type of identifier)"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID (sub-account ID)"
          },
          "transactionId": {
            "type": "string",
            "description": "ID of the transaction to retrieve"
          }
        }
      }
    },
    {
      "name": "list_subscriptions",
      "description": "List subscriptions with optional filtering and pagination",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Subscription ID for filtering"
          },
          "altId": {
            "type": "string",
            "description": "Alt ID (unique identifier like location ID)"
          },
          "endAt": {
            "type": "string",
            "description": "Ending date interval for subscriptions (YYYY-MM-DD)"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Maximum number of items per page"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Starting index for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term for subscription name"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "startAt": {
            "type": "string",
            "description": "Starting date interval for subscriptions (YYYY-MM-DD)"
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID for filtering subscriptions"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID for the subscription"
          },
          "paymentMode": {
            "type": "string",
            "description": "Mode of payment (live/test)"
          },
          "entitySourceType": {
            "type": "string",
            "description": "Source of the subscriptions"
          }
        }
      }
    },
    {
      "name": "get_subscription_by_id",
      "description": "Get a specific subscription by its ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "subscriptionId",
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Alt ID (unique identifier like location ID)"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "subscriptionId": {
            "type": "string",
            "description": "ID of the subscription to retrieve"
          }
        }
      }
    },
    {
      "name": "list_coupons",
      "description": "List all coupons for a location with optional filtering",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "limit": {
            "type": "number",
            "default": 100,
            "description": "Maximum number of coupons to return"
          },
          "offset": {
            "type": "number",
            "default": 0,
            "description": "Number of coupons to skip for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term to filter coupons by name or code"
          },
          "status": {
            "enum": [
              "scheduled",
              "active",
              "expired"
            ],
            "type": "string",
            "description": "Filter coupons by status"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          }
        }
      }
    },
    {
      "name": "create_coupon",
      "description": "Create a new promotional coupon",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType",
          "name",
          "code",
          "discountType",
          "discountValue",
          "startDate"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Coupon code"
          },
          "name": {
            "type": "string",
            "description": "Coupon name"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "endDate": {
            "type": "string",
            "description": "End date in YYYY-MM-DDTHH:mm:ssZ format"
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product IDs that the coupon applies to"
          },
          "usageLimit": {
            "type": "number",
            "description": "Maximum number of times coupon can be used"
          },
          "discountType": {
            "enum": [
              "percentage",
              "amount"
            ],
            "type": "string",
            "description": "Type of discount"
          },
          "discountValue": {
            "type": "number",
            "description": "Discount value"
          },
          "limitPerCustomer": {
            "type": "boolean",
            "default": false,
            "description": "Whether to limit coupon to once per customer"
          },
          "applyToFuturePayments": {
            "type": "boolean",
            "default": true,
            "description": "Whether coupon applies to future subscription payments"
          },
          "applyToFuturePaymentsConfig": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "enum": [
                  "forever",
                  "fixed"
                ],
                "type": "string",
                "description": "Type of future payments config"
              },
              "duration": {
                "type": "number",
                "description": "Duration for fixed type"
              },
              "durationType": {
                "enum": [
                  "months"
                ],
                "type": "string",
                "description": "Duration type"
              }
            },
            "description": "Configuration for future payments application"
          }
        }
      }
    },
    {
      "name": "update_coupon",
      "description": "Update an existing coupon",
      "inputSchema": {
        "type": "object",
        "required": [
          "id",
          "altId",
          "altType",
          "name",
          "code",
          "discountType",
          "discountValue",
          "startDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Coupon ID"
          },
          "code": {
            "type": "string",
            "description": "Coupon code"
          },
          "name": {
            "type": "string",
            "description": "Coupon name"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          },
          "endDate": {
            "type": "string",
            "description": "End date in YYYY-MM-DDTHH:mm:ssZ format"
          },
          "startDate": {
            "type": "string",
            "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format"
          },
          "productIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Product IDs that the coupon applies to"
          },
          "usageLimit": {
            "type": "number",
            "description": "Maximum number of times coupon can be used"
          },
          "discountType": {
            "enum": [
              "percentage",
              "amount"
            ],
            "type": "string",
            "description": "Type of discount"
          },
          "discountValue": {
            "type": "number",
            "description": "Discount value"
          },
          "limitPerCustomer": {
            "type": "boolean",
            "description": "Whether to limit coupon to once per customer"
          },
          "applyToFuturePayments": {
            "type": "boolean",
            "description": "Whether coupon applies to future subscription payments"
          },
          "applyToFuturePaymentsConfig": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "enum": [
                  "forever",
                  "fixed"
                ],
                "type": "string",
                "description": "Type of future payments config"
              },
              "duration": {
                "type": "number",
                "description": "Duration for fixed type"
              },
              "durationType": {
                "enum": [
                  "months"
                ],
                "type": "string",
                "description": "Duration type"
              }
            },
            "description": "Configuration for future payments application"
          }
        }
      }
    },
    {
      "name": "delete_coupon",
      "description": "Delete a coupon permanently",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType",
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Coupon ID"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          }
        }
      }
    },
    {
      "name": "get_coupon",
      "description": "Get coupon details by ID or code",
      "inputSchema": {
        "type": "object",
        "required": [
          "altId",
          "altType",
          "id",
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Coupon ID"
          },
          "code": {
            "type": "string",
            "description": "Coupon code"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "description": "Alt Type"
          }
        }
      }
    },
    {
      "name": "create_custom_provider_integration",
      "description": "Create a new custom payment provider integration",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "name",
          "description",
          "paymentsUrl",
          "queryUrl",
          "imageUrl"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the custom provider"
          },
          "imageUrl": {
            "type": "string",
            "description": "Public image URL for the payment gateway logo"
          },
          "queryUrl": {
            "type": "string",
            "description": "URL for querying payment events"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID"
          },
          "description": {
            "type": "string",
            "description": "Description of the payment gateway"
          },
          "paymentsUrl": {
            "type": "string",
            "description": "URL to load in iframe for payment session"
          }
        }
      }
    },
    {
      "name": "delete_custom_provider_integration",
      "description": "Delete an existing custom payment provider integration",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    },
    {
      "name": "get_custom_provider_config",
      "description": "Fetch existing payment config for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId"
        ],
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    },
    {
      "name": "create_custom_provider_config",
      "description": "Create new payment config for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "live",
          "test"
        ],
        "properties": {
          "live": {
            "type": "object",
            "required": [
              "apiKey",
              "publishableKey"
            ],
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "API key for live payments"
              },
              "publishableKey": {
                "type": "string",
                "description": "Publishable key for live payments"
              }
            },
            "description": "Live payment configuration"
          },
          "test": {
            "type": "object",
            "required": [
              "apiKey",
              "publishableKey"
            ],
            "properties": {
              "apiKey": {
                "type": "string",
                "description": "API key for test payments"
              },
              "publishableKey": {
                "type": "string",
                "description": "Publishable key for test payments"
              }
            },
            "description": "Test payment configuration"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    },
    {
      "name": "disconnect_custom_provider_config",
      "description": "Disconnect existing payment config for a location",
      "inputSchema": {
        "type": "object",
        "required": [
          "locationId",
          "liveMode"
        ],
        "properties": {
          "liveMode": {
            "type": "boolean",
            "description": "Whether to disconnect live or test mode config"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    },
    {
      "name": "create_invoice_template",
      "description": "Create a new invoice template",
      "inputSchema": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "title": {
            "type": "string",
            "description": "Invoice title"
          },
          "altType": {
            "enum": [
              "location"
            ],
            "type": "string",
            "default": "location"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date"
          }
        }
      }
    },
    {
      "name": "list_invoice_templates",
      "description": "List all invoice templates",
      "inputSchema": {
        "type": "object",
        "required": [
          "limit",
          "offset"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "limit": {
            "type": "string",
            "default": "10",
            "description": "Number of results per page"
          },
          "offset": {
            "type": "string",
            "default": "0",
            "description": "Offset for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term"
          },
          "status": {
            "type": "string",
            "description": "Filter by status"
          },
          "paymentMode": {
            "enum": [
              "default",
              "live",
              "test"
            ],
            "type": "string",
            "description": "Payment mode"
          }
        }
      }
    },
    {
      "name": "get_invoice_template",
      "description": "Get invoice template by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "templateId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID"
          }
        }
      }
    },
    {
      "name": "update_invoice_template",
      "description": "Update an existing invoice template",
      "inputSchema": {
        "type": "object",
        "required": [
          "templateId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "title": {
            "type": "string",
            "description": "Invoice title"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID"
          }
        }
      }
    },
    {
      "name": "delete_invoice_template",
      "description": "Delete an invoice template",
      "inputSchema": {
        "type": "object",
        "required": [
          "templateId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID"
          }
        }
      }
    },
    {
      "name": "create_invoice_schedule",
      "description": "Create a new invoice schedule",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "templateId",
          "contactId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Schedule name"
          },
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "frequency": {
            "type": "string",
            "description": "Schedule frequency"
          },
          "templateId": {
            "type": "string",
            "description": "Template ID"
          }
        }
      }
    },
    {
      "name": "list_invoice_schedules",
      "description": "List all invoice schedules",
      "inputSchema": {
        "type": "object",
        "required": [
          "limit",
          "offset"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "limit": {
            "type": "string",
            "default": "10",
            "description": "Number of results per page"
          },
          "offset": {
            "type": "string",
            "default": "0",
            "description": "Offset for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term"
          },
          "status": {
            "type": "string",
            "description": "Filter by status"
          }
        }
      }
    },
    {
      "name": "get_invoice_schedule",
      "description": "Get invoice schedule by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "scheduleId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "scheduleId": {
            "type": "string",
            "description": "Schedule ID"
          }
        }
      }
    },
    {
      "name": "create_invoice",
      "description": "Create a new invoice",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "title"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "items": {
            "type": "array",
            "description": "Invoice items"
          },
          "title": {
            "type": "string",
            "description": "Invoice title"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date"
          }
        }
      }
    },
    {
      "name": "list_invoices",
      "description": "List all invoices",
      "inputSchema": {
        "type": "object",
        "required": [
          "limit",
          "offset"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "limit": {
            "type": "string",
            "default": "10",
            "description": "Number of results per page"
          },
          "offset": {
            "type": "string",
            "default": "0",
            "description": "Offset for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term"
          },
          "status": {
            "type": "string",
            "description": "Filter by status"
          },
          "contactId": {
            "type": "string",
            "description": "Filter by contact ID"
          }
        }
      }
    },
    {
      "name": "get_invoice",
      "description": "Get invoice by ID",
      "inputSchema": {
        "type": "object",
        "required": [
          "invoiceId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "invoiceId": {
            "type": "string",
            "description": "Invoice ID"
          }
        }
      }
    },
    {
      "name": "send_invoice",
      "description": "Send an invoice to customer",
      "inputSchema": {
        "type": "object",
        "required": [
          "invoiceId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "emailTo": {
            "type": "string",
            "description": "Email address to send to"
          },
          "message": {
            "type": "string",
            "description": "Email message"
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "invoiceId": {
            "type": "string",
            "description": "Invoice ID"
          }
        }
      }
    },
    {
      "name": "create_estimate",
      "description": "Create a new estimate",
      "inputSchema": {
        "type": "object",
        "required": [
          "contactId",
          "title"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "title": {
            "type": "string",
            "description": "Estimate title"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "contactId": {
            "type": "string",
            "description": "Contact ID"
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date"
          },
          "validUntil": {
            "type": "string",
            "description": "Valid until date"
          }
        }
      }
    },
    {
      "name": "list_estimates",
      "description": "List all estimates",
      "inputSchema": {
        "type": "object",
        "required": [
          "limit",
          "offset"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "limit": {
            "type": "string",
            "default": "10",
            "description": "Number of results per page"
          },
          "offset": {
            "type": "string",
            "default": "0",
            "description": "Offset for pagination"
          },
          "search": {
            "type": "string",
            "description": "Search term"
          },
          "status": {
            "enum": [
              "all",
              "draft",
              "sent",
              "accepted",
              "declined",
              "invoiced",
              "viewed"
            ],
            "type": "string",
            "description": "Filter by status"
          },
          "contactId": {
            "type": "string",
            "description": "Filter by contact ID"
          }
        }
      }
    },
    {
      "name": "send_estimate",
      "description": "Send an estimate to customer",
      "inputSchema": {
        "type": "object",
        "required": [
          "estimateId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "emailTo": {
            "type": "string",
            "description": "Email address to send to"
          },
          "message": {
            "type": "string",
            "description": "Email message"
          },
          "subject": {
            "type": "string",
            "description": "Email subject"
          },
          "estimateId": {
            "type": "string",
            "description": "Estimate ID"
          }
        }
      }
    },
    {
      "name": "create_invoice_from_estimate",
      "description": "Create an invoice from an estimate",
      "inputSchema": {
        "type": "object",
        "required": [
          "estimateId"
        ],
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          },
          "dueDate": {
            "type": "string",
            "description": "Invoice due date"
          },
          "issueDate": {
            "type": "string",
            "description": "Invoice issue date"
          },
          "estimateId": {
            "type": "string",
            "description": "Estimate ID"
          }
        }
      }
    },
    {
      "name": "generate_invoice_number",
      "description": "Generate a unique invoice number",
      "inputSchema": {
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    },
    {
      "name": "generate_estimate_number",
      "description": "Generate a unique estimate number",
      "inputSchema": {
        "type": "object",
        "properties": {
          "altId": {
            "type": "string",
            "description": "Location ID"
          }
        }
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@cpretzinger/gohighlevel-mcp/mcp",
      "configSchema": {
        "type": "object",
        "title": "MCP Session Configuration",
        "required": [
          "ghlApiKey",
          "ghlLocationId"
        ],
        "properties": {
          "ghlApiKey": {
            "type": "string",
            "minLength": 1
          },
          "ghlBaseUrl": {
            "type": "string",
            "format": "uri"
          },
          "ghlLocationId": {
            "type": "string",
            "minLength": 1
          }
        },
        "description": "Schema for the /mcp endpoint configuration",
        "x-query-style": "dot+bracket",
        "additionalProperties": false
      }
    }
  ]
}