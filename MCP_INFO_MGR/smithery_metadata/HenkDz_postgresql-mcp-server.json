{
  "qualifiedName": "@HenkDz/postgresql-mcp-server",
  "displayName": "PostgreSQL Database Management Server",
  "description": "Analyze, manage, and optimize your PostgreSQL databases effortlessly. Streamline your database operations with powerful tools for debugging, schema management, and data migration. Enhance performance monitoring and ensure your database runs smoothly with real-time insights and recommendations.",
  "iconUrl": null,
  "remote": false,
  "deploymentUrl": null,
  "security": null,
  "tools": [
    {
      "name": "pg_analyze_database",
      "description": "Analyze PostgreSQL database configuration and performance",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "analysisType": {
            "enum": [
              "configuration",
              "performance",
              "security"
            ],
            "type": "string",
            "description": "Type of analysis to perform"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional if POSTGRES_CONNECTION_STRING environment variable or --connection-string CLI option is set)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_debug_database",
      "description": "Debug common PostgreSQL issues",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "issue"
        ],
        "properties": {
          "issue": {
            "enum": [
              "connection",
              "performance",
              "locks",
              "replication"
            ],
            "type": "string"
          },
          "logLevel": {
            "enum": [
              "info",
              "debug",
              "trace"
            ],
            "type": "string",
            "default": "info"
          },
          "connectionString": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_schema",
      "description": "Manage PostgreSQL schema - get schema info, create/alter tables, manage enums. Examples: operation=\"get_info\" for table lists, operation=\"create_table\" with tableName and columns, operation=\"get_enums\" to list enums, operation=\"create_enum\" with enumName and values",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public)"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ENUM values (required for create_enum)"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "type"
              ],
              "properties": {
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "description": "PostgreSQL data type"
                },
                "default": {
                  "type": "string",
                  "description": "Default value expression"
                },
                "nullable": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "description": "Column definitions (required for create_table)"
          },
          "enumName": {
            "type": "string",
            "description": "ENUM name (optional for get_enums to filter, required for create_enum)"
          },
          "operation": {
            "enum": [
              "get_info",
              "create_table",
              "alter_table",
              "get_enums",
              "create_enum"
            ],
            "type": "string",
            "description": "Operation: get_info (schema/table info), create_table (new table), alter_table (modify table), get_enums (list ENUMs), create_enum (new ENUM)"
          },
          "tableName": {
            "type": "string",
            "description": "Table name (optional for get_info to get specific table info, required for create_table/alter_table)"
          },
          "operations": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "type",
                "columnName"
              ],
              "properties": {
                "type": {
                  "enum": [
                    "add",
                    "alter",
                    "drop"
                  ],
                  "type": "string"
                },
                "default": {
                  "type": "string",
                  "description": "Default value expression (for add/alter)"
                },
                "dataType": {
                  "type": "string",
                  "description": "PostgreSQL data type (for add/alter)"
                },
                "nullable": {
                  "type": "boolean",
                  "description": "Whether the column can be NULL (for add/alter)"
                },
                "columnName": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "description": "Alter operations (required for alter_table)"
          },
          "ifNotExists": {
            "type": "boolean",
            "description": "Include IF NOT EXISTS clause (for create_enum)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_functions",
      "description": "Manage PostgreSQL functions - get, create, or drop functions with a single tool. Examples: operation=\"get\" to list functions, operation=\"create\" with functionName=\"test_func\", parameters=\"\" (empty for no params), returnType=\"TEXT\", functionBody=\"SELECT 'Hello'\"",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public)"
          },
          "cascade": {
            "type": "boolean",
            "description": "Whether to include CASCADE clause (for drop operation)"
          },
          "replace": {
            "type": "boolean",
            "description": "Whether to replace the function if it exists (for create operation)"
          },
          "ifExists": {
            "type": "boolean",
            "description": "Whether to include IF EXISTS clause (for drop operation)"
          },
          "language": {
            "enum": [
              "sql",
              "plpgsql",
              "plpython3u"
            ],
            "type": "string",
            "description": "Function language (defaults to plpgsql for create)"
          },
          "security": {
            "enum": [
              "INVOKER",
              "DEFINER"
            ],
            "type": "string",
            "description": "Function security context (defaults to INVOKER for create)"
          },
          "operation": {
            "enum": [
              "get",
              "create",
              "drop"
            ],
            "type": "string",
            "description": "Operation to perform: get (list/info), create (new function), or drop (remove function)"
          },
          "parameters": {
            "type": "string",
            "description": "Function parameters - required for create operation, required for drop when function is overloaded. Use empty string \"\" for functions with no parameters"
          },
          "returnType": {
            "type": "string",
            "description": "Return type of the function (required for create operation)"
          },
          "volatility": {
            "enum": [
              "VOLATILE",
              "STABLE",
              "IMMUTABLE"
            ],
            "type": "string",
            "description": "Function volatility (defaults to VOLATILE for create)"
          },
          "functionBody": {
            "type": "string",
            "description": "Function body code (required for create operation)"
          },
          "functionName": {
            "type": "string",
            "description": "Name of the function (required for create/drop, optional for get to filter)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_triggers",
      "description": "Manage PostgreSQL triggers - get, create, drop, and enable/disable triggers. Examples: operation=\"get\" to list triggers, operation=\"create\" with triggerName, tableName, functionName, operation=\"drop\" with triggerName and tableName, operation=\"set_state\" with triggerName, tableName, enable",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "when": {
            "type": "string",
            "description": "WHEN clause condition (for create operation)"
          },
          "enable": {
            "type": "boolean",
            "description": "Whether to enable the trigger (required for set_state operation)"
          },
          "events": {
            "type": "array",
            "items": {
              "enum": [
                "INSERT",
                "UPDATE",
                "DELETE",
                "TRUNCATE"
              ],
              "type": "string"
            },
            "description": "Trigger events (for create operation, defaults to [\"INSERT\"])"
          },
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public)"
          },
          "timing": {
            "enum": [
              "BEFORE",
              "AFTER",
              "INSTEAD OF"
            ],
            "type": "string",
            "description": "Trigger timing (for create operation, defaults to AFTER)"
          },
          "cascade": {
            "type": "boolean",
            "description": "Include CASCADE clause (for drop operation)"
          },
          "forEach": {
            "enum": [
              "ROW",
              "STATEMENT"
            ],
            "type": "string",
            "description": "FOR EACH ROW or STATEMENT (for create operation, defaults to ROW)"
          },
          "replace": {
            "type": "boolean",
            "description": "Whether to replace trigger if exists (for create operation)"
          },
          "ifExists": {
            "type": "boolean",
            "description": "Include IF EXISTS clause (for drop operation)"
          },
          "operation": {
            "enum": [
              "get",
              "create",
              "drop",
              "set_state"
            ],
            "type": "string",
            "description": "Operation: get (list triggers), create (new trigger), drop (remove trigger), set_state (enable/disable trigger)"
          },
          "tableName": {
            "type": "string",
            "description": "Table name (optional filter for get, required for create/drop/set_state)"
          },
          "triggerName": {
            "type": "string",
            "description": "Trigger name (required for create/drop/set_state)"
          },
          "functionName": {
            "type": "string",
            "description": "Function name (required for create operation)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_indexes",
      "description": "Manage PostgreSQL indexes - get, create, drop, reindex, and analyze usage with a single tool. Examples: operation=\"get\" to list indexes, operation=\"create\" with indexName, tableName, columns, operation=\"analyze_usage\" for performance analysis",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "type": {
            "enum": [
              "index",
              "table",
              "schema",
              "database"
            ],
            "type": "string",
            "description": "Type of target for reindex (required for reindex operation)"
          },
          "where": {
            "type": "string",
            "description": "WHERE clause for partial index (for create operation)"
          },
          "method": {
            "enum": [
              "btree",
              "hash",
              "gist",
              "spgist",
              "gin",
              "brin"
            ],
            "type": "string",
            "description": "Index method (for create operation, defaults to btree)"
          },
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public)"
          },
          "target": {
            "type": "string",
            "description": "Target name for reindex (required for reindex operation)"
          },
          "unique": {
            "type": "boolean",
            "description": "Create unique index (for create operation)"
          },
          "cascade": {
            "type": "boolean",
            "description": "Include CASCADE clause (for drop operation)"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Column names for the index (required for create operation)"
          },
          "ifExists": {
            "type": "boolean",
            "description": "Include IF EXISTS clause (for drop operation)"
          },
          "indexName": {
            "type": "string",
            "description": "Index name (required for create/drop)"
          },
          "operation": {
            "enum": [
              "get",
              "create",
              "drop",
              "reindex",
              "analyze_usage"
            ],
            "type": "string",
            "description": "Operation: get (list indexes), create (new index), drop (remove index), reindex (rebuild), analyze_usage (find unused/duplicate)"
          },
          "tableName": {
            "type": "string",
            "description": "Table name (optional for get/analyze_usage, required for create)"
          },
          "concurrent": {
            "type": "boolean",
            "description": "Create/drop index concurrently (for create/drop operations)"
          },
          "showUnused": {
            "type": "boolean",
            "description": "Include unused indexes (for analyze_usage operation)"
          },
          "ifNotExists": {
            "type": "boolean",
            "description": "Include IF NOT EXISTS clause (for create operation)"
          },
          "includeStats": {
            "type": "boolean",
            "description": "Include usage statistics (for get operation)"
          },
          "minSizeBytes": {
            "type": "number",
            "description": "Minimum index size in bytes (for analyze_usage operation)"
          },
          "showDuplicates": {
            "type": "boolean",
            "description": "Detect duplicate indexes (for analyze_usage operation)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_constraints",
      "description": "Manage PostgreSQL constraints - get, create foreign keys, drop foreign keys, create constraints, drop constraints. Examples: operation=\"get\" to list constraints, operation=\"create_fk\" with constraintName, tableName, columnNames, referencedTable, referencedColumns",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public)"
          },
          "cascade": {
            "type": "boolean",
            "description": "Include CASCADE clause (for drop_fk/drop operations)"
          },
          "ifExists": {
            "type": "boolean",
            "description": "Include IF EXISTS clause (for drop_fk/drop operations)"
          },
          "onDelete": {
            "enum": [
              "NO ACTION",
              "RESTRICT",
              "CASCADE",
              "SET NULL",
              "SET DEFAULT"
            ],
            "type": "string",
            "description": "ON DELETE action (for create_fk)"
          },
          "onUpdate": {
            "enum": [
              "NO ACTION",
              "RESTRICT",
              "CASCADE",
              "SET NULL",
              "SET DEFAULT"
            ],
            "type": "string",
            "description": "ON UPDATE action (for create_fk)"
          },
          "operation": {
            "enum": [
              "get",
              "create_fk",
              "drop_fk",
              "create",
              "drop"
            ],
            "type": "string",
            "description": "Operation: get (list constraints), create_fk (foreign key), drop_fk (drop foreign key), create (constraint), drop (constraint)"
          },
          "tableName": {
            "type": "string",
            "description": "Table name (optional filter for get, required for create_fk/drop_fk/create/drop)"
          },
          "deferrable": {
            "type": "boolean",
            "description": "Make constraint deferrable (for create_fk/create operations)"
          },
          "columnNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Column names in the table (required for create_fk)"
          },
          "constraintName": {
            "type": "string",
            "description": "Constraint name (required for create_fk/drop_fk/create/drop)"
          },
          "constraintType": {
            "enum": [
              "PRIMARY KEY",
              "FOREIGN KEY",
              "UNIQUE",
              "CHECK"
            ],
            "type": "string",
            "description": "Filter by constraint type (for get operation)"
          },
          "checkExpression": {
            "type": "string",
            "description": "Check expression (for create operation with check constraints)"
          },
          "referencedTable": {
            "type": "string",
            "description": "Referenced table name (required for create_fk)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          },
          "referencedSchema": {
            "type": "string",
            "description": "Referenced table schema (for create_fk, defaults to same as table schema)"
          },
          "initiallyDeferred": {
            "type": "boolean",
            "description": "Initially deferred (for create_fk/create operations)"
          },
          "referencedColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Referenced column names (required for create_fk)"
          },
          "constraintTypeCreate": {
            "enum": [
              "unique",
              "check",
              "primary_key"
            ],
            "type": "string",
            "description": "Type of constraint to create (for create operation)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_rls",
      "description": "Manage PostgreSQL Row-Level Security - enable/disable RLS and manage policies. Examples: operation=\"enable\" with tableName=\"users\", operation=\"create_policy\" with tableName, policyName, using, check",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "role": {
            "type": "string",
            "description": "Role the policy applies to (for create_policy)"
          },
          "check": {
            "type": "string",
            "description": "WITH CHECK expression for policy (optional for create_policy/edit_policy)"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of roles for policy (for edit_policy)"
          },
          "using": {
            "type": "string",
            "description": "USING expression for policy (required for create_policy, optional for edit_policy)"
          },
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public)"
          },
          "command": {
            "enum": [
              "ALL",
              "SELECT",
              "INSERT",
              "UPDATE",
              "DELETE"
            ],
            "type": "string",
            "description": "Command the policy applies to (for create_policy)"
          },
          "replace": {
            "type": "boolean",
            "description": "Whether to replace policy if exists (for create_policy)"
          },
          "ifExists": {
            "type": "boolean",
            "description": "Include IF EXISTS clause (for drop_policy)"
          },
          "operation": {
            "enum": [
              "enable",
              "disable",
              "create_policy",
              "edit_policy",
              "drop_policy",
              "get_policies"
            ],
            "type": "string",
            "description": "Operation: enable/disable RLS, create_policy, edit_policy, drop_policy, get_policies"
          },
          "tableName": {
            "type": "string",
            "description": "Table name (required for enable/disable/create_policy/edit_policy/drop_policy, optional filter for get_policies)"
          },
          "policyName": {
            "type": "string",
            "description": "Policy name (required for create_policy/edit_policy/drop_policy)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_users",
      "description": "Manage PostgreSQL users and permissions - create, drop, alter users, grant/revoke permissions. Examples: operation=\"create\" with username=\"testuser\", operation=\"grant\" with username, permissions, target, targetType",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "login": {
            "type": "boolean",
            "description": "Allow user to login (for create/alter operations)"
          },
          "schema": {
            "type": "string",
            "description": "Filter by schema (for get_permissions operation)"
          },
          "target": {
            "type": "string",
            "description": "Target object name (for grant/revoke operations)"
          },
          "cascade": {
            "type": "boolean",
            "description": "Include CASCADE to drop owned objects (for drop/revoke operations)"
          },
          "inherit": {
            "type": "boolean",
            "description": "Inherit privileges from parent roles (for create/alter operations)"
          },
          "createdb": {
            "type": "boolean",
            "description": "Allow user to create databases (for create/alter operations)"
          },
          "ifExists": {
            "type": "boolean",
            "description": "Include IF EXISTS clause (for drop operation)"
          },
          "password": {
            "type": "string",
            "description": "Password for the user (for create operation)"
          },
          "username": {
            "type": "string",
            "description": "Username (required for create/drop/alter/grant/revoke/get_permissions, optional filter for list)"
          },
          "operation": {
            "enum": [
              "create",
              "drop",
              "alter",
              "grant",
              "revoke",
              "get_permissions",
              "list"
            ],
            "type": "string",
            "description": "Operation: create (new user), drop (remove user), alter (modify user), grant (permissions), revoke (permissions), get_permissions (view permissions), list (all users)"
          },
          "superuser": {
            "type": "boolean",
            "description": "Grant superuser privileges (for create/alter operations)"
          },
          "createrole": {
            "type": "boolean",
            "description": "Allow user to create roles (for create/alter operations)"
          },
          "targetType": {
            "enum": [
              "table",
              "schema",
              "database",
              "sequence",
              "function"
            ],
            "type": "string",
            "description": "Type of target object (for grant/revoke operations)"
          },
          "validUntil": {
            "type": "string",
            "description": "Password expiration date YYYY-MM-DD (for create/alter operations)"
          },
          "permissions": {
            "type": "array",
            "items": {
              "enum": [
                "SELECT",
                "INSERT",
                "UPDATE",
                "DELETE",
                "TRUNCATE",
                "REFERENCES",
                "TRIGGER",
                "ALL"
              ],
              "type": "string"
            },
            "description": "Permissions to grant/revoke: [\"SELECT\", \"INSERT\", \"UPDATE\", \"DELETE\", \"TRUNCATE\", \"REFERENCES\", \"TRIGGER\", \"ALL\"]"
          },
          "replication": {
            "type": "boolean",
            "description": "Allow replication privileges (for create/alter operations)"
          },
          "connectionLimit": {
            "type": "number",
            "description": "Maximum number of connections (for create/alter operations)"
          },
          "withGrantOption": {
            "type": "boolean",
            "description": "Allow user to grant these permissions to others (for grant operation)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          },
          "includeSystemRoles": {
            "type": "boolean",
            "description": "Include system roles (for list operation)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_query",
      "description": "Manage PostgreSQL query analysis and performance - operation=\"explain\" for EXPLAIN plans, operation=\"get_slow_queries\" for slow query analysis, operation=\"get_stats\" for query statistics, operation=\"reset_stats\" for clearing statistics",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "costs": {
            "type": "boolean",
            "default": true,
            "description": "Include cost estimates (for explain operation)"
          },
          "limit": {
            "type": "number",
            "default": 10,
            "description": "Number of slow queries to return (for get_slow_queries operation)"
          },
          "query": {
            "type": "string",
            "description": "SQL query to explain (required for explain operation)"
          },
          "format": {
            "enum": [
              "text",
              "json",
              "xml",
              "yaml"
            ],
            "type": "string",
            "default": "json",
            "description": "Output format (for explain operation)"
          },
          "analyze": {
            "type": "boolean",
            "default": false,
            "description": "Use EXPLAIN ANALYZE - actually executes the query (for explain operation)"
          },
          "buffers": {
            "type": "boolean",
            "default": false,
            "description": "Include buffer usage information (for explain operation)"
          },
          "orderBy": {
            "enum": [
              "mean_time",
              "total_time",
              "calls",
              "cache_hit_ratio"
            ],
            "type": "string",
            "default": "mean_time",
            "description": "Sort order (for get_slow_queries and get_stats operations)"
          },
          "queryId": {
            "type": "string",
            "description": "Specific query ID to reset (for reset_stats operation, resets all if not provided)"
          },
          "verbose": {
            "type": "boolean",
            "default": false,
            "description": "Include verbose output (for explain operation)"
          },
          "minCalls": {
            "type": "number",
            "description": "Minimum number of calls (for get_stats operation)"
          },
          "operation": {
            "enum": [
              "explain",
              "get_slow_queries",
              "get_stats",
              "reset_stats"
            ],
            "type": "string",
            "description": "Operation: explain (EXPLAIN/EXPLAIN ANALYZE query), get_slow_queries (find slow queries from pg_stat_statements), get_stats (query statistics with cache hit ratios), reset_stats (reset pg_stat_statements)"
          },
          "minDuration": {
            "type": "number",
            "description": "Minimum average duration in milliseconds (for get_slow_queries operation)"
          },
          "queryPattern": {
            "type": "string",
            "description": "Filter queries containing this pattern (for get_stats operation)"
          },
          "connectionString": {
            "type": "string"
          },
          "includeNormalized": {
            "type": "boolean",
            "default": true,
            "description": "Include normalized query text (for get_slow_queries operation)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_execute_query",
      "description": "Execute SELECT queries and data retrieval operations - operation=\"select/count/exists\" with query and optional parameters. Examples: operation=\"select\", query=\"SELECT * FROM users WHERE created_at > $1\", parameters=[\"2024-01-01\"]",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation",
          "query"
        ],
        "properties": {
          "limit": {
            "type": "number",
            "description": "Maximum number of rows to return (safety limit)"
          },
          "query": {
            "type": "string",
            "description": "SQL SELECT query to execute"
          },
          "timeout": {
            "type": "number",
            "description": "Query timeout in milliseconds"
          },
          "operation": {
            "enum": [
              "select",
              "count",
              "exists"
            ],
            "type": "string",
            "description": "Query operation: select (fetch rows), count (count rows), exists (check existence)"
          },
          "parameters": {
            "type": "array",
            "items": {},
            "default": [],
            "description": "Parameter values for prepared statement placeholders ($1, $2, etc.)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_execute_mutation",
      "description": "Execute data modification operations (INSERT/UPDATE/DELETE/UPSERT) - operation=\"insert/update/delete/upsert\" with table and data. Examples: operation=\"insert\", table=\"users\", data={\"name\":\"John\",\"email\":\"john@example.com\"}",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation",
          "table"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "Data object with column-value pairs (required for insert/update/upsert)",
            "additionalProperties": {}
          },
          "table": {
            "type": "string",
            "description": "Table name for the operation"
          },
          "where": {
            "type": "string",
            "description": "WHERE clause for update/delete operations (without WHERE keyword)"
          },
          "schema": {
            "type": "string",
            "default": "public",
            "description": "Schema name (defaults to public)"
          },
          "operation": {
            "enum": [
              "insert",
              "update",
              "delete",
              "upsert"
            ],
            "type": "string",
            "description": "Mutation operation: insert (add rows), update (modify rows), delete (remove rows), upsert (insert or update)"
          },
          "returning": {
            "type": "string",
            "description": "RETURNING clause to get back inserted/updated data"
          },
          "conflictColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Columns for conflict resolution in upsert (ON CONFLICT)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_execute_sql",
      "description": "Execute arbitrary SQL statements - sql=\"ANY_VALID_SQL\" with optional parameters and transaction support. Examples: sql=\"CREATE INDEX ...\", sql=\"WITH complex_cte AS (...) SELECT ...\", transactional=true",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "sql"
        ],
        "properties": {
          "sql": {
            "type": "string",
            "description": "SQL statement to execute (can be any valid PostgreSQL SQL)"
          },
          "timeout": {
            "type": "number",
            "description": "Query timeout in milliseconds"
          },
          "expectRows": {
            "type": "boolean",
            "default": true,
            "description": "Whether to expect rows back (false for statements like CREATE, DROP, etc.)"
          },
          "parameters": {
            "type": "array",
            "items": {},
            "default": [],
            "description": "Parameter values for prepared statement placeholders ($1, $2, etc.)"
          },
          "transactional": {
            "type": "boolean",
            "default": false,
            "description": "Whether to wrap in a transaction"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_manage_comments",
      "description": "Manage PostgreSQL object comments - get, set, remove comments on tables, columns, functions, and other database objects. Examples: operation=\"get\" with objectType=\"table\", objectName=\"users\", operation=\"set\" with comment text, operation=\"bulk_get\" for discovery",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "operation"
        ],
        "properties": {
          "schema": {
            "type": "string",
            "description": "Schema name (defaults to public, required for most object types)"
          },
          "comment": {
            "type": "string",
            "description": "Comment text (required for set operation)"
          },
          "operation": {
            "enum": [
              "get",
              "set",
              "remove",
              "bulk_get"
            ],
            "type": "string",
            "description": "Operation: get (retrieve comments), set (add/update comment), remove (delete comment), bulk_get (discovery mode)"
          },
          "columnName": {
            "type": "string",
            "description": "Column name (required when objectType is \"column\")"
          },
          "objectName": {
            "type": "string",
            "description": "Name of the object (required for get/set/remove)"
          },
          "objectType": {
            "enum": [
              "table",
              "column",
              "index",
              "constraint",
              "function",
              "trigger",
              "view",
              "sequence",
              "schema",
              "database"
            ],
            "type": "string",
            "description": "Type of database object (required for get/set/remove)"
          },
          "connectionString": {
            "type": "string",
            "description": "PostgreSQL connection string (optional)"
          },
          "filterObjectType": {
            "enum": [
              "table",
              "column",
              "index",
              "constraint",
              "function",
              "trigger",
              "view",
              "sequence",
              "schema",
              "database"
            ],
            "type": "string",
            "description": "Filter by object type in bulk_get operation"
          },
          "includeSystemObjects": {
            "type": "boolean",
            "description": "Include system objects in bulk_get (defaults to false)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_export_table_data",
      "description": "Export table data to JSON or CSV format",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tableName",
          "outputPath"
        ],
        "properties": {
          "limit": {
            "type": "integer",
            "exclusiveMinimum": 0
          },
          "where": {
            "type": "string"
          },
          "format": {
            "enum": [
              "json",
              "csv"
            ],
            "type": "string",
            "default": "json"
          },
          "tableName": {
            "type": "string"
          },
          "outputPath": {
            "type": "string",
            "description": "absolute path to save the exported data"
          },
          "connectionString": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_import_table_data",
      "description": "Import data from JSON or CSV file into a table",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "tableName",
          "inputPath"
        ],
        "properties": {
          "format": {
            "enum": [
              "json",
              "csv"
            ],
            "type": "string",
            "default": "json"
          },
          "delimiter": {
            "type": "string"
          },
          "inputPath": {
            "type": "string",
            "description": "absolute path to the file to import"
          },
          "tableName": {
            "type": "string"
          },
          "truncateFirst": {
            "type": "boolean",
            "default": false
          },
          "connectionString": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_copy_between_databases",
      "description": "Copy data between two databases",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "sourceConnectionString",
          "targetConnectionString",
          "tableName"
        ],
        "properties": {
          "where": {
            "type": "string"
          },
          "tableName": {
            "type": "string"
          },
          "truncateTarget": {
            "type": "boolean",
            "default": false
          },
          "sourceConnectionString": {
            "type": "string"
          },
          "targetConnectionString": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "pg_monitor_database",
      "description": "Get real-time monitoring information for a PostgreSQL database",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "includeLocks": {
            "type": "boolean",
            "default": false
          },
          "includeTables": {
            "type": "boolean",
            "default": false
          },
          "includeQueries": {
            "type": "boolean",
            "default": false
          },
          "alertThresholds": {
            "type": "object",
            "properties": {
              "vacuumAge": {
                "type": "integer",
                "description": "Vacuum age threshold in days",
                "exclusiveMinimum": 0
              },
              "cacheHitRatio": {
                "type": "number",
                "maximum": 1,
                "minimum": 0,
                "description": "Cache hit ratio threshold"
              },
              "connectionPercentage": {
                "type": "number",
                "maximum": 100,
                "minimum": 0,
                "description": "Connection usage percentage threshold"
              },
              "deadTuplesPercentage": {
                "type": "number",
                "maximum": 100,
                "minimum": 0,
                "description": "Dead tuples percentage threshold"
              },
              "longRunningQuerySeconds": {
                "type": "number",
                "description": "Long-running query threshold in seconds",
                "exclusiveMinimum": 0
              }
            },
            "description": "Alert thresholds",
            "additionalProperties": false
          },
          "connectionString": {
            "type": "string"
          },
          "includeReplication": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      }
    }
  ],
  "connections": [
    {
      "type": "stdio",
      "bundleUrl": "https://backend.smithery.ai/storage/v1/object/public/bundles/@HenkDz/postgresql-mcp-server/server.mcpb",
      "runtime": "node",
      "configSchema": {
        "type": "object",
        "required": [],
        "properties": {}
      }
    }
  ]
}