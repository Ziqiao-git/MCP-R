{
  "qualifiedName": "@vibheksoni/stealth-browser-mcp",
  "displayName": "Stealth Browser",
  "description": "Supercharge your AI agents with undetectable, real-browser automation that bypasses Cloudflare, banking portals, and social media blocks. Extract UI elements, intercept network traffic, and perform full network debugging via AI chat with a 98.7% success rate on protected sites. Empower your agents to access any website seamlessly with 105 specialized tools designed for real-world workflows.",
  "iconUrl": "https://icons.duckduckgo.com/ip3/github.com.ico",
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@vibheksoni/stealth-browser-mcp",
  "security": null,
  "tools": [
    {
      "name": "spawn_browser",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Spawn a new browser instance.\n\nArgs:\n    headless (bool): Run in headless mode.\n    user_agent (Optional[str]): Custom user agent string.\n    viewport_width (int): Viewport width in pixels.\n    viewport_height (int): Viewport height in pixels.\n    proxy (Optional[str]): Proxy server URL.\n    block_resources (List[str]): List of resource types to block (e.g., ['image', 'font', 'stylesheet']).\n    extra_headers (Dict[str, str]): Additional HTTP headers.\n    user_data_dir (Optional[str]): Path to user data directory for persistent sessions.\n    sandbox (Optional[Any]): Enable browser sandbox. Accepts bool, string ('true'/'false'), int (1/0), or None for auto-detect.\n\nReturns:\n    Dict[str, Any]: Instance information including instance_id.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "proxy": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy",
            "default": null
          },
          "sandbox": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Sandbox",
            "default": null
          },
          "headless": {
            "type": "boolean",
            "title": "Headless",
            "default": false
          },
          "user_agent": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Agent",
            "default": null
          },
          "extra_headers": {
            "type": "object",
            "title": "Extra Headers",
            "default": null,
            "additionalProperties": {
              "type": "string"
            }
          },
          "user_data_dir": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Data Dir",
            "default": null
          },
          "viewport_width": {
            "type": "integer",
            "title": "Viewport Width",
            "default": 1920
          },
          "block_resources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Block Resources",
            "default": null
          },
          "viewport_height": {
            "type": "integer",
            "title": "Viewport Height",
            "default": 1080
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "list_instances",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List all active browser instances.\n\nReturns:\n    List[Dict[str, Any]]: List of browser instances with their current state.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "close_instance",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Close a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if closed successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_instance_state",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get detailed state of a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Complete state information.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "navigate",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Navigate to a URL.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (str): URL to navigate to.\n    wait_until (str): Wait condition - 'load', 'domcontentloaded', or 'networkidle'.\n    timeout (int): Navigation timeout in milliseconds.\n    referrer (Optional[str]): Referrer URL.\n\nReturns:\n    Dict[str, Any]: Navigation result with final URL and title.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "title": "Url"
          },
          "timeout": {
            "type": "integer",
            "title": "Timeout",
            "default": 30000
          },
          "referrer": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referrer",
            "default": null
          },
          "wait_until": {
            "type": "string",
            "title": "Wait Until",
            "default": "load"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "go_back",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Navigate back in history.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if navigation was successful.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "go_forward",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Navigate forward in history.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    bool: True if navigation was successful.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "reload_page",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Reload the current page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    ignore_cache (bool): Whether to ignore cache when reloading.\n\nReturns:\n    bool: True if reload was successful.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "ignore_cache": {
            "type": "boolean",
            "title": "Ignore Cache",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "query_elements",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Query DOM elements.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath (starts with '//').\n    text_filter (Optional[str]): Filter by text content.\n    visible_only (bool): Only return visible elements.\n    limit (Optional[Any]): Maximum number of elements to return.\n\nReturns:\n    List[Dict[str, Any]]: List of matching elements with their properties.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "limit": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "default": null
          },
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "text_filter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text Filter",
            "default": null
          },
          "visible_only": {
            "type": "boolean",
            "title": "Visible Only",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "click_element",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Click an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    text_match (Optional[str]): Click element with matching text.\n    timeout (int): Timeout in milliseconds.\n\nReturns:\n    bool: True if clicked successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "timeout": {
            "type": "integer",
            "title": "Timeout",
            "default": 10000
          },
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "text_match": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text Match",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "type_text",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "   Type text into an input field.\n\n   Args:\n       instance_id (str): Browser instance ID.\n       selector (str): CSS selector or XPath.\n       text (str): Text to type.\n       clear_first (bool): Clear field before typing.\n       delay_ms (int): Delay between keystrokes in milliseconds.\n       parse_newlines (bool): If True, parse \nas Enter key presses.\n       shift_enter (bool): If True, use Shift+Enter instead of Enter (for chat apps).\n\n   Returns:\n       bool: True if typed successfully.\n   ",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector",
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "delay_ms": {
            "type": "integer",
            "title": "Delay Ms",
            "default": 50
          },
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "clear_first": {
            "type": "boolean",
            "title": "Clear First",
            "default": true
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "shift_enter": {
            "type": "boolean",
            "title": "Shift Enter",
            "default": false
          },
          "parse_newlines": {
            "type": "boolean",
            "title": "Parse Newlines",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "paste_text",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Paste text instantly into an input field.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    text (str): Text to paste.\n    clear_first (bool): Clear field before pasting.\n\nReturns:\n    bool: True if pasted successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector",
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "title": "Text"
          },
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "clear_first": {
            "type": "boolean",
            "title": "Clear First",
            "default": true
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "select_option",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Select an option from a dropdown.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the select element.\n    value (Optional[str]): Option value attribute.\n    text (Optional[str]): Option text content.\n    index (Optional[Any]): Option index (0-based). Can be string or int.\n\nReturns:\n    bool: True if selected successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "default": null
          },
          "index": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Index",
            "default": null
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "default": null
          },
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_element_state",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get complete state of an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n\nReturns:\n    Dict[str, Any]: Element state including attributes, style, position, etc.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "wait_for_element",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Wait for an element to appear.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector or XPath.\n    timeout (int): Timeout in milliseconds.\n    visible (bool): Wait for element to be visible.\n    text_content (Optional[str]): Wait for specific text content.\n\nReturns:\n    bool: True if element found.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "timeout": {
            "type": "integer",
            "title": "Timeout",
            "default": 30000
          },
          "visible": {
            "type": "boolean",
            "title": "Visible",
            "default": true
          },
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "text_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text Content",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "scroll_page",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Scroll the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    direction (str): 'down', 'up', 'left', 'right', 'top', or 'bottom'.\n    amount (int): Pixels to scroll (ignored for 'top' and 'bottom').\n    smooth (bool): Use smooth scrolling.\n\nReturns:\n    bool: True if scrolled successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "amount": {
            "type": "integer",
            "title": "Amount",
            "default": 500
          },
          "smooth": {
            "type": "boolean",
            "title": "Smooth",
            "default": true
          },
          "direction": {
            "type": "string",
            "title": "Direction",
            "default": "down"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "execute_script",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Execute JavaScript in page context.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    script (str): JavaScript code to execute.\n    args (Optional[List[Any]]): Arguments to pass to the script.\n\nReturns:\n    Dict[str, Any]: Script execution result.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "script"
        ],
        "properties": {
          "args": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ],
            "title": "Args",
            "default": null
          },
          "script": {
            "type": "string",
            "title": "Script"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_page_content",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get page HTML and text content.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    include_frames (bool): Include iframe information.\n\nReturns:\n    Dict[str, Any]: Page content including HTML, text, and metadata.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_frames": {
            "type": "boolean",
            "title": "Include Frames",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "take_screenshot",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Take a screenshot of the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    full_page (bool): Capture full page (not just viewport).\n    format (str): Image format ('png' or 'jpeg').\n    file_path (Optional[str]): Optional file path to save screenshot to.\n\nReturns:\n    Union[str, Dict]: File path if file_path provided, otherwise optimized base64 data or file info dict.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "format": {
            "type": "string",
            "title": "Format",
            "default": "png"
          },
          "file_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Path",
            "default": null
          },
          "full_page": {
            "type": "boolean",
            "title": "Full Page",
            "default": false
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ],
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "list_network_requests",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List captured network requests.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    filter_type (Optional[str]): Filter by resource type (e.g., 'image', 'script', 'xhr').\n\nReturns:\n    Union[List[Dict[str, Any]], Dict[str, Any]]: List of network requests, or file metadata if response too large.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "filter_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filter Type",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": true
                }
              },
              {
                "type": "object",
                "additionalProperties": true
              }
            ],
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_request_details",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get detailed information about a network request.\n\nArgs:\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Request details including headers, cookies, and body.",
      "inputSchema": {
        "type": "object",
        "required": [
          "request_id"
        ],
        "properties": {
          "request_id": {
            "type": "string",
            "title": "Request Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_response_details",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get response details for a network request.\n\nArgs:\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[Dict[str, Any]]: Response details including status, headers, and metadata.",
      "inputSchema": {
        "type": "object",
        "required": [
          "request_id"
        ],
        "properties": {
          "request_id": {
            "type": "string",
            "title": "Request Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_response_content",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get response body content.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    request_id (str): Network request ID.\n\nReturns:\n    Optional[str]: Response body as text (base64 encoded for binary).",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "request_id"
        ],
        "properties": {
          "request_id": {
            "type": "string",
            "title": "Request Id"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "modify_headers",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Modify request headers for future requests.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    headers (Dict[str, str]): Headers to add/modify.\n\nReturns:\n    bool: True if modified successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "headers"
        ],
        "properties": {
          "headers": {
            "type": "object",
            "title": "Headers",
            "additionalProperties": {
              "type": "string"
            }
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_cookies",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get cookies for current page or specific URLs.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    urls (Optional[List[str]]): Optional list of URLs to get cookies for.\n\nReturns:\n    List[Dict[str, Any]]: List of cookies.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "urls": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Urls",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "set_cookie",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Set a cookie.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    name (str): Cookie name.\n    value (str): Cookie value.\n    url (Optional[str]): The request-URI to associate with the cookie.\n    domain (Optional[str]): Cookie domain.\n    path (str): Cookie path.\n    secure (bool): Secure flag.\n    http_only (bool): HttpOnly flag.\n    same_site (Optional[str]): SameSite attribute ('Strict', 'Lax', or 'None').\n\nReturns:\n    bool: True if set successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "name",
          "value"
        ],
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "default": null
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "path": {
            "type": "string",
            "title": "Path",
            "default": "/"
          },
          "value": {
            "type": "string",
            "title": "Value"
          },
          "domain": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Domain",
            "default": null
          },
          "secure": {
            "type": "boolean",
            "title": "Secure",
            "default": false
          },
          "http_only": {
            "type": "boolean",
            "title": "Http Only",
            "default": false
          },
          "same_site": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Same Site",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "clear_cookies",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clear cookies.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (Optional[str]): Optional URL to clear cookies for (clears all if not specified).\n\nReturns:\n    bool: True if cleared successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_debug_view",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get comprehensive debug view with all logged errors and statistics.\n\nArgs:\n    max_errors (int): Maximum number of errors to include (default: 50).\n    max_warnings (int): Maximum number of warnings to include (default: 50).\n    max_info (int): Maximum number of info logs to include (default: 50).\n    include_all (bool): Include all logs regardless of limits (default: False).\n\nReturns:\n    Dict[str, Any]: Debug information including errors, warnings, and statistics.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "max_info": {
            "type": "integer",
            "title": "Max Info",
            "default": 50
          },
          "max_errors": {
            "type": "integer",
            "title": "Max Errors",
            "default": 50
          },
          "include_all": {
            "type": "boolean",
            "title": "Include All",
            "default": false
          },
          "max_warnings": {
            "type": "integer",
            "title": "Max Warnings",
            "default": 50
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "clear_debug_view",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clear all debug logs and statistics with timeout protection.\n\nReturns:\n    bool: True if cleared successfully.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "export_debug_logs",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Export debug logs to a file using the fastest available method with timeout protection.\n\nArgs:\n    filename (str): Name of the file to export to.\n    max_errors (int): Maximum number of errors to export (default: 100).\n    max_warnings (int): Maximum number of warnings to export (default: 100).\n    max_info (int): Maximum number of info logs to export (default: 100).\n    include_all (bool): Include all logs regardless of limits (default: False).\n    format (str): Export format: 'json', 'pickle', 'gzip-pickle', 'auto' (default: 'auto').\n                 'auto' chooses fastest format based on data size:\n                 - Small data (<100 items): JSON (human readable)\n                 - Medium data (100-1000 items): Pickle (fast binary)\n                 - Large data (>1000 items): Gzip-Pickle (fastest, compressed)\n\nReturns:\n    str: Path to the exported file.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "title": "Format",
            "default": "auto"
          },
          "filename": {
            "type": "string",
            "title": "Filename",
            "default": "debug_log.json"
          },
          "max_info": {
            "type": "integer",
            "title": "Max Info",
            "default": 100
          },
          "max_errors": {
            "type": "integer",
            "title": "Max Errors",
            "default": 100
          },
          "include_all": {
            "type": "boolean",
            "title": "Include All",
            "default": false
          },
          "max_warnings": {
            "type": "integer",
            "title": "Max Warnings",
            "default": 100
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_debug_lock_status",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get current debug logger lock status for debugging hanging exports.\n\nReturns:\n    Dict[str, Any]: Lock status information.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "list_tabs",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List all tabs for a browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    List[Dict[str, str]]: List of tabs with their details.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "switch_tab",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Switch to a specific tab by bringing it to front.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    tab_id (str): Target tab ID to switch to.\n\nReturns:\n    bool: True if switched successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "tab_id"
        ],
        "properties": {
          "tab_id": {
            "type": "string",
            "title": "Tab Id"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "close_tab",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Close a specific tab.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    tab_id (str): Tab ID to close.\n\nReturns:\n    bool: True if closed successfully.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "tab_id"
        ],
        "properties": {
          "tab_id": {
            "type": "string",
            "title": "Tab Id"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "boolean",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "get_active_tab",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get information about the currently active tab.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    Dict[str, Any]: Active tab information.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "new_tab",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Open a new tab in the browser instance.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    url (str): URL to open in the new tab.\n\nReturns:\n    Dict[str, Any]: New tab information.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "url": {
            "type": "string",
            "title": "Url",
            "default": "about:blank"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_styles",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract complete styling information from an element.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_computed (bool): Include computed styles.\n    include_css_rules (bool): Include matching CSS rules.\n    include_pseudo (bool): Include pseudo-element styles (::before, ::after).\n    include_inheritance (bool): Include style inheritance chain.\n\nReturns:\n    Dict[str, Any]: Complete styling data including computed styles, CSS rules, pseudo-elements.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_pseudo": {
            "type": "boolean",
            "title": "Include Pseudo",
            "default": true
          },
          "include_computed": {
            "type": "boolean",
            "title": "Include Computed",
            "default": true
          },
          "include_css_rules": {
            "type": "boolean",
            "title": "Include Css Rules",
            "default": true
          },
          "include_inheritance": {
            "type": "boolean",
            "title": "Include Inheritance",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_structure",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract complete HTML structure and DOM information.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Include child elements.\n    include_attributes (bool): Include all attributes.\n    include_data_attributes (bool): Include data-* attributes specifically.\n    max_depth (int): Maximum depth for children extraction.\n\nReturns:\n    Dict[str, Any]: HTML structure, attributes, position, and children data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "max_depth": {
            "type": "integer",
            "title": "Max Depth",
            "default": 3
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_children": {
            "type": "boolean",
            "title": "Include Children",
            "default": false
          },
          "include_attributes": {
            "type": "boolean",
            "title": "Include Attributes",
            "default": true
          },
          "include_data_attributes": {
            "type": "boolean",
            "title": "Include Data Attributes",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_events",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract complete event listener and JavaScript handler information.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_inline (bool): Include inline event handlers (onclick, etc.).\n    include_listeners (bool): Include addEventListener attached handlers.\n    include_framework (bool): Include framework-specific handlers (React, Vue, etc.).\n    analyze_handlers (bool): Analyze handler functions for full details (can be large).\n\nReturns:\n    Dict[str, Any]: Event listeners, inline handlers, framework handlers, detected frameworks.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_inline": {
            "type": "boolean",
            "title": "Include Inline",
            "default": true
          },
          "analyze_handlers": {
            "type": "boolean",
            "title": "Analyze Handlers",
            "default": false
          },
          "include_framework": {
            "type": "boolean",
            "title": "Include Framework",
            "default": true
          },
          "include_listeners": {
            "type": "boolean",
            "title": "Include Listeners",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_animations",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract CSS animations, transitions, and transforms.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_css_animations (bool): Include CSS @keyframes animations.\n    include_transitions (bool): Include CSS transitions.\n    include_transforms (bool): Include CSS transforms.\n    analyze_keyframes (bool): Analyze keyframe rules.\n\nReturns:\n    Dict[str, Any]: Animation data, transition data, transform data, keyframe rules.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "analyze_keyframes": {
            "type": "boolean",
            "title": "Analyze Keyframes",
            "default": true
          },
          "include_transforms": {
            "type": "boolean",
            "title": "Include Transforms",
            "default": true
          },
          "include_transitions": {
            "type": "boolean",
            "title": "Include Transitions",
            "default": true
          },
          "include_css_animations": {
            "type": "boolean",
            "title": "Include Css Animations",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_assets",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract all assets related to an element (images, fonts, etc.).\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_images (bool): Include img src and related images.\n    include_backgrounds (bool): Include background images.\n    include_fonts (bool): Include font information.\n    fetch_external (bool): Whether to fetch external assets for analysis.\n\nReturns:\n    Dict[str, Any]: Images, background images, fonts, icons, videos, audio assets.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_fonts": {
            "type": "boolean",
            "title": "Include Fonts",
            "default": true
          },
          "fetch_external": {
            "type": "boolean",
            "title": "Fetch External",
            "default": false
          },
          "include_images": {
            "type": "boolean",
            "title": "Include Images",
            "default": true
          },
          "include_backgrounds": {
            "type": "boolean",
            "title": "Include Backgrounds",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_styles_cdp",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract element styles using direct CDP calls (no JavaScript evaluation).\nThis prevents hanging issues by using nodriver's native CDP methods.\n\nArgs:\n    instance_id (str): Browser instance ID\n    selector (str): CSS selector for the element\n    include_computed (bool): Include computed styles\n    include_css_rules (bool): Include matching CSS rules\n    include_pseudo (bool): Include pseudo-element styles\n    include_inheritance (bool): Include style inheritance chain\n\nReturns:\n    Dict[str, Any]: Styling data extracted using CDP",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_pseudo": {
            "type": "boolean",
            "title": "Include Pseudo",
            "default": true
          },
          "include_computed": {
            "type": "boolean",
            "title": "Include Computed",
            "default": true
          },
          "include_css_rules": {
            "type": "boolean",
            "title": "Include Css Rules",
            "default": true
          },
          "include_inheritance": {
            "type": "boolean",
            "title": "Include Inheritance",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_related_files",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Discover and analyze related CSS/JS files for context.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    analyze_css (bool): Analyze linked CSS files.\n    analyze_js (bool): Analyze linked JS files.\n    follow_imports (bool): Follow @import and module imports (uses network).\n    max_depth (int): Maximum depth for following imports.\n\nReturns:\n    Dict[str, Any]: Stylesheets, scripts, imports, modules, framework detection.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "max_depth": {
            "type": "integer",
            "title": "Max Depth",
            "default": 2
          },
          "analyze_js": {
            "type": "boolean",
            "title": "Analyze Js",
            "default": true
          },
          "analyze_css": {
            "type": "boolean",
            "title": "Analyze Css",
            "default": true
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "follow_imports": {
            "type": "boolean",
            "title": "Follow Imports",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "clone_element_complete",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Master function that extracts ALL element data using specialized functions.\n\nThis is the ultimate element cloning tool that combines all extraction methods.\nUse this when you want complete element fidelity for recreation or analysis.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    extraction_options (Optional[str]): Dict specifying what to extract and options for each.\n        Example: {\n            'styles': {'include_computed': True, 'include_pseudo': True},\n            'structure': {'include_children': True, 'max_depth': 2},\n            'events': {'include_framework': True, 'analyze_handlers': False},\n            'animations': {'analyze_keyframes': True},\n            'assets': {'fetch_external': False},\n            'related_files': {'follow_imports': True, 'max_depth': 1}\n        }\n\nReturns:\n    Dict[str, Any]: Complete element clone with styles, structure, events, animations, assets, related files.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "extraction_options": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extraction Options",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "hot_reload",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Hot reload all modules without restarting the server.\n\nReturns:\n    str: Status message.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "reload_status",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Check the status of loaded modules.\n\nReturns:\n    str: Module status information.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "string",
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "validate_browser_environment_tool",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Validate browser environment and diagnose potential issues.\n\nReturns:\n    Dict[str, Any]: Environment validation results with platform info and recommendations",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "clone_element_progressive",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clone element progressively - returns lightweight base structure with element_id.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to extract child elements.\n\nReturns:\n    Dict[str, Any]: Base structure with element_id for progressive expansion.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_children": {
            "type": "boolean",
            "title": "Include Children",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "expand_styles",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Expand styles data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    categories (Optional[List[str]]): Style categories to include (layout, typography, colors, spacing, borders, backgrounds, effects, animation).\n    properties (Optional[List[str]]): Specific CSS property names to include.\n\nReturns:\n    Dict[str, Any]: Filtered styles data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "categories": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Categories",
            "default": null
          },
          "element_id": {
            "type": "string",
            "title": "Element Id"
          },
          "properties": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Properties",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "expand_events",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Expand event listeners data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    event_types (Optional[List[str]]): Event types or sources to include (click, react, inline, addEventListener).\n\nReturns:\n    Dict[str, Any]: Filtered event listeners data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "element_id": {
            "type": "string",
            "title": "Element Id"
          },
          "event_types": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Event Types",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "expand_children",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Expand children data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    depth_range (Optional[List]): [min_depth, max_depth] range to include.\n    max_count (Optional[Any]): Maximum number of children to return.\n\nReturns:\n    Dict[str, Any]: Filtered children data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "max_count": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Max Count",
            "default": null
          },
          "element_id": {
            "type": "string",
            "title": "Element Id"
          },
          "depth_range": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              }
            ],
            "title": "Depth Range",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "expand_css_rules",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Expand CSS rules data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n    source_types (Optional[List[str]]): CSS rule sources to include (inline, external stylesheet URLs).\n\nReturns:\n    Dict[str, Any]: Filtered CSS rules data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "element_id": {
            "type": "string",
            "title": "Element Id"
          },
          "source_types": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Types",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "expand_pseudo_elements",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Expand pseudo-elements data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n\nReturns:\n    Dict[str, Any]: Pseudo-elements data (::before, ::after, etc.).",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "element_id": {
            "type": "string",
            "title": "Element Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "expand_animations",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Expand animations and fonts data for a stored element.\n\nArgs:\n    element_id (str): Element ID from clone_element_progressive().\n\nReturns:\n    Dict[str, Any]: Animations, transitions, and fonts data.",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "element_id": {
            "type": "string",
            "title": "Element Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "list_stored_elements",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List all stored elements with their basic info.\n\nReturns:\n    Dict[str, Any]: List of stored elements with metadata.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "clear_stored_element",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clear a specific stored element.\n\nArgs:\n    element_id (str): Element ID to clear.\n\nReturns:\n    Dict[str, Any]: Success/error message.",
      "inputSchema": {
        "type": "object",
        "required": [
          "element_id"
        ],
        "properties": {
          "element_id": {
            "type": "string",
            "title": "Element Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "clear_all_elements",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clear all stored elements.\n\nReturns:\n    Dict[str, Any]: Success message.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "clone_element_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clone element completely and save to file, returning file path instead of full data.\n\nThis is ideal when you want complete element data but don't want to overwhelm\nthe response with large JSON objects. The data is saved to a JSON file that\ncan be read later.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    extraction_options (Optional[str]): JSON string with extraction options.\n\nReturns:\n    Dict[str, Any]: File path and summary information about the cloned element.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "extraction_options": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Extraction Options",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_complete_element_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract complete element using working comprehensive cloner and save to file.\n\nThis uses the proven comprehensive extraction logic that returns large amounts\nof data, but saves it to a file instead of overwhelming the response.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to include child elements.\n\nReturns:\n    Dict[str, Any]: File path and concise summary instead of massive data dump.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_children": {
            "type": "boolean",
            "title": "Include Children",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_complete_element_cdp",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract complete element using native CDP methods for 100% accuracy.\n\nThis uses Chrome DevTools Protocol's native methods to extract:\n- Complete computed styles via CSS.getComputedStyleForNode\n- Matched CSS rules via CSS.getMatchedStylesForNode  \n- Event listeners via DOMDebugger.getEventListeners\n- Complete DOM structure and attributes\n\nThis provides the most accurate element cloning possible by bypassing\nJavaScript limitations and using CDP's direct browser access.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Whether to include child elements.\n\nReturns:\n    Dict[str, Any]: Complete element data with 100% accuracy.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_children": {
            "type": "boolean",
            "title": "Include Children",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_styles_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract element styles and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_computed (bool): Include computed styles.\n    include_css_rules (bool): Include matching CSS rules.\n    include_pseudo (bool): Include pseudo-element styles.\n    include_inheritance (bool): Include style inheritance chain.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted styles.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_pseudo": {
            "type": "boolean",
            "title": "Include Pseudo",
            "default": true
          },
          "include_computed": {
            "type": "boolean",
            "title": "Include Computed",
            "default": true
          },
          "include_css_rules": {
            "type": "boolean",
            "title": "Include Css Rules",
            "default": true
          },
          "include_inheritance": {
            "type": "boolean",
            "title": "Include Inheritance",
            "default": false
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_structure_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract element structure and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_children (bool): Include child elements.\n    include_attributes (bool): Include all attributes.\n    include_data_attributes (bool): Include data-* attributes.\n    max_depth (int): Maximum depth for children extraction.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted structure.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "max_depth": {
            "type": "integer",
            "title": "Max Depth",
            "default": 3
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_children": {
            "type": "boolean",
            "title": "Include Children",
            "default": false
          },
          "include_attributes": {
            "type": "boolean",
            "title": "Include Attributes",
            "default": true
          },
          "include_data_attributes": {
            "type": "boolean",
            "title": "Include Data Attributes",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_events_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract element events and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_inline (bool): Include inline event handlers.\n    include_listeners (bool): Include addEventListener handlers.\n    include_framework (bool): Include framework-specific handlers.\n    analyze_handlers (bool): Analyze handler functions.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted events.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_inline": {
            "type": "boolean",
            "title": "Include Inline",
            "default": true
          },
          "analyze_handlers": {
            "type": "boolean",
            "title": "Analyze Handlers",
            "default": true
          },
          "include_framework": {
            "type": "boolean",
            "title": "Include Framework",
            "default": true
          },
          "include_listeners": {
            "type": "boolean",
            "title": "Include Listeners",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_animations_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract element animations and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_css_animations (bool): Include CSS animations.\n    include_transitions (bool): Include CSS transitions.\n    include_transforms (bool): Include CSS transforms.\n    analyze_keyframes (bool): Analyze keyframe rules.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted animations.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "analyze_keyframes": {
            "type": "boolean",
            "title": "Analyze Keyframes",
            "default": true
          },
          "include_transforms": {
            "type": "boolean",
            "title": "Include Transforms",
            "default": true
          },
          "include_transitions": {
            "type": "boolean",
            "title": "Include Transitions",
            "default": true
          },
          "include_css_animations": {
            "type": "boolean",
            "title": "Include Css Animations",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "extract_element_assets_to_file",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Extract element assets and save to file, returning file path.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    selector (str): CSS selector for the element.\n    include_images (bool): Include images.\n    include_backgrounds (bool): Include background images.\n    include_fonts (bool): Include font information.\n    fetch_external (bool): Fetch external assets.\n\nReturns:\n    Dict[str, Any]: File path and summary of extracted assets.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "selector"
        ],
        "properties": {
          "selector": {
            "type": "string",
            "title": "Selector"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "include_fonts": {
            "type": "boolean",
            "title": "Include Fonts",
            "default": true
          },
          "fetch_external": {
            "type": "boolean",
            "title": "Fetch External",
            "default": false
          },
          "include_images": {
            "type": "boolean",
            "title": "Include Images",
            "default": true
          },
          "include_backgrounds": {
            "type": "boolean",
            "title": "Include Backgrounds",
            "default": true
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "list_clone_files",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List all element clone files saved to disk.\n\nReturns:\n    List[Dict[str, Any]]: List of clone files with metadata and file information.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "cleanup_clone_files",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Clean up old clone files to save disk space.\n\nArgs:\n    max_age_hours (int): Maximum age in hours for files to keep.\n\nReturns:\n    Dict[str, int]: Number of files deleted.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "max_age_hours": {
            "type": "integer",
            "title": "Max Age Hours",
            "default": 24
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": {
          "type": "integer"
        }
      }
    },
    {
      "name": "list_cdp_commands",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List all available CDP Runtime commands for function execution.\n\nReturns:\n    List[str]: List of available CDP command names.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "execute_cdp_command",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Execute any CDP Runtime command with given parameters.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    command (str): CDP command name (e.g., 'evaluate', 'callFunctionOn').\n    params (Dict[str, Any], optional): Command parameters as a dictionary.\n            IMPORTANT: Use snake_case parameter names (e.g., 'return_by_value') \n            NOT camelCase ('returnByValue'). The nodriver library expects \n            Python-style parameter names.\n\nReturns:\n    Dict[str, Any]: Command execution result.\n    \nExample:\n    # Correct - use snake_case\n    params = {\"expression\": \"document.title\", \"return_by_value\": True}\n    \n    params = {\"expression\": \"document.title\", \"returnByValue\": True}",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "command"
        ],
        "properties": {
          "params": {
            "type": "object",
            "title": "Params",
            "default": null,
            "additionalProperties": true
          },
          "command": {
            "type": "string",
            "title": "Command"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_execution_contexts",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get all available JavaScript execution contexts.\n\nArgs:\n    instance_id (str): Browser instance ID.\n\nReturns:\n    List[Dict[str, Any]]: List of execution contexts with their details.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "discover_global_functions",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Discover all global JavaScript functions available in the page.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    context_id (str, optional): Optional execution context ID.\n\nReturns:\n    List[Dict[str, Any]]: List of discovered functions with their details.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id"
        ],
        "properties": {
          "context_id": {
            "type": "string",
            "title": "Context Id",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "discover_object_methods",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Discover methods of a specific JavaScript object.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    object_path (str): Path to the object (e.g., 'document', 'window.localStorage').\n\nReturns:\n    List[Dict[str, Any]]: List of discovered methods.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "object_path"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "object_path": {
            "type": "string",
            "title": "Object Path"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "call_javascript_function",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Call a JavaScript function with arguments.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_path (str): Full path to the function (e.g., 'document.getElementById').\n    args (List[Any], optional): List of arguments to pass to the function.\n\nReturns:\n    Dict[str, Any]: Function call result.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "function_path"
        ],
        "properties": {
          "args": {
            "type": "array",
            "items": {},
            "title": "Args",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "function_path": {
            "type": "string",
            "title": "Function Path"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "inspect_function_signature",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Inspect a JavaScript function's signature and details.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_path (str): Full path to the function.\n\nReturns:\n    Dict[str, Any]: Function signature and details.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "function_path"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "function_path": {
            "type": "string",
            "title": "Function Path"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "inject_and_execute_script",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Inject and execute custom JavaScript code.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    script_code (str): JavaScript code to execute.\n    context_id (str, optional): Optional execution context ID.\n\nReturns:\n    Dict[str, Any]: Script execution result.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "script_code"
        ],
        "properties": {
          "context_id": {
            "type": "string",
            "title": "Context Id",
            "default": null
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "script_code": {
            "type": "string",
            "title": "Script Code"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "create_persistent_function",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Create a persistent JavaScript function that survives page reloads.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_name (str): Name for the function.\n    function_code (str): JavaScript function code.\n\nReturns:\n    Dict[str, Any]: Function creation result.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "function_name",
          "function_code"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "function_code": {
            "type": "string",
            "title": "Function Code"
          },
          "function_name": {
            "type": "string",
            "title": "Function Name"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "execute_function_sequence",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Execute a sequence of JavaScript function calls.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    function_calls (List[Dict[str, Any]]): List of function calls, each with 'function_path', 'args', and optional 'context_id'.\n\nReturns:\n    List[Dict[str, Any]]: List of function call results.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "function_calls"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "function_calls": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Function Calls"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "title": "_WrappedResult",
        "required": [
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true
            },
            "title": "Result"
          }
        },
        "x-fastmcp-wrap-result": true
      }
    },
    {
      "name": "create_python_binding",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Create a binding that allows JavaScript to call Python functions.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    binding_name (str): Name for the binding.\n    python_code (str): Python function code (as string).\n\nReturns:\n    Dict[str, Any]: Binding creation result.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "binding_name",
          "python_code"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "python_code": {
            "type": "string",
            "title": "Python Code"
          },
          "binding_name": {
            "type": "string",
            "title": "Binding Name"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "execute_python_in_browser",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Execute Python code by translating it to JavaScript.\n\nArgs:\n    instance_id (str): Browser instance ID.\n    python_code (str): Python code to translate and execute.\n\nReturns:\n    Dict[str, Any]: Execution result.",
      "inputSchema": {
        "type": "object",
        "required": [
          "instance_id",
          "python_code"
        ],
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id"
          },
          "python_code": {
            "type": "string",
            "title": "Python Code"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_function_executor_info",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get information about the CDP function executor state.\n\nArgs:\n    instance_id (str, optional): Optional browser instance ID for specific info.\n\nReturns:\n    Dict[str, Any]: Function executor state and capabilities.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instance_id": {
            "type": "string",
            "title": "Instance Id",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "create_dynamic_hook",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Create a new dynamic hook with AI-generated Python function.\n\nThis is the new powerful hook system that allows AI to write custom Python functions\nthat process network requests in real-time with no pending state.\n\nArgs:\n    name (str): Human-readable hook name\n    requirements (Dict[str, Any]): Matching criteria (url_pattern, method, resource_type, custom_condition)\n    function_code (str): Python function code that processes requests (must define process_request(request))\n    instance_ids (Optional[List[str]]): Browser instances to apply hook to (all if None)\n    priority (int): Hook priority (lower = higher priority)\n    \nReturns:\n    Dict[str, Any]: Hook creation result with hook_id\n    \nExample function_code:\n    ```python\n    def process_request(request):\n        if \"example.com\" in request[\"url\"]:\n            return HookAction(action=\"redirect\", url=\"https://httpbin.org/get\")\n        return HookAction(action=\"continue\")\n    ```",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "requirements",
          "function_code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "priority": {
            "type": "integer",
            "title": "Priority",
            "default": 100
          },
          "instance_ids": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Instance Ids",
            "default": null
          },
          "requirements": {
            "type": "object",
            "title": "Requirements",
            "additionalProperties": true
          },
          "function_code": {
            "type": "string",
            "title": "Function Code"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "create_simple_dynamic_hook",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Create a simple dynamic hook using predefined templates (easier for AI).\n\nArgs:\n    name (str): Hook name\n    url_pattern (str): URL pattern to match\n    action (str): Action type - 'block', 'redirect', 'add_headers', or 'log'\n    target_url (Optional[str]): Target URL for redirect action\n    custom_headers (Optional[Dict[str, str]]): Headers to add for add_headers action\n    instance_ids (Optional[List[str]]): Browser instances to apply hook to\n    \nReturns:\n    Dict[str, Any]: Hook creation result",
      "inputSchema": {
        "type": "object",
        "required": [
          "name",
          "url_pattern",
          "action"
        ],
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "target_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target Url",
            "default": null
          },
          "url_pattern": {
            "type": "string",
            "title": "Url Pattern"
          },
          "instance_ids": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Instance Ids",
            "default": null
          },
          "custom_headers": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Custom Headers",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "list_dynamic_hooks",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "List all dynamic hooks.\n\nArgs:\n    instance_id (Optional[str]): Optional filter by browser instance\n    \nReturns:\n    Dict[str, Any]: List of hooks with details and statistics",
      "inputSchema": {
        "type": "object",
        "properties": {
          "instance_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instance Id",
            "default": null
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_dynamic_hook_details",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get detailed information about a specific dynamic hook.\n\nArgs:\n    hook_id (str): Hook identifier\n    \nReturns:\n    Dict[str, Any]: Detailed hook information including function code",
      "inputSchema": {
        "type": "object",
        "required": [
          "hook_id"
        ],
        "properties": {
          "hook_id": {
            "type": "string",
            "title": "Hook Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "remove_dynamic_hook",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Remove a dynamic hook.\n\nArgs:\n    hook_id (str): Hook identifier to remove\n    \nReturns:\n    Dict[str, Any]: Removal status",
      "inputSchema": {
        "type": "object",
        "required": [
          "hook_id"
        ],
        "properties": {
          "hook_id": {
            "type": "string",
            "title": "Hook Id"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_hook_documentation",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get comprehensive documentation for creating hook functions (AI learning).\n\nReturns:\n    Dict[str, Any]: Documentation of request object structure and HookAction types",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_hook_examples",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get example hook functions for AI learning.\n\nReturns:\n    Dict[str, Any]: Collection of example hook functions with explanations",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_hook_requirements_documentation",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get documentation on hook requirements and matching criteria.\n\nReturns:\n    Dict[str, Any]: Requirements documentation and best practices",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "get_hook_common_patterns",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Get common hook patterns and use cases.\n\nReturns:\n    Dict[str, Any]: Common patterns like ad blocking, API proxying, etc.",
      "inputSchema": {
        "type": "object",
        "properties": {}
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    },
    {
      "name": "validate_hook_function",
      "_meta": {
        "_fastmcp": {
          "tags": []
        }
      },
      "description": "Validate hook function code for common issues before creating.\n\nArgs:\n    function_code (str): Python function code to validate\n    \nReturns:\n    Dict[str, Any]: Validation results with issues and warnings",
      "inputSchema": {
        "type": "object",
        "required": [
          "function_code"
        ],
        "properties": {
          "function_code": {
            "type": "string",
            "title": "Function Code"
          }
        }
      },
      "outputSchema": {
        "type": "object",
        "additionalProperties": true
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@vibheksoni/stealth-browser-mcp/mcp",
      "configSchema": {
        "type": "object",
        "required": [],
        "properties": {
          "debug": {
            "type": "boolean",
            "default": false,
            "description": "Enable debug logging for troubleshooting"
          },
          "timeout": {
            "type": "number",
            "default": 30000,
            "description": "Request timeout in milliseconds"
          },
          "headless": {
            "type": "boolean",
            "default": true,
            "description": "Run browser in headless mode (recommended for production)"
          }
        }
      }
    }
  ]
}