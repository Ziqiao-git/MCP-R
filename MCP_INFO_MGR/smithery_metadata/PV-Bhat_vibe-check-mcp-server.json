{
  "qualifiedName": "@PV-Bhat/vibe-check-mcp-server",
  "displayName": "Vibe Check",
  "description": "Tool to Prevent AI tunnel-vision in critical workflows. \nVibe Check MCP v2.7 introduces Chain-Pattern Interrupts (CPI) to enhance your infrastructure stack. mitigates over-engineering, scope creep, and misalignment by injecting Socratic checkpoints into agent reasoning. - Supports Gemini API, OpenRouter and OpenAI models. \n- Logs errors for continuous improvement. \n- Trusted by 30k+ developers. \n- Strong CI and Security testing protocol built in. \nIntegrate this metacognitive guardrail into your workflows, data pipelines, or agent-development stacks for robust AI safety and alignment. \nVisit https://pruthvibhat.com/work/vibecheck-mcp/ for more details. \n\nLinks: https://murst.org/ https://pruthvibhat.com/ \nAuthor: Pruthvi Bhat \nTags: metacognition, CPI, AI-safety, agent-frameworks, infrastructure-tools,\n\n",
  "iconUrl": "https://spjawbfpwezjfmicopsl.supabase.co/storage/v1/object/public/server-icons/a6d1ad97-5803-46a0-81b5-73f6e0cc1c2e.png",
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@PV-Bhat/vibe-check-mcp-server",
  "security": null,
  "tools": [
    {
      "name": "vibe_check",
      "description": "Metacognitive questioning tool that identifies assumptions and breaks tunnel vision to prevent cascading errors",
      "inputSchema": {
        "type": "object",
        "required": [
          "goal",
          "plan"
        ],
        "properties": {
          "goal": {
            "type": "string",
            "examples": [
              "Ship CPI v2.5 with zero regressions"
            ],
            "description": "The agent's current goal"
          },
          "plan": {
            "type": "string",
            "examples": [
              "1) Write tests 2) Refactor 3) Canary rollout"
            ],
            "description": "The agent's detailed plan"
          },
          "progress": {
            "type": "string",
            "examples": [
              "Finished step 1"
            ],
            "description": "The agent's progress so far"
          },
          "sessionId": {
            "type": "string",
            "examples": [
              "session-123"
            ],
            "description": "Optional session ID for state management"
          },
          "userPrompt": {
            "type": "string",
            "examples": [
              "Summarize the repo"
            ],
            "description": "The original user prompt"
          },
          "taskContext": {
            "type": "string",
            "examples": [
              "repo: vibe-check-mcp @2.5.0"
            ],
            "description": "The context of the current task"
          },
          "modelOverride": {
            "type": "object",
            "examples": [
              {
                "model": "gemini-2.5-pro",
                "provider": "gemini"
              }
            ],
            "required": [],
            "properties": {
              "model": {
                "type": "string"
              },
              "provider": {
                "enum": [
                  "gemini",
                  "openai",
                  "openrouter"
                ],
                "type": "string"
              }
            }
          },
          "uncertainties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "uncertain about deployment"
              ]
            ],
            "description": "The agent's uncertainties"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "vibe_learn",
      "description": "Pattern recognition system that tracks common errors and solutions to prevent recurring issues",
      "inputSchema": {
        "type": "object",
        "required": [
          "mistake",
          "category"
        ],
        "properties": {
          "type": {
            "enum": [
              "mistake",
              "preference",
              "success"
            ],
            "type": "string",
            "examples": [
              "mistake"
            ],
            "description": "Type of learning entry"
          },
          "mistake": {
            "type": "string",
            "examples": [
              "Skipped writing tests"
            ],
            "description": "One-sentence description of the learning entry"
          },
          "category": {
            "enum": [
              "Complex Solution Bias",
              "Feature Creep",
              "Premature Implementation",
              "Misalignment",
              "Overtooling",
              "Preference",
              "Success",
              "Other"
            ],
            "type": "string",
            "examples": [
              "Premature Implementation"
            ],
            "description": "Category (standard categories: Complex Solution Bias, Feature Creep, Premature Implementation, Misalignment, Overtooling, Preference, Success, Other)"
          },
          "solution": {
            "type": "string",
            "examples": [
              "Added regression tests"
            ],
            "description": "How it was corrected (if applicable)"
          },
          "sessionId": {
            "type": "string",
            "examples": [
              "session-123"
            ],
            "description": "Optional session ID for state management"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "update_constitution",
      "description": "Append a constitutional rule for this session (in-memory)",
      "inputSchema": {
        "type": "object",
        "required": [
          "sessionId",
          "rule"
        ],
        "properties": {
          "rule": {
            "type": "string",
            "examples": [
              "Always write tests first"
            ]
          },
          "sessionId": {
            "type": "string",
            "examples": [
              "session-123"
            ]
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "reset_constitution",
      "description": "Overwrite all constitutional rules for this session",
      "inputSchema": {
        "type": "object",
        "required": [
          "sessionId",
          "rules"
        ],
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": [
              [
                "Be kind",
                "Avoid loops"
              ]
            ]
          },
          "sessionId": {
            "type": "string",
            "examples": [
              "session-123"
            ]
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "check_constitution",
      "description": "Return the current constitution rules for this session",
      "inputSchema": {
        "type": "object",
        "required": [
          "sessionId"
        ],
        "properties": {
          "sessionId": {
            "type": "string",
            "examples": [
              "session-123"
            ]
          }
        },
        "additionalProperties": false
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@PV-Bhat/vibe-check-mcp-server/mcp",
      "configSchema": {}
    }
  ]
}