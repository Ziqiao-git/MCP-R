{
  "qualifiedName": "@momo590/mcp-sse-immolog",
  "displayName": "Immolog MCP SSE Server",
  "description": "Provide a specialized MCP server using Server-Sent Events (SSE) to integrate Immolog's business tools and prompts. Enable seamless connection with LibreChat and other clients for real-time data and action handling. Customize and extend the server to fit specific business needs with ease.",
  "iconUrl": null,
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@momo590/mcp-sse-immolog",
  "security": {
    "scanPassed": true
  },
  "tools": [
    {
      "name": "cartofriches",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "page": {
            "type": "number",
            "description": "Numéro de page pour la pagination (par défaut 1). Ignoré si site_id est fourni."
          },
          "coddep": {
            "type": "string",
            "description": "Code INSEE du département (2 ou 3 chiffres, ex: '75'). Obligatoire si site_id, code_insee et in_bbox absents. Ignoré si site_id est fourni."
          },
          "fields": {
            "type": "string",
            "description": "Champs à retourner. 'all' pour tous les champs, sinon une sélection par défaut. Ignoré si site_id est fourni."
          },
          "format": {
            "enum": [
              "text",
              "geojson"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie : 'text' pour résumé lisible, 'geojson' pour données brutes géographiques. Si site_id est fourni, ce paramètre est ignoré."
          },
          "in_bbox": {
            "type": "string",
            "description": "Emprise rectangulaire géographique (format: 'lonmin,latmin,lonmax,latmax'). Max 1° x 1°. Obligatoire si site_id, code_insee et coddep absents. Ignoré si site_id est fourni."
          },
          "site_id": {
            "type": "string",
            "description": "Identifiant unique d'une friche (Cartofriches). Si ce paramètre est renseigné, il prend le dessus sur tous les autres paramètres et permet d'accéder directement à la fiche détaillée via /cartofriches/friches/{site_id}/."
          },
          "ordering": {
            "type": "string",
            "description": "Champ utilisé pour trier les résultats (ex: 'surface_max', '-surface_min'). Ignoré si site_id est fourni."
          },
          "page_size": {
            "type": "number",
            "description": "Nombre de résultats par page (par défaut 10, max 100). Ignoré si site_id est fourni."
          },
          "code_insee": {
            "type": "string",
            "description": "Code INSEE communal ou d'arrondissement municipal. Peut contenir plusieurs codes séparés par des virgules (10 max, même département). Ex: '75056' ou '75056,75057'. Obligatoire si site_id, coddep et in_bbox absents. Ignoré si site_id est fourni."
          },
          "surface_max": {
            "type": "number",
            "description": "Surface maximale de l'unité foncière (en m² ou ha selon le jeu de données). Ignoré si site_id est fourni."
          },
          "surface_min": {
            "type": "number",
            "description": "Surface minimale de l'unité foncière (en m² ou ha selon le jeu de données). Ignoré si site_id est fourni."
          },
          "contains_geom": {
            "type": "string",
            "description": "Filtre géométrique : retourne uniquement les entités dont la géométrie contient celle fournie (format GeoJSON, WKT, HEXEWKB ou WKB). Ex: contains_geom={'type':'Point','coordinates':[2.17,46.75]}. Ignoré si site_id est fourni."
          },
          "urba_zone_type": {
            "type": "string",
            "description": "Type de zone d'urbanisme (filtre métier, ex: 'AU', 'A', 'N', etc.). Ignoré si site_id est fourni."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "dvf_opendata",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "page": {
            "type": "number",
            "description": "Numéro de page pour la pagination (par défaut 1). Ignoré si idmutation est fourni."
          },
          "vefa": {
            "type": "string",
            "description": "Vente en l'état futur d'achèvement (VEFA). Ignoré si idmutation est fourni."
          },
          "fields": {
            "type": "string",
            "description": "'all' pour tous les champs, sinon sélection par défaut. Ignoré si idmutation est fourni."
          },
          "format": {
            "enum": [
              "text",
              "geojson",
              "json",
              "xlsx"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie : 'text' pour résumé lisible, 'geojson' pour données brutes géographiques, 'json' ou 'xlsx' pour l'export d'une fiche mutation. Si idmutation est fourni, ce paramètre est pris en compte uniquement pour le format de la fiche."
          },
          "in_bbox": {
            "type": "string",
            "description": "Emprise rectangulaire géographique (format: 'lonmin,latmin,lonmax,latmax'). Max 0.02° x 0.02°. Obligatoire si idmutation absent et code_insee absent. Ignoré si idmutation est fourni."
          },
          "anneemut": {
            "type": "string",
            "description": "Année de la mutation (>= 2010). Ex: '2022'. Filtre inclusif. Ignoré si idmutation est fourni."
          },
          "idnatmut": {
            "type": "string",
            "description": "Code(s) nature de mutation, séparés par virgule (ex: '1,2'). Voir documentation DVF+. Ignoré si idmutation est fourni."
          },
          "page_size": {
            "type": "number",
            "description": "Nombre de résultats par page (par défaut 10, max 100). Ignoré si idmutation est fourni."
          },
          "sbati_max": {
            "type": "number",
            "description": "Surface bâtie maximale vendue (m²). Ignoré si idmutation est fourni."
          },
          "sbati_min": {
            "type": "number",
            "description": "Surface bâtie minimale vendue (m²). Ignoré si idmutation est fourni."
          },
          "sterr_max": {
            "type": "number",
            "description": "Surface de terrain maximale vendue (m²). Ignoré si idmutation est fourni."
          },
          "sterr_min": {
            "type": "number",
            "description": "Surface de terrain minimale vendue (m²). Ignoré si idmutation est fourni."
          },
          "code_insee": {
            "type": "string",
            "description": "Code INSEE communal ou d'arrondissement municipal. Plusieurs codes possibles (10 max, même département), séparés par des virgules. Obligatoire si idmutation absent. Ignoré si idmutation est fourni."
          },
          "codtypbien": {
            "type": "string",
            "description": "Code(s) typologie de bien, séparés par virgule (ex: '11,121'). Voir documentation DVF+. Ignoré si idmutation est fourni."
          },
          "idmutation": {
            "type": "string",
            "description": "Identifiant unique d'une mutation DVF+ (entier). Si ce paramètre est renseigné, il prend le dessus sur tous les autres et permet d'accéder directement à la fiche mutation via /dvf_opendata/mutations/{idmutation}/. Les autres paramètres sont ignorés."
          },
          "anneemut_max": {
            "type": "string",
            "description": "Année maximale de mutation (>= 2010). Ex: '2023'. Filtre inclusif. Ignoré si idmutation est fourni."
          },
          "anneemut_min": {
            "type": "string",
            "description": "Année minimale de mutation (>= 2010). Ex: '2015'. Filtre inclusif. Ignoré si idmutation est fourni."
          },
          "contains_geom": {
            "type": "string",
            "description": "Filtre géométrique (GeoJSON, WKT, HEXEWKB ou WKB). Ex: contains_geom={'type':'Point','coordinates':[2.17,46.75]}. Ignoré si idmutation est fourni."
          },
          "valeurfonc_max": {
            "type": "number",
            "description": "Valeur foncière maximale (€). Ignoré si idmutation est fourni."
          },
          "valeurfonc_min": {
            "type": "number",
            "description": "Valeur foncière minimale (€). Ignoré si idmutation est fourni."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "indicateurs_conso_espace_commune",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "code_insee"
        ],
        "properties": {
          "page": {
            "type": "number",
            "description": "Numéro de page pour la pagination (par défaut 1)."
          },
          "format": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie : 'text' pour résumé lisible, 'json' pour données brutes."
          },
          "ordering": {
            "type": "string",
            "description": "Tri des résultats (ex: '-annee' pour décroissant, 'annee' pour croissant)."
          },
          "annee_max": {
            "type": "number",
            "description": "Année maximale pour filtrer les indicateurs (inclusif, ex: 2023)."
          },
          "annee_min": {
            "type": "number",
            "description": "Année minimale pour filtrer les indicateurs (inclusif, ex: 2010)."
          },
          "page_size": {
            "type": "number",
            "description": "Nombre de résultats par page (par défaut 10, max 100)."
          },
          "code_insee": {
            "type": "string",
            "description": "Code INSEE de la commune (obligatoire, 5 chiffres, ex: '75056' pour Paris)."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "indicateurs_conso_espace_departement",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "coddep"
        ],
        "properties": {
          "page": {
            "type": "number",
            "description": "Numéro de page pour la pagination (par défaut 1)."
          },
          "coddep": {
            "type": "string",
            "description": "Code du département (obligatoire, 2 ou 3 chiffres, ex: '75' pour Paris)."
          },
          "format": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie : 'text' pour résumé lisible, 'json' pour données brutes."
          },
          "ordering": {
            "type": "string",
            "description": "Tri des résultats (ex: '-annee' pour décroissant, 'annee' pour croissant)."
          },
          "annee_max": {
            "type": "number",
            "description": "Année maximale pour filtrer les indicateurs (inclusif, ex: 2023)."
          },
          "annee_min": {
            "type": "number",
            "description": "Année minimale pour filtrer les indicateurs (inclusif, ex: 2010)."
          },
          "page_size": {
            "type": "number",
            "description": "Nombre de résultats par page (par défaut 10, max 100)."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "indicateurs_prix_commune_annuel",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "code_insee"
        ],
        "properties": {
          "page": {
            "type": "number",
            "description": "Numéro de page pour la pagination (par défaut 1)."
          },
          "annee": {
            "type": "string",
            "description": "Année concernée (ex: '2023')."
          },
          "format": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie : 'text' pour résumé lisible, 'json' pour données brutes."
          },
          "ordering": {
            "type": "string",
            "description": "Tri des résultats (ex: '-annee' pour décroissant, 'annee' pour croissant)."
          },
          "page_size": {
            "type": "number",
            "description": "Nombre de résultats par page (par défaut 10, max 100)."
          },
          "code_insee": {
            "type": "string",
            "description": "Code INSEE de la commune (obligatoire, 5 chiffres, ex: '75056' pour Paris)."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "indicateurs_marche_accessibilite",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Code INSEE (commune) ou code AAV (Aire d'Attraction des Villes), obligatoire. Ex: '75056' ou 'AAV123'."
          },
          "page": {
            "type": "number",
            "description": "Numéro de page pour la pagination (par défaut 1)."
          },
          "annee": {
            "type": "string",
            "description": "Année concernée (ex: '2023')."
          },
          "format": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie : 'text' pour résumé lisible, 'json' pour données brutes."
          },
          "ordering": {
            "type": "string",
            "description": "Tri des résultats (ex: '-annee' pour décroissant, 'annee' pour croissant)."
          },
          "page_size": {
            "type": "number",
            "description": "Nombre de résultats par page (par défaut 10, max 100)."
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "geocode_commune",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "nom": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "fields": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "geocode_epci",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {
          "nom": {
            "type": "string"
          },
          "limit": {
            "type": "number"
          },
          "fields": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "geocode_commune_detail",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "geocode_epci_detail",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "urbs_geocoder_search",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string",
            "description": "Adresse textuelle à rechercher (ex: 10 rue de Paris, Lyon)"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "urbs_dashboard",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "string",
            "description": "Un ou plusieurs id IMOPE séparés par des virgules (obtenus via urbs_geocoder_search)"
          },
          "format": {
            "enum": [
              "text",
              "json"
            ],
            "type": "string",
            "default": "text",
            "description": "Format de sortie (texte ou JSON)"
          },
          "attributes": {
            "type": "string",
            "description": "Liste des attributs à récupérer, séparés par des virgules (optionnel, par défaut tous les attributs disponibles)"
          }
        },
        "additionalProperties": false
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@momo590/mcp-sse-immolog/mcp",
      "configSchema": {}
    }
  ]
}