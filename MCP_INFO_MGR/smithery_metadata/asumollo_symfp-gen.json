{
  "qualifiedName": "@asumollo/symfp-gen",
  "displayName": "CAD Model Automation Bridge Server",
  "description": "Enable AI-driven creation and validation of Eagle CAD components by bridging Claude Desktop with the CAD Model Automation web API. Facilitate seamless interaction with CAD design tools through a clean and efficient MCP interface. Simplify CAD model workflows by providing tools for validation, generation, and previewing of components.",
  "iconUrl": null,
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@asumollo/symfp-gen",
  "security": null,
  "tools": [
    {
      "name": "get_server_info",
      "description": "Get information about the bridge server and API connection status",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "get_cache_status",
      "description": "Get current status of the symbol documentation cache including age, version, and TTL settings",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "refresh_symbol_documentation",
      "description": "Manually refresh the symbol documentation cache from the API",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "validate_library",
      "description": "Validate a complete Eagle library file (requires uploading the file first)",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "file_id"
        ],
        "properties": {
          "file_id": {
            "type": "string",
            "description": "File ID from library upload"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "upload_library",
      "description": "Upload Eagle library XML content for validation and preview. This tool provides the preview URL for viewing your component.",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "library_content"
        ],
        "properties": {
          "filename": {
            "type": "string",
            "description": "Filename for the upload (default: library.lbr)"
          },
          "library_content": {
            "type": "string",
            "description": "Complete Eagle library XML content - paste the template or your XML directly here"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "generate_connector_symbol",
      "description": "Generate a connector symbol using static templates or dynamic generation",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "datasheet_id",
          "category",
          "template",
          "part_name",
          "connector_config"
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "Template category (usually 'connector')"
          },
          "template": {
            "type": "string",
            "description": "Template ID (e.g., 'usb_type_c', 'header', 'audio_jack')"
          },
          "part_name": {
            "type": "string",
            "description": "Part name for the generated component"
          },
          "datasheet_id": {
            "type": "string",
            "description": "Datasheet ID for the connector"
          },
          "connector_config": {
            "type": "object",
            "properties": {
              "num_pins": {
                "type": "number",
                "description": "Number of pins per row (1-1000, required for dynamic generation)"
              },
              "jack_size": {
                "type": "string",
                "description": "Jack size (e.g., '3.5mm', '6.35mm') - for audio connectors"
              },
              "power_pins": {
                "type": "boolean",
                "description": "Include power pins"
              },
              "row_option": {
                "type": "string",
                "description": "Number of rows ('1', '2', '3', '4')"
              },
              "description": {
                "type": "string",
                "description": "Library description"
              },
              "power_count": {
                "type": "number",
                "description": "Number of power pins (≥0)"
              },
              "shield_pins": {
                "type": "boolean",
                "description": "Include shield pins"
              },
              "num_sections": {
                "type": "number",
                "description": "Number of sections (1, 2)"
              },
              "shield_count": {
                "type": "number",
                "description": "Number of shield pins (≥0)"
              },
              "custom_prefix": {
                "type": "string",
                "description": "Custom prefix when format is 'custom_prefix'"
              },
              "sequence_type": {
                "type": "string",
                "description": "Sequence type ('linear', 'sequential')"
              },
              "connector_type": {
                "type": "string",
                "description": "Type of connector ('standard', 'audio', 'usb', 'coaxial')"
              },
              "connector_gender": {
                "type": "string",
                "description": "Connector gender ('male', 'female') - mapped to connector_subtype"
              },
              "connector_subtype": {
                "type": "string",
                "description": "Subtype (e.g., 'male', 'female', 'terminal_block')"
              },
              "differential_pair": {
                "type": "boolean",
                "description": "Use differential pair configuration"
              },
              "pin_naming_format": {
                "type": "string",
                "description": "Pin naming format ('numeric', 'zero_padded', 'alpha', 'alpha_zero_padded', 'custom_prefix')"
              },
              "use_static_template": {
                "type": "boolean",
                "description": "Use static template if available (default: true)"
              }
            },
            "description": "Connector configuration options",
            "additionalProperties": true
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "get_symbol_documentation",
      "description": "Get Eagle symbol format documentation and templates for direct XML generation. NOTE: Documentation is also available as MCP resource 'eagle://symbol-documentation'",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "get_ic_pin_placement_rules",
      "description": "Get IC-specific pin placement rules for optimal symbol layout when generating IC symbols",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "get_ic_templates",
      "description": "Get list of all available IC templates. START HERE to browse templates before using other IC template tools. ANY template can be used as a starting point for customization",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "get_ic_template_by_category",
      "description": "Get IC templates for a specific category with complete metadata including file paths for downloading",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "category"
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "Template category name (e.g., 'microcontrollers', 'amplifiers', 'interface')"
          }
        },
        "additionalProperties": false
      }
    },
    {
      "name": "get_ic_categories",
      "description": "Get available IC template categories with template counts and descriptions",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "properties": {},
        "additionalProperties": false
      }
    },
    {
      "name": "download_ic_template",
      "description": "Download an Eagle .lbr library file for a specific IC template",
      "inputSchema": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-07/schema#",
        "required": [
          "file_path"
        ],
        "properties": {
          "file_path": {
            "type": "string",
            "description": "File path from template metadata (e.g., 'microcontrollers/atmega328p.lbr')"
          }
        },
        "additionalProperties": false
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@asumollo/symfp-gen/mcp",
      "configSchema": {
        "type": "object",
        "title": "MCP Session Configuration",
        "required": [],
        "properties": {},
        "description": "Schema for the /mcp endpoint configuration",
        "x-mcp-version": "1.0",
        "x-query-style": "dot+bracket"
      }
    }
  ]
}