{
  "qualifiedName": "@Kryptoskatt/mcp-server",
  "displayName": "DefiLlama API Proxy Server",
  "description": "Enable AI assistants to interact seamlessly with the DefiLlama API by translating MCP tool calls into API requests. Dynamically generate tools from the DefiLlama OpenAPI specification to provide up-to-date and comprehensive DeFi data access. Simplify integration with DefiLlama's public API through a standardized MCP interface.",
  "iconUrl": "https://icons.duckduckgo.com/ip3/defillama.com.ico",
  "remote": true,
  "deploymentUrl": "https://server.smithery.ai/@Kryptoskatt/mcp-server",
  "security": null,
  "tools": [
    {
      "name": "get_protocol__by_protocol",
      "description": "Get historical TVL of a protocol and breakdowns by token and chain",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "protocol"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "protocol slug"
          }
        }
      }
    },
    {
      "name": "get_v2_historicalChainTvl",
      "description": "Get historical TVL (excludes liquid staking and double counted tvl) of DeFi on all chains",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [],
        "properties": {}
      }
    },
    {
      "name": "get_v2_historicalChainTvl__by_chain",
      "description": "Get historical TVL (excludes liquid staking and double counted tvl) of a chain",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "chain"
        ],
        "properties": {
          "chain": {
            "type": "string",
            "description": "chain slug, you can get these from /chains or the chains property on /protocols"
          }
        }
      }
    },
    {
      "name": "get_tvl__by_protocol",
      "description": "Simplified endpoint to get current TVL of a protocol",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "protocol"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "protocol slug"
          }
        }
      }
    },
    {
      "name": "get_prices_current__by_coins",
      "description": "Get current prices of tokens by contract address\nError Responses:\n502: Internal error",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "coins"
        ],
        "properties": {
          "coins": {
            "type": "string",
            "description": "set of comma-separated tokens defined as {chain}:{address}"
          },
          "searchWidth": {
            "type": "string",
            "description": "time range on either side to find price data, defaults to 6 hours"
          }
        }
      }
    },
    {
      "name": "get_stablecoincharts_all",
      "description": "Get historical mcap sum of all stablecoins",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [],
        "properties": {
          "stablecoin": {
            "type": "integer",
            "description": "stablecoin ID, you can get these from /stablecoins"
          }
        }
      }
    },
    {
      "name": "get_pools",
      "description": "Retrieve the latest data for all pools, including enriched information such as predictions",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [],
        "properties": {}
      }
    },
    {
      "name": "get_chart__by_pool",
      "description": "Get historical APY and TVL of a pool",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "pool"
        ],
        "properties": {
          "pool": {
            "type": "string",
            "description": "pool id, can be retrieved from /pools (property is called pool)"
          }
        }
      }
    },
    {
      "name": "get_overview_dexs",
      "description": "List all dexs along with summaries of their volumes and dataType history data",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [],
        "properties": {
          "excludeTotalDataChart": {
            "type": "boolean",
            "description": "true to exclude aggregated chart from response"
          },
          "excludeTotalDataChartBreakdown": {
            "type": "boolean",
            "description": "true to exclude broken down chart from response"
          }
        }
      }
    },
    {
      "name": "get_overview_dexs__by_chain",
      "description": "List all dexs along with summaries of their volumes and dataType history data filtering by chain",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "chain"
        ],
        "properties": {
          "chain": {
            "type": "string",
            "description": "chain name, list of all supported chains can be found under allChains attribute in /overview/dexs response"
          },
          "excludeTotalDataChart": {
            "type": "boolean",
            "description": "true to exclude aggregated chart from response"
          },
          "excludeTotalDataChartBreakdown": {
            "type": "boolean",
            "description": "true to exclude broken down chart from response"
          }
        }
      }
    },
    {
      "name": "get_summary_dexs__by_protocol",
      "description": "Get summary of dex volume with historical data",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "protocol"
        ],
        "properties": {
          "protocol": {
            "type": "string",
            "description": "protocol slug"
          },
          "excludeTotalDataChart": {
            "type": "boolean",
            "description": "true to exclude aggregated chart from response"
          },
          "excludeTotalDataChartBreakdown": {
            "type": "boolean",
            "description": "true to exclude broken down chart from response"
          }
        }
      }
    },
    {
      "name": "get_overview_fees",
      "description": "List all protocols along with summaries of their fees and revenue and dataType history data",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [],
        "properties": {
          "dataType": {
            "enum": [
              "dailyFees",
              "dailyRevenue"
            ],
            "type": "string",
            "description": "Desired data type, dailyFees by default."
          },
          "excludeTotalDataChart": {
            "type": "boolean",
            "description": "true to exclude aggregated chart from response"
          },
          "excludeTotalDataChartBreakdown": {
            "type": "boolean",
            "description": "true to exclude broken down chart from response"
          }
        }
      }
    },
    {
      "name": "get_overview_fees__by_chain",
      "description": "List all protocols along with summaries of their fees and revenue and dataType history data by chain",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "chain"
        ],
        "properties": {
          "chain": {
            "type": "string",
            "description": "chain name, list of all supported chains can be found under allChains attribute in /overview/fees response"
          },
          "dataType": {
            "enum": [
              "dailyFees",
              "dailyRevenue"
            ],
            "type": "string",
            "description": "Desired data type, dailyFees by default."
          },
          "excludeTotalDataChart": {
            "type": "boolean",
            "description": "true to exclude aggregated chart from response"
          },
          "excludeTotalDataChartBreakdown": {
            "type": "boolean",
            "description": "true to exclude broken down chart from response"
          }
        }
      }
    },
    {
      "name": "get_summary_fees__by_protocol",
      "description": "Get summary of protocol fees and revenue with historical data",
      "inputSchema": {
        "type": "object",
        "$defs": {},
        "required": [
          "protocol"
        ],
        "properties": {
          "dataType": {
            "enum": [
              "dailyFees",
              "dailyRevenue"
            ],
            "type": "string",
            "description": "Desired data type, dailyFees by default."
          },
          "protocol": {
            "type": "string",
            "description": "protocol slug"
          }
        }
      }
    },
    {
      "name": "get_yield_pools_enhanced",
      "description": "Fetch DeFi yield pools with enhanced filtering and data transformation. Returns symbol, project, tvlUsd, apy, apyMean30d, predictions, poolUrl, and projectUrl for each pool.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Optional filter for blockchain (e.g., \"Ethereum\", \"Solana\")"
          },
          "limit": {
            "type": "number",
            "description": "Optional limit for number of results to return (e.g., 5, 10)"
          },
          "project": {
            "type": "string",
            "description": "Optional filter for project name (e.g., \"lido\", \"aave-v3\")"
          },
          "tokenSymbol": {
            "type": "string",
            "description": "Optional filter for token symbol (e.g., \"ETH\", \"USDC\")"
          }
        }
      }
    },
    {
      "name": "generate_yield_analysis_prompt",
      "description": "Generate a comprehensive prompt for analyzing DeFi yield pools data.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string",
            "description": "Optional blockchain filter for focused analysis"
          },
          "project": {
            "type": "string",
            "description": "Optional project filter for focused analysis"
          }
        }
      }
    }
  ],
  "connections": [
    {
      "type": "http",
      "deploymentUrl": "https://server.smithery.ai/@Kryptoskatt/mcp-server/mcp",
      "configSchema": {
        "type": "object",
        "title": "MCP Session Configuration",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "DeFiLlama API key (if needed)"
          },
          "baseUrl": {
            "type": "string",
            "default": "https://api.llama.fi",
            "description": "Custom base URL for DeFiLlama API"
          },
          "timeout": {
            "type": "number",
            "default": 30000,
            "description": "Request timeout in milliseconds"
          }
        },
        "description": "Schema for the /mcp endpoint configuration",
        "x-query-style": "dot+bracket"
      }
    }
  ]
}